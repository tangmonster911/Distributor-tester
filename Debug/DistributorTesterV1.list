
DistributorTesterV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08005950  08005950  00015950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce8  08005ce8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf0  08005cf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08005d68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005d68  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ce  00000000  00000000  0002f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00031d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175c3  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105cb  00000000  00000000  00049e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7cc  00000000  00000000  0005a44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f1c  00000000  00000000  000e8c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000949c  00000000  00000000  000ebb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005934 	.word	0x08005934

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005934 	.word	0x08005934

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e84:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	2400      	movs	r4, #0
 8000e88:	9403      	str	r4, [sp, #12]
 8000e8a:	9404      	str	r4, [sp, #16]
 8000e8c:	9405      	str	r4, [sp, #20]
 8000e8e:	9406      	str	r4, [sp, #24]
 8000e90:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	9400      	str	r4, [sp, #0]
 8000e94:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <MX_GPIO_Init+0x108>)
 8000e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e98:	f042 0204 	orr.w	r2, r2, #4
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea0:	f002 0204 	and.w	r2, r2, #4
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	9401      	str	r4, [sp, #4]
 8000eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb4:	f002 0201 	and.w	r2, r2, #1
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	9402      	str	r4, [sp, #8]
 8000ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec0:	f042 0202 	orr.w	r2, r2, #2
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000ed0:	4d2e      	ldr	r5, [pc, #184]	; (8000f8c <MX_GPIO_Init+0x10c>)
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ed8:	4628      	mov	r0, r5
 8000eda:	f001 fb9c 	bl	8002616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|D6_Pin|D7_Pin|E_Pin, GPIO_PIN_RESET);
 8000ede:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8000f94 <MX_GPIO_Init+0x114>
 8000ee2:	4622      	mov	r2, r4
 8000ee4:	f243 0184 	movw	r1, #12420	; 0x3084
 8000ee8:	4640      	mov	r0, r8
 8000eea:	f001 fb94 	bl	8002616 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000eee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ef2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	a903      	add	r1, sp, #12
 8000efe:	4628      	mov	r0, r5
 8000f00:	f001 faa2 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ignition_Pin */
  GPIO_InitStruct.Pin = Ignition_Pin;
 8000f04:	2308      	movs	r3, #8
 8000f06:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f08:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f0c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(Ignition_GPIO_Port, &GPIO_InitStruct);
 8000f10:	a903      	add	r1, sp, #12
 8000f12:	4628      	mov	r0, r5
 8000f14:	f001 fa98 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Menu_Pin */
  GPIO_InitStruct.Pin = Menu_Pin;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f1c:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8000f20:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f22:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(Menu_GPIO_Port, &GPIO_InitStruct);
 8000f24:	a903      	add	r1, sp, #12
 8000f26:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_GPIO_Init+0x110>)
 8000f28:	f001 fa8e 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin D6_Pin D7_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|D6_Pin|D7_Pin|E_Pin;
 8000f2c:	f243 0384 	movw	r3, #12420	; 0x3084
 8000f30:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	a903      	add	r1, sp, #12
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	f001 fa84 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHO_Pin */
  GPIO_InitStruct.Pin = TACHO_Pin;
 8000f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f44:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f46:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TACHO_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	a903      	add	r1, sp, #12
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f001 fa7b 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8000f52:	4622      	mov	r2, r4
 8000f54:	2103      	movs	r1, #3
 8000f56:	2009      	movs	r0, #9
 8000f58:	f001 fa0a 	bl	8002370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f5c:	2009      	movs	r0, #9
 8000f5e:	f001 fa3f 	bl	80023e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f62:	4622      	mov	r2, r4
 8000f64:	4621      	mov	r1, r4
 8000f66:	2017      	movs	r0, #23
 8000f68:	f001 fa02 	bl	8002370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f001 fa37 	bl	80023e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f72:	4622      	mov	r2, r4
 8000f74:	4621      	mov	r1, r4
 8000f76:	2028      	movs	r0, #40	; 0x28
 8000f78:	f001 f9fa 	bl	8002370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f001 fa2f 	bl	80023e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	b008      	add	sp, #32
 8000f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400

08000f98 <MX_TIM11_Init>:
{
 8000f98:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <MX_TIM11_Init+0x24>)
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_TIM11_Init+0x28>)
 8000f9e:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 25000;
 8000fa0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000fa4:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fb4:	f001 fff4 	bl	8002fa0 <HAL_TIM_Base_Init>
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001bc 	.word	0x200001bc
 8000fc0:	40014800 	.word	0x40014800

08000fc4 <MX_TIM2_Init>:
{
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc8:	2400      	movs	r4, #0
 8000fca:	9402      	str	r4, [sp, #8]
 8000fcc:	9403      	str	r4, [sp, #12]
 8000fce:	9404      	str	r4, [sp, #16]
 8000fd0:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	9400      	str	r4, [sp, #0]
 8000fd4:	9401      	str	r4, [sp, #4]
  htim2.Instance = TIM2;
 8000fd6:	4d0f      	ldr	r5, [pc, #60]	; (8001014 <MX_TIM2_Init+0x50>)
 8000fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fdc:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 25;
 8000fde:	2319      	movs	r3, #25
 8000fe0:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1000000-1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_TIM2_Init+0x54>)
 8000fe6:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fee:	4628      	mov	r0, r5
 8000ff0:	f001 ffd6 	bl	8002fa0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffa:	a902      	add	r1, sp, #8
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f002 f808 	bl	8003012 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001006:	4669      	mov	r1, sp
 8001008:	4628      	mov	r0, r5
 800100a:	f002 f881 	bl	8003110 <HAL_TIMEx_MasterConfigSynchronization>
}
 800100e:	b007      	add	sp, #28
 8001010:	bd30      	pop	{r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	20000204 	.word	0x20000204
 8001018:	000f423f 	.word	0x000f423f

0800101c <MX_TIM3_Init>:
{
 800101c:	b530      	push	{r4, r5, lr}
 800101e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001020:	2400      	movs	r4, #0
 8001022:	9402      	str	r4, [sp, #8]
 8001024:	9403      	str	r4, [sp, #12]
 8001026:	9404      	str	r4, [sp, #16]
 8001028:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	9400      	str	r4, [sp, #0]
 800102c:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 800102e:	4d0f      	ldr	r5, [pc, #60]	; (800106c <MX_TIM3_Init+0x50>)
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_TIM3_Init+0x54>)
 8001032:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 25000;
 8001034:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001038:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 2000-1;
 800103c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001040:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001048:	4628      	mov	r0, r5
 800104a:	f001 ffa9 	bl	8002fa0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001054:	a902      	add	r1, sp, #8
 8001056:	4628      	mov	r0, r5
 8001058:	f001 ffdb 	bl	8003012 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001060:	4669      	mov	r1, sp
 8001062:	4628      	mov	r0, r5
 8001064:	f002 f854 	bl	8003110 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001068:	b007      	add	sp, #28
 800106a:	bd30      	pop	{r4, r5, pc}
 800106c:	2000024c 	.word	0x2000024c
 8001070:	40000400 	.word	0x40000400

08001074 <SystemClock_Config>:
{
 8001074:	b530      	push	{r4, r5, lr}
 8001076:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001078:	2230      	movs	r2, #48	; 0x30
 800107a:	2100      	movs	r1, #0
 800107c:	a808      	add	r0, sp, #32
 800107e:	f002 f8dd 	bl	800323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001082:	2400      	movs	r4, #0
 8001084:	9403      	str	r4, [sp, #12]
 8001086:	9404      	str	r4, [sp, #16]
 8001088:	9405      	str	r4, [sp, #20]
 800108a:	9406      	str	r4, [sp, #24]
 800108c:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	9401      	str	r4, [sp, #4]
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <SystemClock_Config+0x84>)
 8001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001094:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	9402      	str	r4, [sp, #8]
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <SystemClock_Config+0x88>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ba:	2502      	movs	r5, #2
 80010bc:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c2:	2310      	movs	r3, #16
 80010c4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010ca:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80010cc:	23c8      	movs	r3, #200	; 0xc8
 80010ce:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	a808      	add	r0, sp, #32
 80010d8:	f001 fab2 	bl	8002640 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80010e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010e8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80010ea:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ec:	2103      	movs	r1, #3
 80010ee:	a803      	add	r0, sp, #12
 80010f0:	f001 fcf4 	bl	8002adc <HAL_RCC_ClockConfig>
}
 80010f4:	b015      	add	sp, #84	; 0x54
 80010f6:	bd30      	pop	{r4, r5, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <ClearScreenData>:

/* USER CODE BEGIN 4 */
void ClearScreenData(void)
{
 8001100:	b510      	push	{r4, lr}
	  //TM_HD44780_Init(20, 4);
	  switch (ScreenNumber)
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <ClearScreenData+0xc0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d842      	bhi.n	8001190 <ClearScreenData+0x90>
 800110a:	e8df f003 	tbb	[pc, r3]
 800110e:	1702      	.short	0x1702
 8001110:	422c      	.short	0x422c
	  {
	  case 0:
		  TM_HD44780_Puts(0, 0, "  Distributor Data  ");
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <ClearScreenData+0xc4>)
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	f000 ffd0 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 1, "RPM                 ");
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <ClearScreenData+0xc8>)
 800111e:	2101      	movs	r1, #1
 8001120:	2000      	movs	r0, #0
 8001122:	f000 ffcb 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 2, "Advance Deg         ");
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <ClearScreenData+0xcc>)
 8001128:	2102      	movs	r1, #2
 800112a:	2000      	movs	r0, #0
 800112c:	f000 ffc6 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 3, "Dwell Deg           ");
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <ClearScreenData+0xd0>)
 8001132:	2103      	movs	r1, #3
 8001134:	2000      	movs	r0, #0
 8001136:	f000 ffc1 	bl	80020bc <TM_HD44780_Puts>
		  break;
 800113a:	e029      	b.n	8001190 <ClearScreenData+0x90>
	  case 1:
		  TM_HD44780_Puts(0, 0, "DwellDeg RPM:       ");
 800113c:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <ClearScreenData+0xd4>)
 800113e:	2100      	movs	r1, #0
 8001140:	4608      	mov	r0, r1
 8001142:	f000 ffbb 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 1, "                    ");
 8001146:	4c24      	ldr	r4, [pc, #144]	; (80011d8 <ClearScreenData+0xd8>)
 8001148:	4622      	mov	r2, r4
 800114a:	2101      	movs	r1, #1
 800114c:	2000      	movs	r0, #0
 800114e:	f000 ffb5 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 2, "                    ");
 8001152:	4622      	mov	r2, r4
 8001154:	2102      	movs	r1, #2
 8001156:	2000      	movs	r0, #0
 8001158:	f000 ffb0 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 3, "                    ");
 800115c:	4622      	mov	r2, r4
 800115e:	2103      	movs	r1, #3
 8001160:	2000      	movs	r0, #0
 8001162:	f000 ffab 	bl	80020bc <TM_HD44780_Puts>
	  case 2:
		  TM_HD44780_Puts(0, 0, "Dwell ms RPM:       ");
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <ClearScreenData+0xdc>)
 8001168:	2100      	movs	r1, #0
 800116a:	4608      	mov	r0, r1
 800116c:	f000 ffa6 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 1, "                    ");
 8001170:	4c19      	ldr	r4, [pc, #100]	; (80011d8 <ClearScreenData+0xd8>)
 8001172:	4622      	mov	r2, r4
 8001174:	2101      	movs	r1, #1
 8001176:	2000      	movs	r0, #0
 8001178:	f000 ffa0 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 2, "                    ");
 800117c:	4622      	mov	r2, r4
 800117e:	2102      	movs	r1, #2
 8001180:	2000      	movs	r0, #0
 8001182:	f000 ff9b 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 3, "                    ");
 8001186:	4622      	mov	r2, r4
 8001188:	2103      	movs	r1, #3
 800118a:	2000      	movs	r0, #0
 800118c:	f000 ff96 	bl	80020bc <TM_HD44780_Puts>
		  break;

		  break;

	  }
}
 8001190:	bd10      	pop	{r4, pc}
		  TM_HD44780_Puts(0, 0, "Adv  Deg RPM:       ");
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <ClearScreenData+0xe0>)
 8001194:	2100      	movs	r1, #0
 8001196:	4608      	mov	r0, r1
 8001198:	f000 ff90 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 1, "                    ");
 800119c:	4c0e      	ldr	r4, [pc, #56]	; (80011d8 <ClearScreenData+0xd8>)
 800119e:	4622      	mov	r2, r4
 80011a0:	2101      	movs	r1, #1
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 ff8a 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 2, "                    ");
 80011a8:	4622      	mov	r2, r4
 80011aa:	2102      	movs	r1, #2
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 ff85 	bl	80020bc <TM_HD44780_Puts>
		  TM_HD44780_Puts(0, 3, "                    ");
 80011b2:	4622      	mov	r2, r4
 80011b4:	2103      	movs	r1, #3
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 ff80 	bl	80020bc <TM_HD44780_Puts>
}
 80011bc:	e7e8      	b.n	8001190 <ClearScreenData+0x90>
 80011be:	bf00      	nop
 80011c0:	200001ac 	.word	0x200001ac
 80011c4:	08005950 	.word	0x08005950
 80011c8:	08005968 	.word	0x08005968
 80011cc:	08005980 	.word	0x08005980
 80011d0:	08005998 	.word	0x08005998
 80011d4:	080059b0 	.word	0x080059b0
 80011d8:	080059c8 	.word	0x080059c8
 80011dc:	080059e0 	.word	0x080059e0
 80011e0:	080059f8 	.word	0x080059f8

080011e4 <SystemClock_ConfigDistributor>:




void SystemClock_ConfigDistributor(void)
{
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e8:	2230      	movs	r2, #48	; 0x30
 80011ea:	2100      	movs	r1, #0
 80011ec:	a808      	add	r0, sp, #32
 80011ee:	f002 f825 	bl	800323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f2:	2400      	movs	r4, #0
 80011f4:	9403      	str	r4, [sp, #12]
 80011f6:	9404      	str	r4, [sp, #16]
 80011f8:	9405      	str	r4, [sp, #20]
 80011fa:	9406      	str	r4, [sp, #24]
 80011fc:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	9401      	str	r4, [sp, #4]
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <SystemClock_ConfigDistributor+0x88>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	9402      	str	r4, [sp, #8]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SystemClock_ConfigDistributor+0x8c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122a:	2502      	movs	r5, #2
 800122c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 20;
 8001232:	2314      	movs	r3, #20
 8001234:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800123a:	2310      	movs	r3, #16
 800123c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800123e:	23c8      	movs	r3, #200	; 0xc8
 8001240:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001242:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001244:	2304      	movs	r3, #4
 8001246:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	a808      	add	r0, sp, #32
 800124a:	f001 f9f9 	bl	8002640 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001256:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800125a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800125c:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800125e:	2103      	movs	r1, #3
 8001260:	a803      	add	r0, sp, #12
 8001262:	f001 fc3b 	bl	8002adc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001266:	b015      	add	sp, #84	; 0x54
 8001268:	bd30      	pop	{r4, r5, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <main>:
{
 8001274:	b508      	push	{r3, lr}
  HAL_Init();
 8001276:	f001 f84f 	bl	8002318 <HAL_Init>
  SystemClock_Config();
 800127a:	f7ff fefb 	bl	8001074 <SystemClock_Config>
	SystemClock_ConfigDistributor();
 800127e:	f7ff ffb1 	bl	80011e4 <SystemClock_ConfigDistributor>
  MX_GPIO_Init();
 8001282:	f7ff fdfd 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001286:	f7ff fe9d 	bl	8000fc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800128a:	f7ff fec7 	bl	800101c <MX_TIM3_Init>
  MX_TIM11_Init();
 800128e:	f7ff fe83 	bl	8000f98 <MX_TIM11_Init>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001292:	2009      	movs	r0, #9
 8001294:	f001 f8b2 	bl	80023fc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001298:	2028      	movs	r0, #40	; 0x28
 800129a:	f001 f8af 	bl	80023fc <HAL_NVIC_DisableIRQ>
	TM_HD44780_Init(20, 4);
 800129e:	2104      	movs	r1, #4
 80012a0:	2014      	movs	r0, #20
 80012a2:	f000 ff4d 	bl	8002140 <TM_HD44780_Init>
	ScreenNumber = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	4a83      	ldr	r2, [pc, #524]	; (80014b8 <main+0x244>)
 80012aa:	6013      	str	r3, [r2, #0]
	ScreenUpdate = ClearScreen;
 80012ac:	4a83      	ldr	r2, [pc, #524]	; (80014bc <main+0x248>)
 80012ae:	6013      	str	r3, [r2, #0]
	MathDo = MathUpdateDone;
 80012b0:	4a83      	ldr	r2, [pc, #524]	; (80014c0 <main+0x24c>)
 80012b2:	7013      	strb	r3, [r2, #0]
	HAL_TIM_Base_Start(&htim2);    //Start TIM2 without interrupt
 80012b4:	4883      	ldr	r0, [pc, #524]	; (80014c4 <main+0x250>)
 80012b6:	f001 fcf7 	bl	8002ca8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);    //Start TIM3 with interrupt
 80012ba:	4883      	ldr	r0, [pc, #524]	; (80014c8 <main+0x254>)
 80012bc:	f001 fd2a 	bl	8002d14 <HAL_TIM_Base_Start_IT>
		if (MathDo == MathUpdate)
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <main+0x24c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d00e      	beq.n	80012e6 <main+0x72>
		if ((ScreenUpdate == UpdateScreen ) && (HAL_GPIO_ReadPin(Menu_GPIO_Port,Menu_Pin) == 1))
 80012c8:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <main+0x248>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f000 8088 	beq.w	80013e2 <main+0x16e>
		if (ScreenUpdate == ClearScreen ){
 80012d2:	4b7a      	ldr	r3, [pc, #488]	; (80014bc <main+0x248>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f2      	bne.n	80012c0 <main+0x4c>
			ClearScreenData();
 80012da:	f7ff ff11 	bl	8001100 <ClearScreenData>
			ScreenUpdate = ScreenUpdateDone;
 80012de:	4b77      	ldr	r3, [pc, #476]	; (80014bc <main+0x248>)
 80012e0:	2203      	movs	r2, #3
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e7ec      	b.n	80012c0 <main+0x4c>
			if (TachoTimerValue > 0)
 80012e6:	4b79      	ldr	r3, [pc, #484]	; (80014cc <main+0x258>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	b190      	cbz	r0, 8001312 <main+0x9e>
				RPM = 1.0f / ((TachoTimerValue) / 60000000.0f);   //calculate Rpm
 80012ec:	ee07 0a90 	vmov	s15, r0
 80012f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012f4:	eddf 7a76 	vldr	s15, [pc, #472]	; 80014d0 <main+0x25c>
 80012f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001304:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <main+0x260>)
 8001306:	edc3 7a00 	vstr	s15, [r3]
			for (i = 0; i < 12; i++)
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <main+0x264>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e01a      	b.n	8001348 <main+0xd4>
				RPM = 0;
 8001312:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <main+0x260>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e7f7      	b.n	800130a <main+0x96>
					CylinderAdvanceDegree[i] = 0;
 800131a:	4a70      	ldr	r2, [pc, #448]	; (80014dc <main+0x268>)
 800131c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001320:	2100      	movs	r1, #0
 8001322:	6011      	str	r1, [r2, #0]
					CylinderDwellDegree[i] = 0;
 8001324:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <main+0x26c>)
 8001326:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800132a:	6011      	str	r1, [r2, #0]
					CylinderDwellMs[i] = 0;
 800132c:	4a6d      	ldr	r2, [pc, #436]	; (80014e4 <main+0x270>)
 800132e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001332:	6011      	str	r1, [r2, #0]
				CylinderDwellEndCounter[i] = 0;                                                                                 //clear for next round
 8001334:	2200      	movs	r2, #0
 8001336:	496c      	ldr	r1, [pc, #432]	; (80014e8 <main+0x274>)
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				CylinderDwellStartCounter[i] = 0;                                                                               //clear for next round
 800133c:	496b      	ldr	r1, [pc, #428]	; (80014ec <main+0x278>)
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (i = 0; i < 12; i++)
 8001342:	3301      	adds	r3, #1
 8001344:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <main+0x264>)
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <main+0x264>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b0b      	cmp	r3, #11
 800134e:	d83e      	bhi.n	80013ce <main+0x15a>
				if ((CylinderDwellEndCounter[i] < CylinderDwellStartCounter[i]) || CylinderDwellEndCounter[i] == 0 || CylinderDwellStartCounter[i] == 0)  //check for any errors in data
 8001350:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <main+0x274>)
 8001352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001356:	4965      	ldr	r1, [pc, #404]	; (80014ec <main+0x278>)
 8001358:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800135c:	428a      	cmp	r2, r1
 800135e:	d3dc      	bcc.n	800131a <main+0xa6>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d0da      	beq.n	800131a <main+0xa6>
 8001364:	2900      	cmp	r1, #0
 8001366:	d0d8      	beq.n	800131a <main+0xa6>
					CylinderAdvanceDegree[i] =  (((float)TachoTimerValue - (float)CylinderDwellEndCounter[i])/(float)TachoTimerValue) * 360.0f;             //convert end count to degrees
 8001368:	ee07 0a90 	vmov	s15, r0
 800136c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001370:	ee07 2a90 	vmov	s15, r2
 8001374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001378:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800137c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001380:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80014f0 <main+0x27c>
 8001384:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001388:	4c54      	ldr	r4, [pc, #336]	; (80014dc <main+0x268>)
 800138a:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800138e:	edcc 7a00 	vstr	s15, [ip]
					CylinderDwellDegree[i] = (((float)CylinderDwellEndCounter[i] - (float)CylinderDwellStartCounter[i]) / (float)TachoTimerValue) * 360.0f; //convert dwell count start and end difference to degrees
 8001392:	ee07 1a90 	vmov	s15, r1
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80013a6:	494e      	ldr	r1, [pc, #312]	; (80014e0 <main+0x26c>)
 80013a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80013ac:	ed81 7a00 	vstr	s14, [r1]
					CylinderDwellMs[i] = ((float)CylinderDwellEndCounter[i] - (float)CylinderDwellStartCounter[i]) / 1000.0f;                     //convert 1us count difference to ms
 80013b0:	eddf 6a50 	vldr	s13, [pc, #320]	; 80014f4 <main+0x280>
 80013b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b8:	494a      	ldr	r1, [pc, #296]	; (80014e4 <main+0x270>)
 80013ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80013be:	ed81 7a00 	vstr	s14, [r1]
					if (CylinderDwellEndCounter[i] > 0) CylinderCount = i;                                                          //check amount of sparks per rotation.
 80013c2:	494d      	ldr	r1, [pc, #308]	; (80014f8 <main+0x284>)
 80013c4:	600b      	str	r3, [r1, #0]
					timedifference = TachoTimerValue- CylinderDwellEndCounter[CylinderCount];
 80013c6:	1a82      	subs	r2, r0, r2
 80013c8:	494c      	ldr	r1, [pc, #304]	; (80014fc <main+0x288>)
 80013ca:	600a      	str	r2, [r1, #0]
 80013cc:	e7b2      	b.n	8001334 <main+0xc0>
			ScreenUpdate = UpdateScreen;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <main+0x248>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
			MathDo = MathUpdateDone;
 80013d4:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <main+0x24c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013da:	2017      	movs	r0, #23
 80013dc:	f001 f800 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 80013e0:	e772      	b.n	80012c8 <main+0x54>
		if ((ScreenUpdate == UpdateScreen ) && (HAL_GPIO_ReadPin(Menu_GPIO_Port,Menu_Pin) == 1))
 80013e2:	2120      	movs	r1, #32
 80013e4:	4846      	ldr	r0, [pc, #280]	; (8001500 <main+0x28c>)
 80013e6:	f001 f90f 	bl	8002608 <HAL_GPIO_ReadPin>
 80013ea:	2801      	cmp	r0, #1
 80013ec:	f47f af71 	bne.w	80012d2 <main+0x5e>
			switch (ScreenNumber)
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <main+0x244>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	f63f af6c 	bhi.w	80012d2 <main+0x5e>
 80013fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80013fe:	0004      	.short	0x0004
 8001400:	01460087 	.word	0x01460087
 8001404:	020f      	.short	0x020f
				ClearScreenData();
 8001406:	f7ff fe7b 	bl	8001100 <ClearScreenData>
				gcvt(RPM,5,PrintString);
 800140a:	4c3e      	ldr	r4, [pc, #248]	; (8001504 <main+0x290>)
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <main+0x260>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	f7ff f89a 	bl	8000548 <__aeabi_f2d>
 8001414:	ec41 0b10 	vmov	d0, r0, r1
 8001418:	4621      	mov	r1, r4
 800141a:	2005      	movs	r0, #5
 800141c:	f001 feb8 	bl	8003190 <gcvt>
				TM_HD44780_Puts(6, 1, PrintString);
 8001420:	4622      	mov	r2, r4
 8001422:	2101      	movs	r1, #1
 8001424:	2006      	movs	r0, #6
 8001426:	f000 fe49 	bl	80020bc <TM_HD44780_Puts>
				if (CylinderAdvanceDegree[CylinderCount] > 0)
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <main+0x284>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <main+0x268>)
 8001430:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd2e      	ble.n	80014a0 <main+0x22c>
					gcvt(CylinderAdvanceDegree[CylinderCount], 4, PrintString);
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f7ff f87f 	bl	8000548 <__aeabi_f2d>
 800144a:	ec41 0b10 	vmov	d0, r0, r1
 800144e:	4621      	mov	r1, r4
 8001450:	2004      	movs	r0, #4
 8001452:	f001 fe9d 	bl	8003190 <gcvt>
					TM_HD44780_Puts(13, 2, PrintString);
 8001456:	4622      	mov	r2, r4
 8001458:	2102      	movs	r1, #2
 800145a:	200d      	movs	r0, #13
 800145c:	f000 fe2e 	bl	80020bc <TM_HD44780_Puts>
				if (CylinderDwellDegree[CylinderCount] > 0)
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <main+0x284>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <main+0x26c>)
 8001466:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	dd19      	ble.n	80014ac <main+0x238>
					gcvt(CylinderDwellDegree[CylinderCount], 4, PrintString);
 8001478:	4c22      	ldr	r4, [pc, #136]	; (8001504 <main+0x290>)
 800147a:	ee17 0a90 	vmov	r0, s15
 800147e:	f7ff f863 	bl	8000548 <__aeabi_f2d>
 8001482:	ec41 0b10 	vmov	d0, r0, r1
 8001486:	4621      	mov	r1, r4
 8001488:	2004      	movs	r0, #4
 800148a:	f001 fe81 	bl	8003190 <gcvt>
					TM_HD44780_Puts(11, 3, PrintString);
 800148e:	4622      	mov	r2, r4
 8001490:	2103      	movs	r1, #3
 8001492:	200b      	movs	r0, #11
 8001494:	f000 fe12 	bl	80020bc <TM_HD44780_Puts>
				ScreenUpdate = ScreenUpdateDone;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <main+0x248>)
 800149a:	2203      	movs	r2, #3
 800149c:	601a      	str	r2, [r3, #0]
				break;
 800149e:	e718      	b.n	80012d2 <main+0x5e>
					TM_HD44780_Puts(13, 2, "err");
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <main+0x294>)
 80014a2:	2102      	movs	r1, #2
 80014a4:	200d      	movs	r0, #13
 80014a6:	f000 fe09 	bl	80020bc <TM_HD44780_Puts>
 80014aa:	e7d9      	b.n	8001460 <main+0x1ec>
					TM_HD44780_Puts(11, 3, "err");
 80014ac:	4a16      	ldr	r2, [pc, #88]	; (8001508 <main+0x294>)
 80014ae:	2103      	movs	r1, #3
 80014b0:	200b      	movs	r0, #11
 80014b2:	f000 fe03 	bl	80020bc <TM_HD44780_Puts>
 80014b6:	e7ef      	b.n	8001498 <main+0x224>
 80014b8:	200001ac 	.word	0x200001ac
 80014bc:	200001b0 	.word	0x200001b0
 80014c0:	2000019c 	.word	0x2000019c
 80014c4:	20000204 	.word	0x20000204
 80014c8:	2000024c 	.word	0x2000024c
 80014cc:	200001b8 	.word	0x200001b8
 80014d0:	4c64e1c0 	.word	0x4c64e1c0
 80014d4:	200001a8 	.word	0x200001a8
 80014d8:	20000294 	.word	0x20000294
 80014dc:	2000008c 	.word	0x2000008c
 80014e0:	200000c4 	.word	0x200000c4
 80014e4:	2000012c 	.word	0x2000012c
 80014e8:	200000f8 	.word	0x200000f8
 80014ec:	20000160 	.word	0x20000160
 80014f0:	43b40000 	.word	0x43b40000
 80014f4:	447a0000 	.word	0x447a0000
 80014f8:	200000c0 	.word	0x200000c0
 80014fc:	20000298 	.word	0x20000298
 8001500:	40020000 	.word	0x40020000
 8001504:	200001a0 	.word	0x200001a0
 8001508:	08005a10 	.word	0x08005a10
				ClearScreenData();
 800150c:	f7ff fdf8 	bl	8001100 <ClearScreenData>
				gcvt(RPM, 5, PrintString);
 8001510:	4cbd      	ldr	r4, [pc, #756]	; (8001808 <main+0x594>)
 8001512:	4bbe      	ldr	r3, [pc, #760]	; (800180c <main+0x598>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f7ff f817 	bl	8000548 <__aeabi_f2d>
 800151a:	ec41 0b10 	vmov	d0, r0, r1
 800151e:	4621      	mov	r1, r4
 8001520:	2005      	movs	r0, #5
 8001522:	f001 fe35 	bl	8003190 <gcvt>
				TM_HD44780_Puts(14, 0, PrintString);
 8001526:	4622      	mov	r2, r4
 8001528:	2100      	movs	r1, #0
 800152a:	200e      	movs	r0, #14
 800152c:	f000 fdc6 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[0], 3,PrintString);
 8001530:	4db7      	ldr	r5, [pc, #732]	; (8001810 <main+0x59c>)
 8001532:	6828      	ldr	r0, [r5, #0]
 8001534:	f7ff f808 	bl	8000548 <__aeabi_f2d>
 8001538:	ec41 0b10 	vmov	d0, r0, r1
 800153c:	4621      	mov	r1, r4
 800153e:	2003      	movs	r0, #3
 8001540:	f001 fe26 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 1, PrintString);
 8001544:	4622      	mov	r2, r4
 8001546:	2101      	movs	r1, #1
 8001548:	2000      	movs	r0, #0
 800154a:	f000 fdb7 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[1], 3,PrintString);
 800154e:	6868      	ldr	r0, [r5, #4]
 8001550:	f7fe fffa 	bl	8000548 <__aeabi_f2d>
 8001554:	ec41 0b10 	vmov	d0, r0, r1
 8001558:	4621      	mov	r1, r4
 800155a:	2003      	movs	r0, #3
 800155c:	f001 fe18 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 1, PrintString);
 8001560:	4622      	mov	r2, r4
 8001562:	2101      	movs	r1, #1
 8001564:	2005      	movs	r0, #5
 8001566:	f000 fda9 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[2], 3,PrintString);
 800156a:	68a8      	ldr	r0, [r5, #8]
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	ec41 0b10 	vmov	d0, r0, r1
 8001574:	4621      	mov	r1, r4
 8001576:	2003      	movs	r0, #3
 8001578:	f001 fe0a 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 1, PrintString);
 800157c:	4622      	mov	r2, r4
 800157e:	2101      	movs	r1, #1
 8001580:	200a      	movs	r0, #10
 8001582:	f000 fd9b 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[3], 3,PrintString);
 8001586:	68e8      	ldr	r0, [r5, #12]
 8001588:	f7fe ffde 	bl	8000548 <__aeabi_f2d>
 800158c:	ec41 0b10 	vmov	d0, r0, r1
 8001590:	4621      	mov	r1, r4
 8001592:	2003      	movs	r0, #3
 8001594:	f001 fdfc 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 1, PrintString);
 8001598:	4622      	mov	r2, r4
 800159a:	2101      	movs	r1, #1
 800159c:	200f      	movs	r0, #15
 800159e:	f000 fd8d 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[4], 3,PrintString);
 80015a2:	6928      	ldr	r0, [r5, #16]
 80015a4:	f7fe ffd0 	bl	8000548 <__aeabi_f2d>
 80015a8:	ec41 0b10 	vmov	d0, r0, r1
 80015ac:	4621      	mov	r1, r4
 80015ae:	2003      	movs	r0, #3
 80015b0:	f001 fdee 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 2, PrintString);
 80015b4:	4622      	mov	r2, r4
 80015b6:	2102      	movs	r1, #2
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fd7f 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[5], 3,PrintString);
 80015be:	6968      	ldr	r0, [r5, #20]
 80015c0:	f7fe ffc2 	bl	8000548 <__aeabi_f2d>
 80015c4:	ec41 0b10 	vmov	d0, r0, r1
 80015c8:	4621      	mov	r1, r4
 80015ca:	2003      	movs	r0, #3
 80015cc:	f001 fde0 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 2, PrintString);
 80015d0:	4622      	mov	r2, r4
 80015d2:	2102      	movs	r1, #2
 80015d4:	2005      	movs	r0, #5
 80015d6:	f000 fd71 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[6], 3,PrintString);
 80015da:	69a8      	ldr	r0, [r5, #24]
 80015dc:	f7fe ffb4 	bl	8000548 <__aeabi_f2d>
 80015e0:	ec41 0b10 	vmov	d0, r0, r1
 80015e4:	4621      	mov	r1, r4
 80015e6:	2003      	movs	r0, #3
 80015e8:	f001 fdd2 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 2, PrintString);
 80015ec:	4622      	mov	r2, r4
 80015ee:	2102      	movs	r1, #2
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 fd63 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[7], 3,PrintString);
 80015f6:	69e8      	ldr	r0, [r5, #28]
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	ec41 0b10 	vmov	d0, r0, r1
 8001600:	4621      	mov	r1, r4
 8001602:	2003      	movs	r0, #3
 8001604:	f001 fdc4 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 2, PrintString);
 8001608:	4622      	mov	r2, r4
 800160a:	2102      	movs	r1, #2
 800160c:	200f      	movs	r0, #15
 800160e:	f000 fd55 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[8], 3,PrintString);
 8001612:	6a28      	ldr	r0, [r5, #32]
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	ec41 0b10 	vmov	d0, r0, r1
 800161c:	4621      	mov	r1, r4
 800161e:	2003      	movs	r0, #3
 8001620:	f001 fdb6 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 3, PrintString);
 8001624:	4622      	mov	r2, r4
 8001626:	2103      	movs	r1, #3
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fd47 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[9], 3,PrintString);
 800162e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001630:	f7fe ff8a 	bl	8000548 <__aeabi_f2d>
 8001634:	ec41 0b10 	vmov	d0, r0, r1
 8001638:	4621      	mov	r1, r4
 800163a:	2003      	movs	r0, #3
 800163c:	f001 fda8 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 3, PrintString);
 8001640:	4622      	mov	r2, r4
 8001642:	2103      	movs	r1, #3
 8001644:	2005      	movs	r0, #5
 8001646:	f000 fd39 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[10], 3,PrintString);
 800164a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	ec41 0b10 	vmov	d0, r0, r1
 8001654:	4621      	mov	r1, r4
 8001656:	2003      	movs	r0, #3
 8001658:	f001 fd9a 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 3, PrintString);
 800165c:	4622      	mov	r2, r4
 800165e:	2103      	movs	r1, #3
 8001660:	200a      	movs	r0, #10
 8001662:	f000 fd2b 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellDegree[11], 3,PrintString);
 8001666:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001668:	f7fe ff6e 	bl	8000548 <__aeabi_f2d>
 800166c:	ec41 0b10 	vmov	d0, r0, r1
 8001670:	4621      	mov	r1, r4
 8001672:	2003      	movs	r0, #3
 8001674:	f001 fd8c 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 3, PrintString);
 8001678:	4622      	mov	r2, r4
 800167a:	2103      	movs	r1, #3
 800167c:	200f      	movs	r0, #15
 800167e:	f000 fd1d 	bl	80020bc <TM_HD44780_Puts>
				ScreenUpdate = ScreenUpdateDone;
 8001682:	4b64      	ldr	r3, [pc, #400]	; (8001814 <main+0x5a0>)
 8001684:	2203      	movs	r2, #3
 8001686:	601a      	str	r2, [r3, #0]
				break;
 8001688:	e623      	b.n	80012d2 <main+0x5e>
				ClearScreenData();
 800168a:	f7ff fd39 	bl	8001100 <ClearScreenData>
				gcvt(RPM, 5, PrintString);
 800168e:	4c5e      	ldr	r4, [pc, #376]	; (8001808 <main+0x594>)
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <main+0x598>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f7fe ff58 	bl	8000548 <__aeabi_f2d>
 8001698:	ec41 0b10 	vmov	d0, r0, r1
 800169c:	4621      	mov	r1, r4
 800169e:	2005      	movs	r0, #5
 80016a0:	f001 fd76 	bl	8003190 <gcvt>
				TM_HD44780_Puts(14, 0, PrintString);
 80016a4:	4622      	mov	r2, r4
 80016a6:	2100      	movs	r1, #0
 80016a8:	200e      	movs	r0, #14
 80016aa:	f000 fd07 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[0], 3,PrintString);
 80016ae:	4d5a      	ldr	r5, [pc, #360]	; (8001818 <main+0x5a4>)
 80016b0:	6828      	ldr	r0, [r5, #0]
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	ec41 0b10 	vmov	d0, r0, r1
 80016ba:	4621      	mov	r1, r4
 80016bc:	2003      	movs	r0, #3
 80016be:	f001 fd67 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 1, PrintString);
 80016c2:	4622      	mov	r2, r4
 80016c4:	2101      	movs	r1, #1
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 fcf8 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[1], 3,PrintString);
 80016cc:	6868      	ldr	r0, [r5, #4]
 80016ce:	f7fe ff3b 	bl	8000548 <__aeabi_f2d>
 80016d2:	ec41 0b10 	vmov	d0, r0, r1
 80016d6:	4621      	mov	r1, r4
 80016d8:	2003      	movs	r0, #3
 80016da:	f001 fd59 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 1, PrintString);
 80016de:	4622      	mov	r2, r4
 80016e0:	2101      	movs	r1, #1
 80016e2:	2005      	movs	r0, #5
 80016e4:	f000 fcea 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[2], 3,PrintString);
 80016e8:	68a8      	ldr	r0, [r5, #8]
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	ec41 0b10 	vmov	d0, r0, r1
 80016f2:	4621      	mov	r1, r4
 80016f4:	2003      	movs	r0, #3
 80016f6:	f001 fd4b 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 1, PrintString);
 80016fa:	4622      	mov	r2, r4
 80016fc:	2101      	movs	r1, #1
 80016fe:	200a      	movs	r0, #10
 8001700:	f000 fcdc 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[3], 3,PrintString);
 8001704:	68e8      	ldr	r0, [r5, #12]
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	ec41 0b10 	vmov	d0, r0, r1
 800170e:	4621      	mov	r1, r4
 8001710:	2003      	movs	r0, #3
 8001712:	f001 fd3d 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 1, PrintString);
 8001716:	4622      	mov	r2, r4
 8001718:	2101      	movs	r1, #1
 800171a:	200f      	movs	r0, #15
 800171c:	f000 fcce 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[4], 3,PrintString);
 8001720:	6928      	ldr	r0, [r5, #16]
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	ec41 0b10 	vmov	d0, r0, r1
 800172a:	4621      	mov	r1, r4
 800172c:	2003      	movs	r0, #3
 800172e:	f001 fd2f 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 2, PrintString);
 8001732:	4622      	mov	r2, r4
 8001734:	2102      	movs	r1, #2
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fcc0 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[5], 3,PrintString);
 800173c:	6968      	ldr	r0, [r5, #20]
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	ec41 0b10 	vmov	d0, r0, r1
 8001746:	4621      	mov	r1, r4
 8001748:	2003      	movs	r0, #3
 800174a:	f001 fd21 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 2, PrintString);
 800174e:	4622      	mov	r2, r4
 8001750:	2102      	movs	r1, #2
 8001752:	2005      	movs	r0, #5
 8001754:	f000 fcb2 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[6], 3,PrintString);
 8001758:	69a8      	ldr	r0, [r5, #24]
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	ec41 0b10 	vmov	d0, r0, r1
 8001762:	4621      	mov	r1, r4
 8001764:	2003      	movs	r0, #3
 8001766:	f001 fd13 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 2, PrintString);
 800176a:	4622      	mov	r2, r4
 800176c:	2102      	movs	r1, #2
 800176e:	200a      	movs	r0, #10
 8001770:	f000 fca4 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[7], 3,PrintString);
 8001774:	69e8      	ldr	r0, [r5, #28]
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	ec41 0b10 	vmov	d0, r0, r1
 800177e:	4621      	mov	r1, r4
 8001780:	2003      	movs	r0, #3
 8001782:	f001 fd05 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 2, PrintString);
 8001786:	4622      	mov	r2, r4
 8001788:	2102      	movs	r1, #2
 800178a:	200f      	movs	r0, #15
 800178c:	f000 fc96 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[8], 3,PrintString);
 8001790:	6a28      	ldr	r0, [r5, #32]
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	ec41 0b10 	vmov	d0, r0, r1
 800179a:	4621      	mov	r1, r4
 800179c:	2003      	movs	r0, #3
 800179e:	f001 fcf7 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 3, PrintString);
 80017a2:	4622      	mov	r2, r4
 80017a4:	2103      	movs	r1, #3
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fc88 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[9], 3,PrintString);
 80017ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	ec41 0b10 	vmov	d0, r0, r1
 80017b6:	4621      	mov	r1, r4
 80017b8:	2003      	movs	r0, #3
 80017ba:	f001 fce9 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 3, PrintString);
 80017be:	4622      	mov	r2, r4
 80017c0:	2103      	movs	r1, #3
 80017c2:	2005      	movs	r0, #5
 80017c4:	f000 fc7a 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[10], 3,PrintString);
 80017c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	ec41 0b10 	vmov	d0, r0, r1
 80017d2:	4621      	mov	r1, r4
 80017d4:	2003      	movs	r0, #3
 80017d6:	f001 fcdb 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 3, PrintString);
 80017da:	4622      	mov	r2, r4
 80017dc:	2103      	movs	r1, #3
 80017de:	200a      	movs	r0, #10
 80017e0:	f000 fc6c 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderDwellMs[11], 3,PrintString);
 80017e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80017e6:	f7fe feaf 	bl	8000548 <__aeabi_f2d>
 80017ea:	ec41 0b10 	vmov	d0, r0, r1
 80017ee:	4621      	mov	r1, r4
 80017f0:	2003      	movs	r0, #3
 80017f2:	f001 fccd 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 3, PrintString);
 80017f6:	4622      	mov	r2, r4
 80017f8:	2103      	movs	r1, #3
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 fc5e 	bl	80020bc <TM_HD44780_Puts>
				ScreenUpdate = ScreenUpdateDone;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <main+0x5a0>)
 8001802:	2203      	movs	r2, #3
 8001804:	601a      	str	r2, [r3, #0]
				break;
 8001806:	e564      	b.n	80012d2 <main+0x5e>
 8001808:	200001a0 	.word	0x200001a0
 800180c:	200001a8 	.word	0x200001a8
 8001810:	200000c4 	.word	0x200000c4
 8001814:	200001b0 	.word	0x200001b0
 8001818:	2000012c 	.word	0x2000012c
				ClearScreenData();
 800181c:	f7ff fc70 	bl	8001100 <ClearScreenData>
				gcvt(RPM, 5, PrintString);
 8001820:	4c5e      	ldr	r4, [pc, #376]	; (800199c <main+0x728>)
 8001822:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <main+0x72c>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f7fe fe8f 	bl	8000548 <__aeabi_f2d>
 800182a:	ec41 0b10 	vmov	d0, r0, r1
 800182e:	4621      	mov	r1, r4
 8001830:	2005      	movs	r0, #5
 8001832:	f001 fcad 	bl	8003190 <gcvt>
				TM_HD44780_Puts(14, 0, PrintString);
 8001836:	4622      	mov	r2, r4
 8001838:	2100      	movs	r1, #0
 800183a:	200e      	movs	r0, #14
 800183c:	f000 fc3e 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[0], 3,PrintString);
 8001840:	4d58      	ldr	r5, [pc, #352]	; (80019a4 <main+0x730>)
 8001842:	6828      	ldr	r0, [r5, #0]
 8001844:	f7fe fe80 	bl	8000548 <__aeabi_f2d>
 8001848:	ec41 0b10 	vmov	d0, r0, r1
 800184c:	4621      	mov	r1, r4
 800184e:	2003      	movs	r0, #3
 8001850:	f001 fc9e 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 1, PrintString);
 8001854:	4622      	mov	r2, r4
 8001856:	2101      	movs	r1, #1
 8001858:	2000      	movs	r0, #0
 800185a:	f000 fc2f 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[1], 3,PrintString);
 800185e:	6868      	ldr	r0, [r5, #4]
 8001860:	f7fe fe72 	bl	8000548 <__aeabi_f2d>
 8001864:	ec41 0b10 	vmov	d0, r0, r1
 8001868:	4621      	mov	r1, r4
 800186a:	2003      	movs	r0, #3
 800186c:	f001 fc90 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 1, PrintString);
 8001870:	4622      	mov	r2, r4
 8001872:	2101      	movs	r1, #1
 8001874:	2005      	movs	r0, #5
 8001876:	f000 fc21 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[2], 3,PrintString);
 800187a:	68a8      	ldr	r0, [r5, #8]
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	ec41 0b10 	vmov	d0, r0, r1
 8001884:	4621      	mov	r1, r4
 8001886:	2003      	movs	r0, #3
 8001888:	f001 fc82 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 1, PrintString);
 800188c:	4622      	mov	r2, r4
 800188e:	2101      	movs	r1, #1
 8001890:	200a      	movs	r0, #10
 8001892:	f000 fc13 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[3], 3,PrintString);
 8001896:	68e8      	ldr	r0, [r5, #12]
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	ec41 0b10 	vmov	d0, r0, r1
 80018a0:	4621      	mov	r1, r4
 80018a2:	2003      	movs	r0, #3
 80018a4:	f001 fc74 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 1, PrintString);
 80018a8:	4622      	mov	r2, r4
 80018aa:	2101      	movs	r1, #1
 80018ac:	200f      	movs	r0, #15
 80018ae:	f000 fc05 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[4], 3,PrintString);
 80018b2:	6928      	ldr	r0, [r5, #16]
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	ec41 0b10 	vmov	d0, r0, r1
 80018bc:	4621      	mov	r1, r4
 80018be:	2003      	movs	r0, #3
 80018c0:	f001 fc66 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 2, PrintString);
 80018c4:	4622      	mov	r2, r4
 80018c6:	2102      	movs	r1, #2
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 fbf7 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[5], 3,PrintString);
 80018ce:	6968      	ldr	r0, [r5, #20]
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	ec41 0b10 	vmov	d0, r0, r1
 80018d8:	4621      	mov	r1, r4
 80018da:	2003      	movs	r0, #3
 80018dc:	f001 fc58 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 2, PrintString);
 80018e0:	4622      	mov	r2, r4
 80018e2:	2102      	movs	r1, #2
 80018e4:	2005      	movs	r0, #5
 80018e6:	f000 fbe9 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[6], 3,PrintString);
 80018ea:	69a8      	ldr	r0, [r5, #24]
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	ec41 0b10 	vmov	d0, r0, r1
 80018f4:	4621      	mov	r1, r4
 80018f6:	2003      	movs	r0, #3
 80018f8:	f001 fc4a 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 2, PrintString);
 80018fc:	4622      	mov	r2, r4
 80018fe:	2102      	movs	r1, #2
 8001900:	200a      	movs	r0, #10
 8001902:	f000 fbdb 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[7], 3,PrintString);
 8001906:	69e8      	ldr	r0, [r5, #28]
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	ec41 0b10 	vmov	d0, r0, r1
 8001910:	4621      	mov	r1, r4
 8001912:	2003      	movs	r0, #3
 8001914:	f001 fc3c 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 2, PrintString);
 8001918:	4622      	mov	r2, r4
 800191a:	2102      	movs	r1, #2
 800191c:	200f      	movs	r0, #15
 800191e:	f000 fbcd 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[8], 3,PrintString);
 8001922:	6a28      	ldr	r0, [r5, #32]
 8001924:	f7fe fe10 	bl	8000548 <__aeabi_f2d>
 8001928:	ec41 0b10 	vmov	d0, r0, r1
 800192c:	4621      	mov	r1, r4
 800192e:	2003      	movs	r0, #3
 8001930:	f001 fc2e 	bl	8003190 <gcvt>
					TM_HD44780_Puts(0, 3, PrintString);
 8001934:	4622      	mov	r2, r4
 8001936:	2103      	movs	r1, #3
 8001938:	2000      	movs	r0, #0
 800193a:	f000 fbbf 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[9], 3,PrintString);
 800193e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001940:	f7fe fe02 	bl	8000548 <__aeabi_f2d>
 8001944:	ec41 0b10 	vmov	d0, r0, r1
 8001948:	4621      	mov	r1, r4
 800194a:	2003      	movs	r0, #3
 800194c:	f001 fc20 	bl	8003190 <gcvt>
					TM_HD44780_Puts(5, 3, PrintString);
 8001950:	4622      	mov	r2, r4
 8001952:	2103      	movs	r1, #3
 8001954:	2005      	movs	r0, #5
 8001956:	f000 fbb1 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[10], 3,PrintString);
 800195a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	ec41 0b10 	vmov	d0, r0, r1
 8001964:	4621      	mov	r1, r4
 8001966:	2003      	movs	r0, #3
 8001968:	f001 fc12 	bl	8003190 <gcvt>
					TM_HD44780_Puts(10, 3, PrintString);
 800196c:	4622      	mov	r2, r4
 800196e:	2103      	movs	r1, #3
 8001970:	200a      	movs	r0, #10
 8001972:	f000 fba3 	bl	80020bc <TM_HD44780_Puts>
					gcvt(CylinderAdvanceDegree[11], 3,PrintString);
 8001976:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001978:	f7fe fde6 	bl	8000548 <__aeabi_f2d>
 800197c:	ec41 0b10 	vmov	d0, r0, r1
 8001980:	4621      	mov	r1, r4
 8001982:	2003      	movs	r0, #3
 8001984:	f001 fc04 	bl	8003190 <gcvt>
					TM_HD44780_Puts(15, 3, PrintString);
 8001988:	4622      	mov	r2, r4
 800198a:	2103      	movs	r1, #3
 800198c:	200f      	movs	r0, #15
 800198e:	f000 fb95 	bl	80020bc <TM_HD44780_Puts>
				ScreenUpdate = ScreenUpdateDone;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <main+0x734>)
 8001994:	2203      	movs	r2, #3
 8001996:	601a      	str	r2, [r3, #0]
				break;
 8001998:	e49b      	b.n	80012d2 <main+0x5e>
 800199a:	bf00      	nop
 800199c:	200001a0 	.word	0x200001a0
 80019a0:	200001a8 	.word	0x200001a8
 80019a4:	2000008c 	.word	0x2000008c
 80019a8:	200001b0 	.word	0x200001b0

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2100      	movs	r1, #0
 80019b0:	9100      	str	r1, [sp, #0]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_MspInit+0x34>)
 80019b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
 80019bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	9101      	str	r1, [sp, #4]
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	b002      	add	sp, #8
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b500      	push	{lr}
 80019e6:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ee:	d008      	beq.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_TIM_Base_MspInit+0x8c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01a      	beq.n	8001a2c <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_TIM_Base_MspInit+0x90>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d02b      	beq.n	8001a54 <HAL_TIM_Base_MspInit+0x70>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019fc:	b005      	add	sp, #20
 80019fe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	2200      	movs	r2, #0
 8001a04:	9201      	str	r2, [sp, #4]
 8001a06:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001a0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a0c:	f041 0101 	orr.w	r1, r1, #1
 8001a10:	6419      	str	r1, [r3, #64]	; 0x40
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f000 fca6 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a24:	201c      	movs	r0, #28
 8001a26:	f000 fcdb 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 8001a2a:	e7e7      	b.n	80019fc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_TIM_Base_MspInit+0x94>)
 8001a32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a34:	f041 0102 	orr.w	r1, r1, #2
 8001a38:	6419      	str	r1, [r3, #64]	; 0x40
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a44:	2101      	movs	r1, #1
 8001a46:	201d      	movs	r0, #29
 8001a48:	f000 fc92 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a4c:	201d      	movs	r0, #29
 8001a4e:	f000 fcc7 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 8001a52:	e7d3      	b.n	80019fc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_TIM_Base_MspInit+0x94>)
 8001a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a68:	9303      	str	r3, [sp, #12]
 8001a6a:	9b03      	ldr	r3, [sp, #12]
}
 8001a6c:	e7c6      	b.n	80019fc <HAL_TIM_Base_MspInit+0x18>
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40014800 	.word	0x40014800
 8001a78:	40023800 	.word	0x40023800

08001a7c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a7c:	4770      	bx	lr

08001a7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler>

08001a80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler>

08001a82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler>

08001a84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler>

08001a86 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 f939 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bd08      	pop	{r3, pc}

08001a94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	unsigned long usCountsAfterTachoInterrupt;//,usfor10Degrees;
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ignition_Pin);
 8001a96:	2008      	movs	r0, #8
 8001a98:	f000 fdc4 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	usCountsAfterTachoInterrupt = __HAL_TIM_GetCounter(&htim2);
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <EXTI3_IRQHandler+0x58>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	//usfor10Degrees = (TachoTimerValue/36);

	if (usCountsAfterTachoInterrupt > 100)
 8001aa2:	2c64      	cmp	r4, #100	; 0x64
 8001aa4:	d800      	bhi.n	8001aa8 <EXTI3_IRQHandler+0x14>
			if (DwellStartNumber < 12) DwellStartNumber++;
		}
		PreviousIgnitionIntTimerValue = usCountsAfterTachoInterrupt;
	}
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aa6:	bd10      	pop	{r4, pc}
		if (HAL_GPIO_ReadPin(Ignition_GPIO_Port, Ignition_Pin) == 0) {
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	4811      	ldr	r0, [pc, #68]	; (8001af0 <EXTI3_IRQHandler+0x5c>)
 8001aac:	f000 fdac 	bl	8002608 <HAL_GPIO_ReadPin>
 8001ab0:	b970      	cbnz	r0, 8001ad0 <EXTI3_IRQHandler+0x3c>
			CylinderDwellEndCounter[DwellEndNumber] = usCountsAfterTachoInterrupt - 56;   //-56us since this is the time delay for GPIO LOW from points release and ignition.
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <EXTI3_IRQHandler+0x60>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1a4 0238 	sub.w	r2, r4, #56	; 0x38
 8001aba:	490f      	ldr	r1, [pc, #60]	; (8001af8 <EXTI3_IRQHandler+0x64>)
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (DwellEndNumber < 12) DwellEndNumber++;
 8001ac0:	2b0b      	cmp	r3, #11
 8001ac2:	d802      	bhi.n	8001aca <EXTI3_IRQHandler+0x36>
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <EXTI3_IRQHandler+0x60>)
 8001ac8:	6013      	str	r3, [r2, #0]
		PreviousIgnitionIntTimerValue = usCountsAfterTachoInterrupt;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <EXTI3_IRQHandler+0x68>)
 8001acc:	601c      	str	r4, [r3, #0]
}
 8001ace:	e7ea      	b.n	8001aa6 <EXTI3_IRQHandler+0x12>
			CylinderDwellStartCounter[DwellStartNumber] = usCountsAfterTachoInterrupt - 19;  //-19us since this is the time delay for GPIO low from points close dwell start
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <EXTI3_IRQHandler+0x6c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1a4 0213 	sub.w	r2, r4, #19
 8001ad8:	490a      	ldr	r1, [pc, #40]	; (8001b04 <EXTI3_IRQHandler+0x70>)
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (DwellStartNumber < 12) DwellStartNumber++;
 8001ade:	2b0b      	cmp	r3, #11
 8001ae0:	d8f3      	bhi.n	8001aca <EXTI3_IRQHandler+0x36>
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <EXTI3_IRQHandler+0x6c>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e7ef      	b.n	8001aca <EXTI3_IRQHandler+0x36>
 8001aea:	bf00      	nop
 8001aec:	20000204 	.word	0x20000204
 8001af0:	40020800 	.word	0x40020800
 8001af4:	20000194 	.word	0x20000194
 8001af8:	200000f8 	.word	0x200000f8
 8001afc:	2000029c 	.word	0x2000029c
 8001b00:	20000198 	.word	0x20000198
 8001b04:	20000160 	.word	0x20000160

08001b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001b0a:	2017      	movs	r0, #23
 8001b0c:	f000 fc76 	bl	80023fc <HAL_NVIC_DisableIRQ>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Menu_Pin);
 8001b10:	2020      	movs	r0, #32
 8001b12:	f000 fd87 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	ScreenNumber++;
 8001b16:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <EXTI9_5_IRQHandler+0x28>)
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]
	if (ScreenNumber > 3) ScreenNumber = 0;
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d902      	bls.n	8001b28 <EXTI9_5_IRQHandler+0x20>
 8001b22:	4613      	mov	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
	ScreenUpdate = UpdateScreen;
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <EXTI9_5_IRQHandler+0x2c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bd08      	pop	{r3, pc}
 8001b30:	200001ac 	.word	0x200001ac
 8001b34:	200001b0 	.word	0x200001b0

08001b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b3a:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM2_IRQHandler+0xc>)
 8001b3c:	f001 f92b 	bl	8002d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b40:	bd08      	pop	{r3, pc}
 8001b42:	bf00      	nop
 8001b44:	20000204 	.word	0x20000204

08001b48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if ( TachoIntNumber > 0)
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <TIM3_IRQHandler+0x2c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b963      	cbnz	r3, 8001b6a <TIM3_IRQHandler+0x22>
	{
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);	                         //start next measurement
	} else {
		ScreenUpdate = ClearScreen;                                    //no tacho interrupt so clear screen
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <TIM3_IRQHandler+0x30>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	}
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);	                         //start next measurement
 8001b56:	2028      	movs	r0, #40	; 0x28
 8001b58:	f000 fc42 	bl	80023e0 <HAL_NVIC_EnableIRQ>
	TachoIntNumber = 0;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <TIM3_IRQHandler+0x2c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <TIM3_IRQHandler+0x34>)
 8001b64:	f001 f917 	bl	8002d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b68:	bd08      	pop	{r3, pc}
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);	                         //start next measurement
 8001b6a:	2028      	movs	r0, #40	; 0x28
 8001b6c:	f000 fc38 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 8001b70:	e7f1      	b.n	8001b56 <TIM3_IRQHandler+0xe>
 8001b72:	bf00      	nop
 8001b74:	200001b4 	.word	0x200001b4
 8001b78:	200001b0 	.word	0x200001b0
 8001b7c:	2000024c 	.word	0x2000024c

08001b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TACHO_Pin);
 8001b82:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b86:	f000 fd4d 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	TachoTimerValue = __HAL_TIM_GetCounter(&htim2) - 671;    //read TIM2 counter value
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <EXTI15_10_IRQHandler+0x58>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001b90:	f2a3 239f 	subw	r3, r3, #671	; 0x29f
 8001b94:	4911      	ldr	r1, [pc, #68]	; (8001bdc <EXTI15_10_IRQHandler+0x5c>)
 8001b96:	600b      	str	r3, [r1, #0]
	__HAL_TIM_SetCounter(&htim2, 0);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6253      	str	r3, [r2, #36]	; 0x24
	TachoIntNumber++;
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <EXTI15_10_IRQHandler+0x60>)
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
	if (TachoIntNumber == 3) {
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d004      	beq.n	8001bb2 <EXTI15_10_IRQHandler+0x32>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
		MathDo = MathUpdate;
	}
	if (TachoIntNumber == 2) {
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <EXTI15_10_IRQHandler+0x60>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d00a      	beq.n	8001bc6 <EXTI15_10_IRQHandler+0x46>
		DwellStartNumber = 0;
		DwellEndNumber = 0;
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
	}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb0:	bd08      	pop	{r3, pc}
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001bb2:	2028      	movs	r0, #40	; 0x28
 8001bb4:	f000 fc22 	bl	80023fc <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f000 fc1f 	bl	80023fc <HAL_NVIC_DisableIRQ>
		MathDo = MathUpdate;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <EXTI15_10_IRQHandler+0x64>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e7f0      	b.n	8001ba8 <EXTI15_10_IRQHandler+0x28>
		DwellStartNumber = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <EXTI15_10_IRQHandler+0x68>)
 8001bca:	6013      	str	r3, [r2, #0]
		DwellEndNumber = 0;
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <EXTI15_10_IRQHandler+0x6c>)
 8001bce:	6013      	str	r3, [r2, #0]
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bd0:	2009      	movs	r0, #9
 8001bd2:	f000 fc05 	bl	80023e0 <HAL_NVIC_EnableIRQ>
}
 8001bd6:	e7eb      	b.n	8001bb0 <EXTI15_10_IRQHandler+0x30>
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	200001b8 	.word	0x200001b8
 8001be0:	200001b4 	.word	0x200001b4
 8001be4:	2000019c 	.word	0x2000019c
 8001be8:	20000198 	.word	0x20000198
 8001bec:	20000194 	.word	0x20000194

08001bf0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bf6:	f001 faef 	bl	80031d8 <__errno>
 8001bfa:	2316      	movs	r3, #22
 8001bfc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001c02:	bd08      	pop	{r3, pc}

08001c04 <_exit>:

void _exit (int status)
{
 8001c04:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001c06:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0a:	f7ff fff3 	bl	8001bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c0e:	e7fe      	b.n	8001c0e <_exit+0xa>

08001c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	460c      	mov	r4, r1
 8001c14:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2500      	movs	r5, #0
 8001c18:	e006      	b.n	8001c28 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001c1a:	f3af 8000 	nop.w
 8001c1e:	4621      	mov	r1, r4
 8001c20:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001c26:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	42b5      	cmp	r5, r6
 8001c2a:	dbf6      	blt.n	8001c1a <_read+0xa>
	}

return len;
}
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}

08001c30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	460c      	mov	r4, r1
 8001c34:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	2500      	movs	r5, #0
 8001c38:	e004      	b.n	8001c44 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001c3a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	3501      	adds	r5, #1
 8001c44:	42b5      	cmp	r5, r6
 8001c46:	dbf8      	blt.n	8001c3a <_write+0xa>
	}
	return len;
}
 8001c48:	4630      	mov	r0, r6
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}

08001c4c <_close>:

int _close(int file)
{
	return -1;
}
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	4770      	bx	lr

08001c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	4770      	bx	lr

08001c5c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4770      	bx	lr

08001c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c60:	2000      	movs	r0, #0
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c64:	b508      	push	{r3, lr}
 8001c66:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <_sbrk+0x34>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	b142      	cbz	r2, 8001c80 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <_sbrk+0x34>)
 8001c70:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001c72:	4403      	add	r3, r0
 8001c74:	466a      	mov	r2, sp
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d806      	bhi.n	8001c88 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <_sbrk+0x34>)
 8001c7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001c7e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001c80:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x34>)
 8001c82:	4906      	ldr	r1, [pc, #24]	; (8001c9c <_sbrk+0x38>)
 8001c84:	6011      	str	r1, [r2, #0]
 8001c86:	e7f2      	b.n	8001c6e <_sbrk+0xa>
		errno = ENOMEM;
 8001c88:	f001 faa6 	bl	80031d8 <__errno>
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	e7f3      	b.n	8001c7e <_sbrk+0x1a>
 8001c96:	bf00      	nop
 8001c98:	200002a0 	.word	0x200002a0
 8001c9c:	200002f8 	.word	0x200002f8

08001ca0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SystemInit+0x18>)
 8001ca2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ca6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <TM_DELAY_Init>:
uint32_t TM_DELAY_Init(void) {
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <TM_DELAY_Init+0x40>)
 8001cbe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001cc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001cc6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    CoreDebug->DEMCR |=  0x01000000;
 8001cca:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001cce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001cd2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8001cd6:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    DWT->CTRL |=  0x00000001;
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8001cee:	685a      	ldr	r2, [r3, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8001cf0:	bf00      	nop
	__ASM volatile ("NOP");
 8001cf2:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8001cf4:	6858      	ldr	r0, [r3, #4]
#else
	/* Return OK */
	return 1;
#endif
}
 8001cf6:	1a80      	subs	r0, r0, r2
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <TM_DELAY_1msHandler>:
/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8001d04:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_IncTick+0x80>)
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_IncTick+0x84>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b11b      	cbz	r3, 8001d1c <HAL_IncTick+0x18>
		TM_Time2--;
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_IncTick+0x84>)
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
void HAL_IncTick(void) {
 8001d1c:	2400      	movs	r4, #0
 8001d1e:	e001      	b.n	8001d24 <HAL_IncTick+0x20>
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001d20:	3401      	adds	r4, #1
 8001d22:	b2e4      	uxtb	r4, r4
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_IncTick+0x88>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	42a3      	cmp	r3, r4
 8001d2a:	d927      	bls.n	8001d7c <HAL_IncTick+0x78>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8001d2c:	4625      	mov	r5, r4
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_IncTick+0x88>)
 8001d30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001d34:	685b      	ldr	r3, [r3, #4]
		if (
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f2      	beq.n	8001d20 <HAL_IncTick+0x1c>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	f012 0f02 	tst.w	r2, #2
 8001d40:	d0ee      	beq.n	8001d20 <HAL_IncTick+0x1c>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	b10a      	cbz	r2, 8001d4a <HAL_IncTick+0x46>
				CustomTimers.Timers[i]->CNT--;
 8001d46:	3a01      	subs	r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_IncTick+0x88>)
 8001d4c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001d50:	6858      	ldr	r0, [r3, #4]
 8001d52:	6883      	ldr	r3, [r0, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e3      	bne.n	8001d20 <HAL_IncTick+0x1c>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8001d58:	68c3      	ldr	r3, [r0, #12]
 8001d5a:	6901      	ldr	r1, [r0, #16]
 8001d5c:	4798      	blx	r3

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_IncTick+0x88>)
 8001d60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001d64:	686b      	ldr	r3, [r5, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	f012 0f01 	tst.w	r2, #1
 8001d70:	d1d6      	bne.n	8001d20 <HAL_IncTick+0x1c>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	f36f 0241 	bfc	r2, #1, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e7d1      	b.n	8001d20 <HAL_IncTick+0x1c>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8001d7c:	f7ff ffc0 	bl	8001d00 <TM_DELAY_1msHandler>
}
 8001d80:	bd38      	pop	{r3, r4, r5, pc}
 8001d82:	bf00      	nop
 8001d84:	200002bc 	.word	0x200002bc
 8001d88:	200002c0 	.word	0x200002c0
 8001d8c:	200002a4 	.word	0x200002a4

08001d90 <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8001d90:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <HAL_GetTick+0x8>)
 8001d92:	6818      	ldr	r0, [r3, #0]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200002bc 	.word	0x200002bc

08001d9c <TM_GPIO_GetPortSource>:
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001d9c:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 8001da0:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
}
 8001da4:	f3c0 208f 	ubfx	r0, r0, #10, #16
 8001da8:	4770      	bx	lr
	...

08001dac <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001dac:	b508      	push	{r3, lr}
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001dae:	f7ff fff5 	bl	8001d9c <TM_GPIO_GetPortSource>
 8001db2:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <TM_GPIO_INT_EnableClock+0x14>)
 8001db4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001db6:	2201      	movs	r2, #1
 8001db8:	4082      	lsls	r2, r0
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	630b      	str	r3, [r1, #48]	; 0x30
#endif
}
 8001dbe:	bd08      	pop	{r3, pc}
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460e      	mov	r6, r1
 8001dce:	4615      	mov	r5, r2
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001dd6:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001dda:	f7ff ffdf 	bl	8001d9c <TM_GPIO_GetPortSource>
 8001dde:	fa5f fa80 	uxtb.w	sl, r0
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	e001      	b.n	8001dea <TM_GPIO_INT_Init+0x26>
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d83e      	bhi.n	8001e6c <TM_GPIO_INT_Init+0xa8>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001dee:	469e      	mov	lr, r3
 8001df0:	fa46 f203 	asr.w	r2, r6, r3
 8001df4:	f012 0f01 	tst.w	r2, #1
 8001df8:	d0f5      	beq.n	8001de6 <TM_GPIO_INT_Init+0x22>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001dfa:	f04f 0c01 	mov.w	ip, #1
 8001dfe:	fa0c fc03 	lsl.w	ip, ip, r3
 8001e02:	491c      	ldr	r1, [pc, #112]	; (8001e74 <TM_GPIO_INT_Init+0xb0>)
 8001e04:	f831 201a 	ldrh.w	r2, [r1, sl, lsl #1]
 8001e08:	ea4c 0202 	orr.w	r2, ip, r2
 8001e0c:	f821 201a 	strh.w	r2, [r1, sl, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001e10:	68e1      	ldr	r1, [r4, #12]
 8001e12:	0058      	lsls	r0, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	4082      	lsls	r2, r0
 8001e18:	ea6f 0902 	mvn.w	r9, r2
 8001e1c:	ea21 0102 	bic.w	r1, r1, r2
 8001e20:	fa07 fb00 	lsl.w	fp, r7, r0
 8001e24:	ea41 010b 	orr.w	r1, r1, fp
 8001e28:	60e1      	str	r1, [r4, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001e2a:	6821      	ldr	r1, [r4, #0]
 8001e2c:	ea21 0202 	bic.w	r2, r1, r2
 8001e30:	fa05 f100 	lsl.w	r1, r5, r0
 8001e34:	430a      	orrs	r2, r1
 8001e36:	6022      	str	r2, [r4, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001e38:	1e6a      	subs	r2, r5, #1
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d8d2      	bhi.n	8001de6 <TM_GPIO_INT_Init+0x22>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001e40:	6862      	ldr	r2, [r4, #4]
 8001e42:	fa1f fc8c 	uxth.w	ip, ip
 8001e46:	ea22 0c0c 	bic.w	ip, r2, ip
 8001e4a:	9a01      	ldr	r2, [sp, #4]
 8001e4c:	fa02 fe03 	lsl.w	lr, r2, r3
 8001e50:	fa1f fe8e 	uxth.w	lr, lr
 8001e54:	ea4c 020e 	orr.w	r2, ip, lr
 8001e58:	6062      	str	r2, [r4, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001e5a:	68a2      	ldr	r2, [r4, #8]
 8001e5c:	ea09 0902 	and.w	r9, r9, r2
 8001e60:	fa08 f000 	lsl.w	r0, r8, r0
 8001e64:	ea49 0000 	orr.w	r0, r9, r0
 8001e68:	60a0      	str	r0, [r4, #8]
 8001e6a:	e7bc      	b.n	8001de6 <TM_GPIO_INT_Init+0x22>
		}
	}
}
 8001e6c:	b003      	add	sp, #12
 8001e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e72:	bf00      	nop
 8001e74:	200002c4 	.word	0x200002c4

08001e78 <TM_GPIO_Init>:
	if (GPIO_Pin == 0x00) {
 8001e78:	b901      	cbnz	r1, 8001e7c <TM_GPIO_Init+0x4>
 8001e7a:	4770      	bx	lr
void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	4606      	mov	r6, r0
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	460f      	mov	r7, r1
	TM_GPIO_INT_EnableClock(GPIOx);
 8001e88:	f7ff ff90 	bl	8001dac <TM_GPIO_INT_EnableClock>
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001e8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	462b      	mov	r3, r5
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f7ff ff90 	bl	8001dc4 <TM_GPIO_INT_Init>
}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea8 <TM_HD44780_InitPins>:
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
}

static void TM_HD44780_InitPins(void) {
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	b082      	sub	sp, #8
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001eac:	4d23      	ldr	r5, [pc, #140]	; (8001f3c <TM_HD44780_InitPins+0x94>)
 8001eae:	2400      	movs	r4, #0
 8001eb0:	9401      	str	r4, [sp, #4]
 8001eb2:	9400      	str	r4, [sp, #0]
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7ff ffdc 	bl	8001e78 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_E_PORT, HD44780_E_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001ec0:	9401      	str	r4, [sp, #4]
 8001ec2:	9400      	str	r4, [sp, #0]
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7ff ffd4 	bl	8001e78 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D4_PORT, HD44780_D4_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001ed0:	4e1b      	ldr	r6, [pc, #108]	; (8001f40 <TM_HD44780_InitPins+0x98>)
 8001ed2:	9401      	str	r4, [sp, #4]
 8001ed4:	9400      	str	r4, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ede:	4630      	mov	r0, r6
 8001ee0:	f7ff ffca 	bl	8001e78 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D5_PORT, HD44780_D5_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001ee4:	9401      	str	r4, [sp, #4]
 8001ee6:	9400      	str	r4, [sp, #0]
 8001ee8:	4623      	mov	r3, r4
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7ff ffc1 	bl	8001e78 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D6_PORT, HD44780_D6_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001ef6:	9401      	str	r4, [sp, #4]
 8001ef8:	9400      	str	r4, [sp, #0]
 8001efa:	4623      	mov	r3, r4
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7ff ffb8 	bl	8001e78 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D7_PORT, HD44780_D7_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8001f08:	9401      	str	r4, [sp, #4]
 8001f0a:	9400      	str	r4, [sp, #0]
 8001f0c:	4623      	mov	r3, r4
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f14:	4628      	mov	r0, r5
 8001f16:	f7ff ffaf 	bl	8001e78 <TM_GPIO_Init>
	
	/* Set pins low */
	TM_GPIO_SetPinLow(HD44780_RS_PORT, HD44780_RS_PIN);
 8001f1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f1e:	61ab      	str	r3, [r5, #24]
	TM_GPIO_SetPinLow(HD44780_E_PORT, HD44780_E_PIN);
 8001f20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f24:	61ab      	str	r3, [r5, #24]
	TM_GPIO_SetPinLow(HD44780_D4_PORT, HD44780_D4_PIN);
 8001f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f2a:	61b2      	str	r2, [r6, #24]
	TM_GPIO_SetPinLow(HD44780_D5_PORT, HD44780_D5_PIN);
 8001f2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f30:	61b3      	str	r3, [r6, #24]
	TM_GPIO_SetPinLow(HD44780_D6_PORT, HD44780_D6_PIN);
 8001f32:	61aa      	str	r2, [r5, #24]
	TM_GPIO_SetPinLow(HD44780_D7_PORT, HD44780_D7_PIN);
 8001f34:	61ab      	str	r3, [r5, #24]
}
 8001f36:	b002      	add	sp, #8
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800

08001f44 <TM_HD44780_Cmd4bit>:
static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8001f44:	b538      	push	{r3, r4, r5, lr}
	TM_GPIO_SetPinValue(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 8001f46:	f010 0f08 	tst.w	r0, #8
 8001f4a:	d040      	beq.n	8001fce <TM_HD44780_Cmd4bit+0x8a>
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f52:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 8001f54:	f010 0f04 	tst.w	r0, #4
 8001f58:	d03e      	beq.n	8001fd8 <TM_HD44780_Cmd4bit+0x94>
 8001f5a:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f60:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 8001f62:	f010 0f02 	tst.w	r0, #2
 8001f66:	d03c      	beq.n	8001fe2 <TM_HD44780_Cmd4bit+0x9e>
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <TM_HD44780_Cmd4bit+0xb8>)
 8001f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 8001f70:	f010 0f01 	tst.w	r0, #1
 8001f74:	d03a      	beq.n	8001fec <TM_HD44780_Cmd4bit+0xa8>
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <TM_HD44780_Cmd4bit+0xb8>)
 8001f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f7c:	619a      	str	r2, [r3, #24]
	HD44780_E_BLINK;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	619a      	str	r2, [r3, #24]
 8001f84:	2414      	movs	r4, #20
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <TM_HD44780_Cmd4bit+0xbc>)
 8001f88:	685d      	ldr	r5, [r3, #4]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001f8a:	f000 fe57 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <TM_HD44780_Cmd4bit+0xc0>)
 8001f90:	fba3 2300 	umull	r2, r3, r3, r0
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	fb03 f404 	mul.w	r4, r3, r4
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <TM_HD44780_Cmd4bit+0xbc>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	1b5b      	subs	r3, r3, r5
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	d3fa      	bcc.n	8001f9a <TM_HD44780_Cmd4bit+0x56>
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001fa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001faa:	619a      	str	r2, [r3, #24]
 8001fac:	2414      	movs	r4, #20
	uint32_t start = DWT->CYCCNT;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <TM_HD44780_Cmd4bit+0xbc>)
 8001fb0:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001fb2:	f000 fe43 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <TM_HD44780_Cmd4bit+0xc0>)
 8001fb8:	fba3 2300 	umull	r2, r3, r3, r0
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <TM_HD44780_Cmd4bit+0xbc>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	1b5b      	subs	r3, r3, r5
 8001fc8:	42a3      	cmp	r3, r4
 8001fca:	d3fa      	bcc.n	8001fc2 <TM_HD44780_Cmd4bit+0x7e>
}
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
	TM_GPIO_SetPinValue(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001fd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fd4:	619a      	str	r2, [r3, #24]
 8001fd6:	e7bd      	b.n	8001f54 <TM_HD44780_Cmd4bit+0x10>
	TM_GPIO_SetPinValue(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <TM_HD44780_Cmd4bit+0xb4>)
 8001fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	e7bf      	b.n	8001f62 <TM_HD44780_Cmd4bit+0x1e>
	TM_GPIO_SetPinValue(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <TM_HD44780_Cmd4bit+0xb8>)
 8001fe4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	e7c1      	b.n	8001f70 <TM_HD44780_Cmd4bit+0x2c>
	TM_GPIO_SetPinValue(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <TM_HD44780_Cmd4bit+0xb8>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e7c3      	b.n	8001f7e <TM_HD44780_Cmd4bit+0x3a>
 8001ff6:	bf00      	nop
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	e0001000 	.word	0xe0001000
 8002004:	431bde83 	.word	0x431bde83

08002008 <TM_HD44780_Cmd>:
static void TM_HD44780_Cmd(uint8_t cmd) {
 8002008:	b510      	push	{r4, lr}
 800200a:	4604      	mov	r4, r0
	HD44780_RS_LOW;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <TM_HD44780_Cmd+0x1c>)
 800200e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002012:	619a      	str	r2, [r3, #24]
	TM_HD44780_Cmd4bit(cmd >> 4);
 8002014:	0900      	lsrs	r0, r0, #4
 8002016:	f7ff ff95 	bl	8001f44 <TM_HD44780_Cmd4bit>
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800201a:	f004 000f 	and.w	r0, r4, #15
 800201e:	f7ff ff91 	bl	8001f44 <TM_HD44780_Cmd4bit>
}
 8002022:	bd10      	pop	{r4, pc}
 8002024:	40020400 	.word	0x40020400

08002028 <TM_HD44780_CursorSet>:
static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8002028:	b500      	push	{lr}
 800202a:	b083      	sub	sp, #12
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <TM_HD44780_CursorSet+0x38>)
 800202e:	9301      	str	r3, [sp, #4]
	if (row >= HD44780_Opts.Rows) {
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <TM_HD44780_CursorSet+0x3c>)
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	428b      	cmp	r3, r1
 8002036:	d800      	bhi.n	800203a <TM_HD44780_CursorSet+0x12>
		row = 0;
 8002038:	2100      	movs	r1, #0
	HD44780_Opts.currentX = col;
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <TM_HD44780_CursorSet+0x3c>)
 800203c:	7158      	strb	r0, [r3, #5]
	HD44780_Opts.currentY = row;
 800203e:	7199      	strb	r1, [r3, #6]
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8002040:	f101 0308 	add.w	r3, r1, #8
 8002044:	eb0d 0103 	add.w	r1, sp, r3
 8002048:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800204c:	4418      	add	r0, r3
 800204e:	b240      	sxtb	r0, r0
 8002050:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002054:	b2c0      	uxtb	r0, r0
 8002056:	f7ff ffd7 	bl	8002008 <TM_HD44780_Cmd>
}
 800205a:	b003      	add	sp, #12
 800205c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002060:	54144000 	.word	0x54144000
 8002064:	200002e0 	.word	0x200002e0

08002068 <TM_HD44780_Data>:
static void TM_HD44780_Data(uint8_t data) {
 8002068:	b510      	push	{r4, lr}
 800206a:	4604      	mov	r4, r0
	HD44780_RS_HIGH;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <TM_HD44780_Data+0x1c>)
 800206e:	2204      	movs	r2, #4
 8002070:	619a      	str	r2, [r3, #24]
	TM_HD44780_Cmd4bit(data >> 4);
 8002072:	40d0      	lsrs	r0, r2
 8002074:	f7ff ff66 	bl	8001f44 <TM_HD44780_Cmd4bit>
	TM_HD44780_Cmd4bit(data & 0x0F);
 8002078:	f004 000f 	and.w	r0, r4, #15
 800207c:	f7ff ff62 	bl	8001f44 <TM_HD44780_Cmd4bit>
}
 8002080:	bd10      	pop	{r4, pc}
 8002082:	bf00      	nop
 8002084:	40020400 	.word	0x40020400

08002088 <TM_HD44780_Clear>:
void TM_HD44780_Clear(void) {
 8002088:	b538      	push	{r3, r4, r5, lr}
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 800208a:	2001      	movs	r0, #1
 800208c:	f7ff ffbc 	bl	8002008 <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 8002090:	f640 34b8 	movw	r4, #3000	; 0xbb8
	uint32_t start = DWT->CYCCNT;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <TM_HD44780_Clear+0x2c>)
 8002096:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002098:	f000 fdd0 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <TM_HD44780_Clear+0x30>)
 800209e:	fba3 2300 	umull	r2, r3, r3, r0
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <TM_HD44780_Clear+0x2c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	1b5b      	subs	r3, r3, r5
 80020ae:	42a3      	cmp	r3, r4
 80020b0:	d3fa      	bcc.n	80020a8 <TM_HD44780_Clear+0x20>
}
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	e0001000 	.word	0xe0001000
 80020b8:	431bde83 	.word	0x431bde83

080020bc <TM_HD44780_Puts>:
void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 80020bc:	b510      	push	{r4, lr}
 80020be:	4614      	mov	r4, r2
	TM_HD44780_CursorSet(x, y);
 80020c0:	f7ff ffb2 	bl	8002028 <TM_HD44780_CursorSet>
	while (*str) {
 80020c4:	e018      	b.n	80020f8 <TM_HD44780_Puts+0x3c>
			HD44780_Opts.currentX = 0;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <TM_HD44780_Puts+0x64>)
 80020c8:	2000      	movs	r0, #0
 80020ca:	7158      	strb	r0, [r3, #5]
			HD44780_Opts.currentY++;
 80020cc:	7999      	ldrb	r1, [r3, #6]
 80020ce:	3101      	adds	r1, #1
 80020d0:	b2c9      	uxtb	r1, r1
 80020d2:	7199      	strb	r1, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80020d4:	f7ff ffa8 	bl	8002028 <TM_HD44780_CursorSet>
 80020d8:	e015      	b.n	8002106 <TM_HD44780_Puts+0x4a>
			HD44780_Opts.currentY++;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <TM_HD44780_Puts+0x64>)
 80020dc:	7999      	ldrb	r1, [r3, #6]
 80020de:	3101      	adds	r1, #1
 80020e0:	b2c9      	uxtb	r1, r1
 80020e2:	7199      	strb	r1, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80020e4:	7958      	ldrb	r0, [r3, #5]
 80020e6:	f7ff ff9f 	bl	8002028 <TM_HD44780_CursorSet>
 80020ea:	e004      	b.n	80020f6 <TM_HD44780_Puts+0x3a>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <TM_HD44780_Puts+0x64>)
 80020ee:	7999      	ldrb	r1, [r3, #6]
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff99 	bl	8002028 <TM_HD44780_CursorSet>
		str++;
 80020f6:	3401      	adds	r4, #1
	while (*str) {
 80020f8:	7823      	ldrb	r3, [r4, #0]
 80020fa:	b183      	cbz	r3, 800211e <TM_HD44780_Puts+0x62>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <TM_HD44780_Puts+0x64>)
 80020fe:	795a      	ldrb	r2, [r3, #5]
 8002100:	791b      	ldrb	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d2df      	bcs.n	80020c6 <TM_HD44780_Puts+0xa>
		if (*str == '\n') {
 8002106:	7820      	ldrb	r0, [r4, #0]
 8002108:	280a      	cmp	r0, #10
 800210a:	d0e6      	beq.n	80020da <TM_HD44780_Puts+0x1e>
		} else if (*str == '\r') {
 800210c:	280d      	cmp	r0, #13
 800210e:	d0ed      	beq.n	80020ec <TM_HD44780_Puts+0x30>
			TM_HD44780_Data(*str);
 8002110:	f7ff ffaa 	bl	8002068 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 8002114:	4a02      	ldr	r2, [pc, #8]	; (8002120 <TM_HD44780_Puts+0x64>)
 8002116:	7953      	ldrb	r3, [r2, #5]
 8002118:	3301      	adds	r3, #1
 800211a:	7153      	strb	r3, [r2, #5]
 800211c:	e7eb      	b.n	80020f6 <TM_HD44780_Puts+0x3a>
}
 800211e:	bd10      	pop	{r4, pc}
 8002120:	200002e0 	.word	0x200002e0

08002124 <TM_HD44780_DisplayOn>:
void TM_HD44780_DisplayOn(void) {
 8002124:	b508      	push	{r3, lr}
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <TM_HD44780_DisplayOn+0x18>)
 8002128:	7818      	ldrb	r0, [r3, #0]
 800212a:	f040 0004 	orr.w	r0, r0, #4
 800212e:	7018      	strb	r0, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8002130:	f040 0008 	orr.w	r0, r0, #8
 8002134:	f7ff ff68 	bl	8002008 <TM_HD44780_Cmd>
}
 8002138:	bd08      	pop	{r3, pc}
 800213a:	bf00      	nop
 800213c:	200002e0 	.word	0x200002e0

08002140 <TM_HD44780_Init>:
void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	4607      	mov	r7, r0
 8002144:	460e      	mov	r6, r1
	TM_DELAY_Init();
 8002146:	f7ff fdb9 	bl	8001cbc <TM_DELAY_Init>
	TM_HD44780_InitPins();
 800214a:	f7ff fead 	bl	8001ea8 <TM_HD44780_InitPins>
	HD44780_Delay(45000);
 800214e:	f64a 74c8 	movw	r4, #45000	; 0xafc8
	uint32_t start = DWT->CYCCNT;
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <TM_HD44780_Init+0x12c>)
 8002154:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002156:	f000 fd71 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <TM_HD44780_Init+0x130>)
 800215c:	fba3 2300 	umull	r2, r3, r3, r0
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <TM_HD44780_Init+0x12c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	1b5b      	subs	r3, r3, r5
 800216c:	42a3      	cmp	r3, r4
 800216e:	d3fa      	bcc.n	8002166 <TM_HD44780_Init+0x26>
	HD44780_Opts.Rows = rows;
 8002170:	4b40      	ldr	r3, [pc, #256]	; (8002274 <TM_HD44780_Init+0x134>)
 8002172:	70de      	strb	r6, [r3, #3]
	HD44780_Opts.Cols = cols;
 8002174:	711f      	strb	r7, [r3, #4]
	HD44780_Opts.currentX = 0;
 8002176:	2200      	movs	r2, #0
 8002178:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 800217a:	719a      	strb	r2, [r3, #6]
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800217c:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 800217e:	2e01      	cmp	r6, #1
 8002180:	d901      	bls.n	8002186 <TM_HD44780_Init+0x46>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 8002182:	2208      	movs	r2, #8
 8002184:	705a      	strb	r2, [r3, #1]
	TM_HD44780_Cmd4bit(0x03);
 8002186:	2003      	movs	r0, #3
 8002188:	f7ff fedc 	bl	8001f44 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800218c:	f241 1494 	movw	r4, #4500	; 0x1194
	uint32_t start = DWT->CYCCNT;
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <TM_HD44780_Init+0x12c>)
 8002192:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002194:	f000 fd52 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <TM_HD44780_Init+0x130>)
 800219a:	fba3 2300 	umull	r2, r3, r3, r0
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <TM_HD44780_Init+0x12c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	1b5b      	subs	r3, r3, r5
 80021aa:	42a3      	cmp	r3, r4
 80021ac:	d3fa      	bcc.n	80021a4 <TM_HD44780_Init+0x64>
	TM_HD44780_Cmd4bit(0x03);
 80021ae:	2003      	movs	r0, #3
 80021b0:	f7ff fec8 	bl	8001f44 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80021b4:	f241 1494 	movw	r4, #4500	; 0x1194
	uint32_t start = DWT->CYCCNT;
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <TM_HD44780_Init+0x12c>)
 80021ba:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80021bc:	f000 fd3e 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <TM_HD44780_Init+0x130>)
 80021c2:	fba3 2300 	umull	r2, r3, r3, r0
 80021c6:	0c9b      	lsrs	r3, r3, #18
 80021c8:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <TM_HD44780_Init+0x12c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	1b5b      	subs	r3, r3, r5
 80021d2:	42a3      	cmp	r3, r4
 80021d4:	d3fa      	bcc.n	80021cc <TM_HD44780_Init+0x8c>
	TM_HD44780_Cmd4bit(0x03);
 80021d6:	2003      	movs	r0, #3
 80021d8:	f7ff feb4 	bl	8001f44 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);	
 80021dc:	f241 1494 	movw	r4, #4500	; 0x1194
	uint32_t start = DWT->CYCCNT;
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <TM_HD44780_Init+0x12c>)
 80021e2:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80021e4:	f000 fd2a 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <TM_HD44780_Init+0x130>)
 80021ea:	fba3 2300 	umull	r2, r3, r3, r0
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <TM_HD44780_Init+0x12c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	1b5b      	subs	r3, r3, r5
 80021fa:	42a3      	cmp	r3, r4
 80021fc:	d3fa      	bcc.n	80021f4 <TM_HD44780_Init+0xb4>
	TM_HD44780_Cmd4bit(0x02);
 80021fe:	2002      	movs	r0, #2
 8002200:	f7ff fea0 	bl	8001f44 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 8002204:	2464      	movs	r4, #100	; 0x64
	uint32_t start = DWT->CYCCNT;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <TM_HD44780_Init+0x12c>)
 8002208:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800220a:	f000 fd17 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <TM_HD44780_Init+0x130>)
 8002210:	fba3 2300 	umull	r2, r3, r3, r0
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <TM_HD44780_Init+0x12c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	1b5b      	subs	r3, r3, r5
 8002220:	42a3      	cmp	r3, r4
 8002222:	d3fa      	bcc.n	800221a <TM_HD44780_Init+0xda>
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8002224:	4c13      	ldr	r4, [pc, #76]	; (8002274 <TM_HD44780_Init+0x134>)
 8002226:	7860      	ldrb	r0, [r4, #1]
 8002228:	f040 0020 	orr.w	r0, r0, #32
 800222c:	f7ff feec 	bl	8002008 <TM_HD44780_Cmd>
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8002230:	2304      	movs	r3, #4
 8002232:	7023      	strb	r3, [r4, #0]
	TM_HD44780_DisplayOn();
 8002234:	f7ff ff76 	bl	8002124 <TM_HD44780_DisplayOn>
	TM_HD44780_Clear();
 8002238:	f7ff ff26 	bl	8002088 <TM_HD44780_Clear>
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800223c:	2302      	movs	r3, #2
 800223e:	70a3      	strb	r3, [r4, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8002240:	2006      	movs	r0, #6
 8002242:	f7ff fee1 	bl	8002008 <TM_HD44780_Cmd>
	HD44780_Delay(4500);
 8002246:	f241 1494 	movw	r4, #4500	; 0x1194
	uint32_t start = DWT->CYCCNT;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <TM_HD44780_Init+0x12c>)
 800224c:	685d      	ldr	r5, [r3, #4]
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800224e:	f000 fcf5 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <TM_HD44780_Init+0x130>)
 8002254:	fba3 2300 	umull	r2, r3, r3, r0
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	fb03 f404 	mul.w	r4, r3, r4
	while ((DWT->CYCCNT - start) < micros);
 800225e:	4b03      	ldr	r3, [pc, #12]	; (800226c <TM_HD44780_Init+0x12c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	1b5b      	subs	r3, r3, r5
 8002264:	42a3      	cmp	r3, r4
 8002266:	d3fa      	bcc.n	800225e <TM_HD44780_Init+0x11e>
}
 8002268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800226a:	bf00      	nop
 800226c:	e0001000 	.word	0xe0001000
 8002270:	431bde83 	.word	0x431bde83
 8002274:	200002e0 	.word	0x200002e0

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800227c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800227e:	e003      	b.n	8002288 <LoopCopyDataInit>

08002280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002286:	3104      	adds	r1, #4

08002288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800228c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800228e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002290:	d3f6      	bcc.n	8002280 <CopyDataInit>
  ldr  r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002294:	e002      	b.n	800229c <LoopFillZerobss>

08002296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002298:	f842 3b04 	str.w	r3, [r2], #4

0800229c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800229e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022a0:	d3f9      	bcc.n	8002296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a2:	f7ff fcfd 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f000 ff9d 	bl	80031e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe ffe3 	bl	8001274 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022b4:	08005cf8 	.word	0x08005cf8
  ldr  r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80022c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80022c4:	200002f8 	.word	0x200002f8

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_InitTick+0x40>)
 80022d2:	7818      	ldrb	r0, [r3, #0]
 80022d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_InitTick+0x44>)
 80022de:	6810      	ldr	r0, [r2, #0]
 80022e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e4:	f000 f89c 	bl	8002420 <HAL_SYSTICK_Config>
 80022e8:	b968      	cbnz	r0, 8002306 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	2c0f      	cmp	r4, #15
 80022ec:	d901      	bls.n	80022f2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	e00a      	b.n	8002308 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f2:	2200      	movs	r2, #0
 80022f4:	4621      	mov	r1, r4
 80022f6:	f04f 30ff 	mov.w	r0, #4294967295
 80022fa:	f000 f839 	bl	8002370 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_InitTick+0x48>)
 8002300:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2000      	movs	r0, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
}
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	20000004 	.word	0x20000004
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008

08002318 <HAL_Init>:
{
 8002318:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_Init+0x30>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002322:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800232a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002332:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f809 	bl	800234c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff ffc6 	bl	80022cc <HAL_InitTick>
  HAL_MspInit();
 8002340:	f7ff fb34 	bl	80019ac <HAL_MspInit>
}
 8002344:	2000      	movs	r0, #0
 8002346:	bd08      	pop	{r3, pc}
 8002348:	40023c00 	.word	0x40023c00

0800234c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800234e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002350:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	0200      	lsls	r0, r0, #8
 800235a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002368:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002370:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_NVIC_SetPriority+0x68>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237a:	f1c3 0c07 	rsb	ip, r3, #7
 800237e:	f1bc 0f04 	cmp.w	ip, #4
 8002382:	bf28      	it	cs
 8002384:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002388:	f103 0e04 	add.w	lr, r3, #4
 800238c:	f1be 0f06 	cmp.w	lr, #6
 8002390:	d918      	bls.n	80023c4 <HAL_NVIC_SetPriority+0x54>
 8002392:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 3eff 	mov.w	lr, #4294967295
 8002398:	fa0e fc0c 	lsl.w	ip, lr, ip
 800239c:	ea21 010c 	bic.w	r1, r1, ip
 80023a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a2:	fa0e f303 	lsl.w	r3, lr, r3
 80023a6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023aa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80023ac:	2800      	cmp	r0, #0
 80023ae:	db0b      	blt.n	80023c8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	0109      	lsls	r1, r1, #4
 80023b2:	b2c9      	uxtb	r1, r1
 80023b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c4:	2300      	movs	r3, #0
 80023c6:	e7e5      	b.n	8002394 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	f000 000f 	and.w	r0, r0, #15
 80023cc:	0109      	lsls	r1, r1, #4
 80023ce:	b2c9      	uxtb	r1, r1
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_NVIC_SetPriority+0x6c>)
 80023d2:	5419      	strb	r1, [r3, r0]
 80023d4:	e7f4      	b.n	80023c0 <HAL_NVIC_SetPriority+0x50>
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	e000ed14 	.word	0xe000ed14

080023e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	db07      	blt.n	80023f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e4:	f000 021f 	and.w	r2, r0, #31
 80023e8:	0940      	lsrs	r0, r0, #5
 80023ea:	2301      	movs	r3, #1
 80023ec:	4093      	lsls	r3, r2
 80023ee:	4a02      	ldr	r2, [pc, #8]	; (80023f8 <HAL_NVIC_EnableIRQ+0x18>)
 80023f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	db0c      	blt.n	800241a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002400:	f000 021f 	and.w	r2, r0, #31
 8002404:	0940      	lsrs	r0, r0, #5
 8002406:	2301      	movs	r3, #1
 8002408:	4093      	lsls	r3, r2
 800240a:	3020      	adds	r0, #32
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <HAL_NVIC_DisableIRQ+0x20>)
 800240e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002412:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002416:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	3801      	subs	r0, #1
 8002422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002426:	d20b      	bcs.n	8002440 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800242c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_SYSTICK_Config+0x24>)
 8002430:	21f0      	movs	r1, #240	; 0xf0
 8002432:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002436:	2000      	movs	r0, #0
 8002438:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	2207      	movs	r2, #7
 800243c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002440:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002448:	2300      	movs	r3, #0
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f200 80d2 	bhi.w	80025f4 <HAL_GPIO_Init+0x1ac>
{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	e060      	b.n	8002518 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002458:	005e      	lsls	r6, r3, #1
 800245a:	2403      	movs	r4, #3
 800245c:	40b4      	lsls	r4, r6
 800245e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	68cc      	ldr	r4, [r1, #12]
 8002464:	40b4      	lsls	r4, r6
 8002466:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002468:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	684c      	ldr	r4, [r1, #4]
 8002472:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800247a:	6042      	str	r2, [r0, #4]
 800247c:	e05a      	b.n	8002534 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247e:	08dc      	lsrs	r4, r3, #3
 8002480:	3408      	adds	r4, #8
 8002482:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	0095      	lsls	r5, r2, #2
 800248c:	220f      	movs	r2, #15
 800248e:	40aa      	lsls	r2, r5
 8002490:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002494:	690a      	ldr	r2, [r1, #16]
 8002496:	40aa      	lsls	r2, r5
 8002498:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800249c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80024a0:	e05c      	b.n	800255c <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a2:	2204      	movs	r2, #4
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x60>
 80024a6:	2200      	movs	r2, #0
 80024a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80024ac:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ae:	3402      	adds	r4, #2
 80024b0:	4d51      	ldr	r5, [pc, #324]	; (80025f8 <HAL_GPIO_Init+0x1b0>)
 80024b2:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_GPIO_Init+0x1b4>)
 80024b8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	ea6f 020c 	mvn.w	r2, ip
 80024be:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	684e      	ldr	r6, [r1, #4]
 80024c4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80024c8:	d001      	beq.n	80024ce <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80024ca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80024ce:	4c4b      	ldr	r4, [pc, #300]	; (80025fc <HAL_GPIO_Init+0x1b4>)
 80024d0:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80024d2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d8:	684e      	ldr	r6, [r1, #4]
 80024da:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80024de:	d001      	beq.n	80024e4 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80024e0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80024e4:	4c45      	ldr	r4, [pc, #276]	; (80025fc <HAL_GPIO_Init+0x1b4>)
 80024e6:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80024e8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	684e      	ldr	r6, [r1, #4]
 80024f0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80024f4:	d001      	beq.n	80024fa <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80024f6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80024fa:	4c40      	ldr	r4, [pc, #256]	; (80025fc <HAL_GPIO_Init+0x1b4>)
 80024fc:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fe:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002500:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002502:	684d      	ldr	r5, [r1, #4]
 8002504:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8002508:	d001      	beq.n	800250e <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 800250a:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800250e:	4c3b      	ldr	r4, [pc, #236]	; (80025fc <HAL_GPIO_Init+0x1b4>)
 8002510:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	3301      	adds	r3, #1
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d86b      	bhi.n	80025f0 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251c:	680c      	ldr	r4, [r1, #0]
 800251e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002522:	ea32 0404 	bics.w	r4, r2, r4
 8002526:	d1f4      	bne.n	8002512 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002528:	684c      	ldr	r4, [r1, #4]
 800252a:	f004 0403 	and.w	r4, r4, #3
 800252e:	3c01      	subs	r4, #1
 8002530:	2c01      	cmp	r4, #1
 8002532:	d990      	bls.n	8002456 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	684a      	ldr	r2, [r1, #4]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	2a03      	cmp	r2, #3
 800253c:	d009      	beq.n	8002552 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 800253e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002540:	005d      	lsls	r5, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	40aa      	lsls	r2, r5
 8002546:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254a:	688a      	ldr	r2, [r1, #8]
 800254c:	40aa      	lsls	r2, r5
 800254e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002550:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	684a      	ldr	r2, [r1, #4]
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	2a02      	cmp	r2, #2
 800255a:	d090      	beq.n	800247e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800255c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f20e 	lsl.w	r2, r2, lr
 8002568:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	684a      	ldr	r2, [r1, #4]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	fa02 f20e 	lsl.w	r2, r2, lr
 8002576:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002578:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257a:	684a      	ldr	r2, [r1, #4]
 800257c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002580:	d0c7      	beq.n	8002512 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2200      	movs	r2, #0
 8002584:	9201      	str	r2, [sp, #4]
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_GPIO_Init+0x1b8>)
 8002588:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800258a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800258e:	6454      	str	r4, [r2, #68]	; 0x44
 8002590:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002592:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002596:	9201      	str	r2, [sp, #4]
 8002598:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	089c      	lsrs	r4, r3, #2
 800259c:	1ca5      	adds	r5, r4, #2
 800259e:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_GPIO_Init+0x1b0>)
 80025a0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80025b2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <HAL_GPIO_Init+0x1bc>)
 80025b8:	4290      	cmp	r0, r2
 80025ba:	f43f af74 	beq.w	80024a6 <HAL_GPIO_Init+0x5e>
 80025be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025c2:	4290      	cmp	r0, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_GPIO_Init+0x19c>
 80025c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ca:	4290      	cmp	r0, r2
 80025cc:	d00c      	beq.n	80025e8 <HAL_GPIO_Init+0x1a0>
 80025ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d2:	4290      	cmp	r0, r2
 80025d4:	d00a      	beq.n	80025ec <HAL_GPIO_Init+0x1a4>
 80025d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025da:	4290      	cmp	r0, r2
 80025dc:	f43f af61 	beq.w	80024a2 <HAL_GPIO_Init+0x5a>
 80025e0:	2207      	movs	r2, #7
 80025e2:	e761      	b.n	80024a8 <HAL_GPIO_Init+0x60>
 80025e4:	2201      	movs	r2, #1
 80025e6:	e75f      	b.n	80024a8 <HAL_GPIO_Init+0x60>
 80025e8:	2202      	movs	r2, #2
 80025ea:	e75d      	b.n	80024a8 <HAL_GPIO_Init+0x60>
 80025ec:	2203      	movs	r2, #3
 80025ee:	e75b      	b.n	80024a8 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80025f0:	b002      	add	sp, #8
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40013c00 	.word	0x40013c00
 8002600:	40023800 	.word	0x40023800
 8002604:	40020000 	.word	0x40020000

08002608 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002608:	6903      	ldr	r3, [r0, #16]
 800260a:	4219      	tst	r1, r3
 800260c:	d001      	beq.n	8002612 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800260e:	2001      	movs	r0, #1
 8002610:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002612:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002616:	b10a      	cbz	r2, 800261c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002618:	6181      	str	r1, [r0, #24]
 800261a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261c:	0409      	lsls	r1, r1, #16
 800261e:	6181      	str	r1, [r0, #24]
  }
}
 8002620:	4770      	bx	lr

08002622 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002624:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4203      	tst	r3, r0
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800262e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002632:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002634:	f7ff fff5 	bl	8002622 <HAL_GPIO_EXTI_Callback>
}
 8002638:	e7f9      	b.n	800262e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800263a:	bf00      	nop
 800263c:	40013c00 	.word	0x40013c00

08002640 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002640:	2800      	cmp	r0, #0
 8002642:	f000 81e0 	beq.w	8002a06 <HAL_RCC_OscConfig+0x3c6>
{
 8002646:	b570      	push	{r4, r5, r6, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264c:	6803      	ldr	r3, [r0, #0]
 800264e:	f013 0f01 	tst.w	r3, #1
 8002652:	d03b      	beq.n	80026cc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002654:	4b9f      	ldr	r3, [pc, #636]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b04      	cmp	r3, #4
 800265e:	d02c      	beq.n	80026ba <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002660:	4b9c      	ldr	r3, [pc, #624]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002668:	2b08      	cmp	r3, #8
 800266a:	d021      	beq.n	80026b0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	6863      	ldr	r3, [r4, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d04f      	beq.n	8002714 <HAL_RCC_OscConfig+0xd4>
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002678:	d052      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
 800267a:	4b96      	ldr	r3, [pc, #600]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800268a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	6863      	ldr	r3, [r4, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d050      	beq.n	8002734 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7ff fb7d 	bl	8001d90 <HAL_GetTick>
 8002696:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026a0:	d114      	bne.n	80026cc <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a2:	f7ff fb75 	bl	8001d90 <HAL_GetTick>
 80026a6:	1b40      	subs	r0, r0, r5
 80026a8:	2864      	cmp	r0, #100	; 0x64
 80026aa:	d9f5      	bls.n	8002698 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80026ac:	2003      	movs	r0, #3
 80026ae:	e1b1      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80026b8:	d0d8      	beq.n	800266c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ba:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026c2:	d003      	beq.n	80026cc <HAL_RCC_OscConfig+0x8c>
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 819f 	beq.w	8002a0a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	f013 0f02 	tst.w	r3, #2
 80026d2:	d054      	beq.n	800277e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026d4:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f013 0f0c 	tst.w	r3, #12
 80026dc:	d03e      	beq.n	800275c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d033      	beq.n	8002752 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ea:	68e3      	ldr	r3, [r4, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d068      	beq.n	80027c2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <HAL_RCC_OscConfig+0x298>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7ff fb4b 	bl	8001d90 <HAL_GetTick>
 80026fa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f013 0f02 	tst.w	r3, #2
 8002704:	d154      	bne.n	80027b0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff fb43 	bl	8001d90 <HAL_GetTick>
 800270a:	1b40      	subs	r0, r0, r5
 800270c:	2802      	cmp	r0, #2
 800270e:	d9f5      	bls.n	80026fc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002710:	2003      	movs	r0, #3
 8002712:	e17f      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e7b5      	b.n	800268c <HAL_RCC_OscConfig+0x4c>
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e7ab      	b.n	800268c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002734:	f7ff fb2c 	bl	8001d90 <HAL_GetTick>
 8002738:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002742:	d0c3      	beq.n	80026cc <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fb24 	bl	8001d90 <HAL_GetTick>
 8002748:	1b40      	subs	r0, r0, r5
 800274a:	2864      	cmp	r0, #100	; 0x64
 800274c:	d9f5      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e160      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800275a:	d1c6      	bne.n	80026ea <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275c:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f013 0f02 	tst.w	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_OscConfig+0x12e>
 8002766:	68e3      	ldr	r3, [r4, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8150 	bne.w	8002a0e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4a59      	ldr	r2, [pc, #356]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002776:	6921      	ldr	r1, [r4, #16]
 8002778:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800277c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	f013 0f08 	tst.w	r3, #8
 8002784:	d042      	beq.n	800280c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002786:	6963      	ldr	r3, [r4, #20]
 8002788:	b36b      	cbz	r3, 80027e6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_OscConfig+0x298>)
 800278c:	2201      	movs	r2, #1
 800278e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fafd 	bl	8001d90 <HAL_GetTick>
 8002796:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002798:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f013 0f02 	tst.w	r3, #2
 80027a0:	d134      	bne.n	800280c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7ff faf5 	bl	8001d90 <HAL_GetTick>
 80027a6:	1b40      	subs	r0, r0, r5
 80027a8:	2802      	cmp	r0, #2
 80027aa:	d9f5      	bls.n	8002798 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80027ac:	2003      	movs	r0, #3
 80027ae:	e131      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4a48      	ldr	r2, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027b8:	6921      	ldr	r1, [r4, #16]
 80027ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e7dd      	b.n	800277e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <HAL_RCC_OscConfig+0x298>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027c8:	f7ff fae2 	bl	8001d90 <HAL_GetTick>
 80027cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f013 0f02 	tst.w	r3, #2
 80027d6:	d0d2      	beq.n	800277e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7ff fada 	bl	8001d90 <HAL_GetTick>
 80027dc:	1b40      	subs	r0, r0, r5
 80027de:	2802      	cmp	r0, #2
 80027e0:	d9f5      	bls.n	80027ce <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80027e2:	2003      	movs	r0, #3
 80027e4:	e116      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <HAL_RCC_OscConfig+0x298>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7ff facf 	bl	8001d90 <HAL_GetTick>
 80027f2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80027f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f8:	f013 0f02 	tst.w	r3, #2
 80027fc:	d006      	beq.n	800280c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fe:	f7ff fac7 	bl	8001d90 <HAL_GetTick>
 8002802:	1b40      	subs	r0, r0, r5
 8002804:	2802      	cmp	r0, #2
 8002806:	d9f5      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002808:	2003      	movs	r0, #3
 800280a:	e103      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	f013 0f04 	tst.w	r3, #4
 8002812:	d077      	beq.n	8002904 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800281c:	d133      	bne.n	8002886 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 8002824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002836:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_RCC_OscConfig+0x29c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002840:	d023      	beq.n	800288a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	68a3      	ldr	r3, [r4, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d034      	beq.n	80028b2 <HAL_RCC_OscConfig+0x272>
 8002848:	2b05      	cmp	r3, #5
 800284a:	d038      	beq.n	80028be <HAL_RCC_OscConfig+0x27e>
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800284e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	671a      	str	r2, [r3, #112]	; 0x70
 8002856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002858:	f022 0204 	bic.w	r2, r2, #4
 800285c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285e:	68a3      	ldr	r3, [r4, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03d      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff fa94 	bl	8001d90 <HAL_GetTick>
 8002868:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f013 0f02 	tst.w	r3, #2
 8002872:	d146      	bne.n	8002902 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7ff fa8c 	bl	8001d90 <HAL_GetTick>
 8002878:	1b80      	subs	r0, r0, r6
 800287a:	f241 3388 	movw	r3, #5000	; 0x1388
 800287e:	4298      	cmp	r0, r3
 8002880:	d9f3      	bls.n	800286a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002882:	2003      	movs	r0, #3
 8002884:	e0c6      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2500      	movs	r5, #0
 8002888:	e7d6      	b.n	8002838 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_RCC_OscConfig+0x29c>)
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002894:	f7ff fa7c 	bl	8001d90 <HAL_GetTick>
 8002898:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x29c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028a2:	d1ce      	bne.n	8002842 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7ff fa74 	bl	8001d90 <HAL_GetTick>
 80028a8:	1b80      	subs	r0, r0, r6
 80028aa:	2802      	cmp	r0, #2
 80028ac:	d9f5      	bls.n	800289a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80028ae:	2003      	movs	r0, #3
 80028b0:	e0b0      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80028b4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e7cf      	b.n	800285e <HAL_RCC_OscConfig+0x21e>
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_OscConfig+0x294>)
 80028c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c2:	f042 0204 	orr.w	r2, r2, #4
 80028c6:	671a      	str	r2, [r3, #112]	; 0x70
 80028c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	671a      	str	r2, [r3, #112]	; 0x70
 80028d0:	e7c5      	b.n	800285e <HAL_RCC_OscConfig+0x21e>
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470000 	.word	0x42470000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7ff fa56 	bl	8001d90 <HAL_GetTick>
 80028e4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f013 0f02 	tst.w	r3, #2
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7ff fa4e 	bl	8001d90 <HAL_GetTick>
 80028f4:	1b80      	subs	r0, r0, r6
 80028f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80028fa:	4298      	cmp	r0, r3
 80028fc:	d9f3      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80028fe:	2003      	movs	r0, #3
 8002900:	e088      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002902:	b9ed      	cbnz	r5, 8002940 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002904:	69a3      	ldr	r3, [r4, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8083 	beq.w	8002a12 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	f002 020c 	and.w	r2, r2, #12
 8002914:	2a08      	cmp	r2, #8
 8002916:	d051      	beq.n	80029bc <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002918:	2b02      	cmp	r3, #2
 800291a:	d017      	beq.n	800294c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <HAL_RCC_OscConfig+0x3f4>)
 800291e:	2200      	movs	r2, #0
 8002920:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7ff fa35 	bl	8001d90 <HAL_GetTick>
 8002926:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002930:	d042      	beq.n	80029b8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff fa2d 	bl	8001d90 <HAL_GetTick>
 8002936:	1b00      	subs	r0, r0, r4
 8002938:	2802      	cmp	r0, #2
 800293a:	d9f5      	bls.n	8002928 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800293c:	2003      	movs	r0, #3
 800293e:	e069      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4a3b      	ldr	r2, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 8002942:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	e7db      	b.n	8002904 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x3f4>)
 800294e:	2200      	movs	r2, #0
 8002950:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002952:	f7ff fa1d 	bl	8001d90 <HAL_GetTick>
 8002956:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002960:	d006      	beq.n	8002970 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7ff fa15 	bl	8001d90 <HAL_GetTick>
 8002966:	1b40      	subs	r0, r0, r5
 8002968:	2802      	cmp	r0, #2
 800296a:	d9f5      	bls.n	8002958 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800296c:	2003      	movs	r0, #3
 800296e:	e051      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002970:	69e3      	ldr	r3, [r4, #28]
 8002972:	6a22      	ldr	r2, [r4, #32]
 8002974:	4313      	orrs	r3, r2
 8002976:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002978:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800297c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800297e:	0852      	lsrs	r2, r2, #1
 8002980:	3a01      	subs	r2, #1
 8002982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002988:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 800298e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_RCC_OscConfig+0x3f4>)
 8002992:	2201      	movs	r2, #1
 8002994:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002996:	f7ff f9fb 	bl	8001d90 <HAL_GetTick>
 800299a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff f9f3 	bl	8001d90 <HAL_GetTick>
 80029aa:	1b00      	subs	r0, r0, r4
 80029ac:	2802      	cmp	r0, #2
 80029ae:	d9f5      	bls.n	800299c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80029b0:	2003      	movs	r0, #3
 80029b2:	e02f      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
 80029b6:	e02d      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 80029b8:	2000      	movs	r0, #0
 80029ba:	e02b      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d02b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x3f0>)
 80029c2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80029c8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ca:	4291      	cmp	r1, r2
 80029cc:	d126      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d123      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029da:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80029de:	401a      	ands	r2, r3
 80029e0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80029e4:	d11e      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80029ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029ec:	0852      	lsrs	r2, r2, #1
 80029ee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80029f4:	d118      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80029fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002a00:	d114      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002a02:	2000      	movs	r0, #0
 8002a04:	e006      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
}
 8002a08:	4770      	bx	lr
        return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
}
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e7fb      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	e7f9      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 8002a20:	2001      	movs	r0, #1
 8002a22:	e7f7      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 8002a24:	2001      	movs	r0, #1
 8002a26:	e7f5      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 8002a28:	2001      	movs	r0, #1
 8002a2a:	e7f3      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7f1      	b.n	8002a14 <HAL_RCC_OscConfig+0x3d4>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d03f      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x8e>
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d13f      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a58:	d012      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a62:	481c      	ldr	r0, [pc, #112]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a64:	2300      	movs	r3, #0
 8002a66:	fba1 0100 	umull	r0, r1, r1, r0
 8002a6a:	f7fe f887 	bl	8000b7c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002a7a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a7e:	e025      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002a88:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002a8c:	ebb1 000c 	subs.w	r0, r1, ip
 8002a90:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002a94:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002a98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9c:	0181      	lsls	r1, r0, #6
 8002a9e:	1a09      	subs	r1, r1, r0
 8002aa0:	eb63 030e 	sbc.w	r3, r3, lr
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aaa:	00c9      	lsls	r1, r1, #3
 8002aac:	eb11 0c0c 	adds.w	ip, r1, ip
 8002ab0:	f143 0300 	adc.w	r3, r3, #0
 8002ab4:	0299      	lsls	r1, r3, #10
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002abc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002ac0:	f7fe f85c 	bl	8000b7c <__aeabi_uldivmod>
 8002ac4:	e7d3      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002ac6:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aca:	4803      	ldr	r0, [pc, #12]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002acc:	bd08      	pop	{r3, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	017d7840 	.word	0x017d7840
 8002ad8:	00f42400 	.word	0x00f42400

08002adc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002adc:	2800      	cmp	r0, #0
 8002ade:	f000 809b 	beq.w	8002c18 <HAL_RCC_ClockConfig+0x13c>
{
 8002ae2:	b570      	push	{r4, r5, r6, lr}
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_RCC_ClockConfig+0x14c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d208      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af4:	b2cb      	uxtb	r3, r1
 8002af6:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_RCC_ClockConfig+0x14c>)
 8002af8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	428b      	cmp	r3, r1
 8002b02:	f040 808b 	bne.w	8002c1c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	f013 0f02 	tst.w	r3, #2
 8002b0c:	d017      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0e:	f013 0f04 	tst.w	r3, #4
 8002b12:	d004      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4a45      	ldr	r2, [pc, #276]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b16:	6893      	ldr	r3, [r2, #8]
 8002b18:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	f013 0f08 	tst.w	r3, #8
 8002b24:	d004      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b26:	4a41      	ldr	r2, [pc, #260]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b28:	6893      	ldr	r3, [r2, #8]
 8002b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b32:	6893      	ldr	r3, [r2, #8]
 8002b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b38:	68a1      	ldr	r1, [r4, #8]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	f013 0f01 	tst.w	r3, #1
 8002b44:	d032      	beq.n	8002bac <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	6863      	ldr	r3, [r4, #4]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d021      	beq.n	8002b90 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4c:	1e9a      	subs	r2, r3, #2
 8002b4e:	2a01      	cmp	r2, #1
 8002b50:	d925      	bls.n	8002b9e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4a36      	ldr	r2, [pc, #216]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	f012 0f02 	tst.w	r2, #2
 8002b5a:	d061      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5c:	4933      	ldr	r1, [pc, #204]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b5e:	688a      	ldr	r2, [r1, #8]
 8002b60:	f022 0203 	bic.w	r2, r2, #3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002b68:	f7ff f912 	bl	8001d90 <HAL_GetTick>
 8002b6c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	6862      	ldr	r2, [r4, #4]
 8002b78:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7ff f907 	bl	8001d90 <HAL_GetTick>
 8002b82:	1b80      	subs	r0, r0, r6
 8002b84:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b88:	4298      	cmp	r0, r3
 8002b8a:	d9f0      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	e042      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002b98:	d1e0      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	e03b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ba6:	d1d9      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002ba8:	2001      	movs	r0, #1
 8002baa:	e034      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_ClockConfig+0x14c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	42ab      	cmp	r3, r5
 8002bb6:	d907      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb8:	b2ea      	uxtb	r2, r5
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_ClockConfig+0x14c>)
 8002bbc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	42ab      	cmp	r3, r5
 8002bc6:	d12d      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	f013 0f04 	tst.w	r3, #4
 8002bce:	d006      	beq.n	8002bde <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002bd2:	6893      	ldr	r3, [r2, #8]
 8002bd4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002bd8:	68e1      	ldr	r1, [r4, #12]
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f013 0f08 	tst.w	r3, #8
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002be8:	6893      	ldr	r3, [r2, #8]
 8002bea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bee:	6921      	ldr	r1, [r4, #16]
 8002bf0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bf4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf6:	f7ff ff1f 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCC_ClockConfig+0x150>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <HAL_RCC_ClockConfig+0x154>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	40d8      	lsrs	r0, r3
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCC_ClockConfig+0x158>)
 8002c0a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x15c>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	f7ff fb5c 	bl	80022cc <HAL_InitTick>
  return HAL_OK;
 8002c14:	2000      	movs	r0, #0
}
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	4770      	bx	lr
      return HAL_ERROR;
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	e7fa      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
 8002c22:	e7f8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002c24:	2001      	movs	r0, #1
 8002c26:	e7f6      	b.n	8002c16 <HAL_RCC_ClockConfig+0x13a>
 8002c28:	40023c00 	.word	0x40023c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08005a14 	.word	0x08005a14
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000008 	.word	0x20000008

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c3c:	4b01      	ldr	r3, [pc, #4]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c48:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c4a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4c:	6a04      	ldr	r4, [r0, #32]
 8002c4e:	f024 0401 	bic.w	r4, r4, #1
 8002c52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c54:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c56:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002c62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c66:	6203      	str	r3, [r0, #32]
}
 8002c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c72:	6a04      	ldr	r4, [r0, #32]
 8002c74:	f024 0410 	bic.w	r4, r4, #16
 8002c78:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c7c:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c80:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c88:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c8e:	6203      	str	r3, [r0, #32]
}
 8002c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c96:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca2:	6083      	str	r3, [r0, #8]
}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12a      	bne.n	8002d08 <HAL_TIM_Base_Start+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <HAL_TIM_Base_Start+0x68>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d018      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d015      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
 8002cc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d011      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
 8002cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
 8002cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
 8002cde:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cee:	2000      	movs	r0, #0
 8002cf0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	2a06      	cmp	r2, #6
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d04:	2000      	movs	r0, #0
 8002d06:	4770      	bx	lr
    return HAL_ERROR;
 8002d08:	2001      	movs	r0, #1
 8002d0a:	4770      	bx	lr
  return HAL_OK;
 8002d0c:	2000      	movs	r0, #0
}
 8002d0e:	4770      	bx	lr
 8002d10:	40010000 	.word	0x40010000

08002d14 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002d14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d12f      	bne.n	8002d7e <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	68d3      	ldr	r3, [r2, #12]
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <HAL_TIM_Base_Start_IT+0x74>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d015      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
 8002d3c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d011      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
 8002d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00d      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
 8002d4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
 8002d54:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d005      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
 8002d66:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	2a06      	cmp	r2, #6
 8002d70:	d007      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	4770      	bx	lr
    return HAL_ERROR;
 8002d7e:	2001      	movs	r0, #1
 8002d80:	4770      	bx	lr
  return HAL_OK;
 8002d82:	2000      	movs	r0, #0
}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000

08002d8c <HAL_TIM_PeriodElapsedCallback>:
}
 8002d8c:	4770      	bx	lr

08002d8e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_IC_CaptureCallback>:
}
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_TriggerCallback>:
}
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_IRQHandler>:
{
 8002d96:	b570      	push	{r4, r5, r6, lr}
 8002d98:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d9e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da0:	f015 0f02 	tst.w	r5, #2
 8002da4:	d010      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002da6:	f016 0f02 	tst.w	r6, #2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dac:	f06f 0202 	mvn.w	r2, #2
 8002db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f013 0f03 	tst.w	r3, #3
 8002dbe:	d05e      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc0:	f7ff ffe6 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dc8:	f015 0f04 	tst.w	r5, #4
 8002dcc:	d012      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dce:	f016 0f04 	tst.w	r6, #4
 8002dd2:	d00f      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f06f 0204 	mvn.w	r2, #4
 8002dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002de8:	d04f      	beq.n	8002e8a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ffd0 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	2300      	movs	r3, #0
 8002df2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002df4:	f015 0f08 	tst.w	r5, #8
 8002df8:	d012      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dfa:	f016 0f08 	tst.w	r6, #8
 8002dfe:	d00f      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f06f 0208 	mvn.w	r2, #8
 8002e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e08:	2304      	movs	r3, #4
 8002e0a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f013 0f03 	tst.w	r3, #3
 8002e14:	d040      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff ffba 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e20:	f015 0f10 	tst.w	r5, #16
 8002e24:	d012      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e26:	f016 0f10 	tst.w	r6, #16
 8002e2a:	d00f      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f06f 0210 	mvn.w	r2, #16
 8002e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e34:	2308      	movs	r3, #8
 8002e36:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e40:	d031      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff ffa4 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e4c:	f015 0f01 	tst.w	r5, #1
 8002e50:	d002      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e52:	f016 0f01 	tst.w	r6, #1
 8002e56:	d12d      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e58:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002e5c:	d002      	beq.n	8002e64 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002e62:	d12f      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e64:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e68:	d002      	beq.n	8002e70 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002e6e:	d131      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e70:	f015 0f20 	tst.w	r5, #32
 8002e74:	d002      	beq.n	8002e7c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e76:	f016 0f20 	tst.w	r6, #32
 8002e7a:	d133      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x14e>
}
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	f7ff ff86 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff85 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e88:	e79c      	b.n	8002dc4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ff7f 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff ff7e 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e96:	e7ab      	b.n	8002df0 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff ff78 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff ff77 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ea4:	e7ba      	b.n	8002e1c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff ff71 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff ff70 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8002eb2:	e7c9      	b.n	8002e48 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	f06f 0201 	mvn.w	r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f7ff ff65 	bl	8002d8c <HAL_TIM_PeriodElapsedCallback>
 8002ec2:	e7c9      	b.n	8002e58 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 f95e 	bl	800318e <HAL_TIMEx_BreakCallback>
 8002ed2:	e7c7      	b.n	8002e64 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff ff59 	bl	8002d94 <HAL_TIM_TriggerCallback>
 8002ee2:	e7c5      	b.n	8002e70 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	f06f 0220 	mvn.w	r2, #32
 8002eea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 f94d 	bl	800318c <HAL_TIMEx_CommutCallback>
}
 8002ef2:	e7c3      	b.n	8002e7c <HAL_TIM_IRQHandler+0xe6>

08002ef4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002ef4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef6:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <TIM_Base_SetConfig+0xa8>)
 8002ef8:	4290      	cmp	r0, r2
 8002efa:	d00e      	beq.n	8002f1a <TIM_Base_SetConfig+0x26>
 8002efc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f00:	d00b      	beq.n	8002f1a <TIM_Base_SetConfig+0x26>
 8002f02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f06:	4290      	cmp	r0, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x26>
 8002f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f0e:	4290      	cmp	r0, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x26>
 8002f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f16:	4290      	cmp	r0, r2
 8002f18:	d103      	bne.n	8002f22 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f1e:	684a      	ldr	r2, [r1, #4]
 8002f20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <TIM_Base_SetConfig+0xa8>)
 8002f24:	4290      	cmp	r0, r2
 8002f26:	d01a      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f32:	4290      	cmp	r0, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f3a:	4290      	cmp	r0, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f42:	4290      	cmp	r0, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f46:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002f4a:	4290      	cmp	r0, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f52:	4290      	cmp	r0, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x6a>
 8002f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f5a:	4290      	cmp	r0, r2
 8002f5c:	d103      	bne.n	8002f66 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	68ca      	ldr	r2, [r1, #12]
 8002f64:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6a:	694a      	ldr	r2, [r1, #20]
 8002f6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	688b      	ldr	r3, [r1, #8]
 8002f72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <TIM_Base_SetConfig+0xa8>)
 8002f7a:	4298      	cmp	r0, r3
 8002f7c:	d00a      	beq.n	8002f94 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f82:	6903      	ldr	r3, [r0, #16]
 8002f84:	f013 0f01 	tst.w	r3, #1
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f8a:	6903      	ldr	r3, [r0, #16]
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6103      	str	r3, [r0, #16]
}
 8002f92:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002f94:	690b      	ldr	r3, [r1, #16]
 8002f96:	6303      	str	r3, [r0, #48]	; 0x30
 8002f98:	e7f1      	b.n	8002f7e <TIM_Base_SetConfig+0x8a>
 8002f9a:	bf00      	nop
 8002f9c:	40010000 	.word	0x40010000

08002fa0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002fa0:	b340      	cbz	r0, 8002ff4 <HAL_TIM_Base_Init+0x54>
{
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002faa:	b1f3      	cbz	r3, 8002fea <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	f851 0b04 	ldr.w	r0, [r1], #4
 8002fb8:	f7ff ff9c 	bl	8002ef4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002fc6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002fca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002fce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fe6:	2000      	movs	r0, #0
}
 8002fe8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002fea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fee:	f7fe fcf9 	bl	80019e4 <HAL_TIM_Base_MspInit>
 8002ff2:	e7db      	b.n	8002fac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
}
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ffa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003000:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003004:	430a      	orrs	r2, r1
 8003006:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300a:	6082      	str	r2, [r0, #8]
}
 800300c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003012:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d078      	beq.n	800310c <HAL_TIM_ConfigClockSource+0xfa>
{
 800301a:	b510      	push	{r4, lr}
 800301c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800301e:	2301      	movs	r3, #1
 8003020:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	2302      	movs	r3, #2
 8003026:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800302a:	6802      	ldr	r2, [r0, #0]
 800302c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003036:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003038:	680b      	ldr	r3, [r1, #0]
 800303a:	2b60      	cmp	r3, #96	; 0x60
 800303c:	d04c      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xc6>
 800303e:	d829      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x82>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d054      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xdc>
 8003044:	d90c      	bls.n	8003060 <HAL_TIM_ConfigClockSource+0x4e>
 8003046:	2b50      	cmp	r3, #80	; 0x50
 8003048:	d122      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	68ca      	ldr	r2, [r1, #12]
 800304c:	6849      	ldr	r1, [r1, #4]
 800304e:	6800      	ldr	r0, [r0, #0]
 8003050:	f7ff fdfa 	bl	8002c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003054:	2150      	movs	r1, #80	; 0x50
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	f7ff fe1d 	bl	8002c96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2000      	movs	r0, #0
      break;
 800305e:	e005      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003060:	2b20      	cmp	r3, #32
 8003062:	d00d      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x6e>
 8003064:	d909      	bls.n	800307a <HAL_TIM_ConfigClockSource+0x68>
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d00a      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800306a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800306c:	2301      	movs	r3, #1
 800306e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003072:	2300      	movs	r3, #0
 8003074:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003078:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800307a:	b10b      	cbz	r3, 8003080 <HAL_TIM_ConfigClockSource+0x6e>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d105      	bne.n	800308c <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003080:	4619      	mov	r1, r3
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	f7ff fe07 	bl	8002c96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2000      	movs	r0, #0
      break;
 800308a:	e7ef      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800308c:	2001      	movs	r0, #1
 800308e:	e7ed      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
 8003090:	2001      	movs	r0, #1
 8003092:	e7eb      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	d034      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0xf2>
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d10c      	bne.n	80030ba <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	68cb      	ldr	r3, [r1, #12]
 80030a2:	684a      	ldr	r2, [r1, #4]
 80030a4:	6889      	ldr	r1, [r1, #8]
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	f7ff ffa6 	bl	8002ff8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	6893      	ldr	r3, [r2, #8]
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2000      	movs	r0, #0
      break;
 80030b8:	e7d8      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80030ba:	2b70      	cmp	r3, #112	; 0x70
 80030bc:	d124      	bne.n	8003108 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80030be:	68cb      	ldr	r3, [r1, #12]
 80030c0:	684a      	ldr	r2, [r1, #4]
 80030c2:	6889      	ldr	r1, [r1, #8]
 80030c4:	6800      	ldr	r0, [r0, #0]
 80030c6:	f7ff ff97 	bl	8002ff8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80030d2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2000      	movs	r0, #0
      break;
 80030d6:	e7c9      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d8:	68ca      	ldr	r2, [r1, #12]
 80030da:	6849      	ldr	r1, [r1, #4]
 80030dc:	6800      	ldr	r0, [r0, #0]
 80030de:	f7ff fdc6 	bl	8002c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e2:	2160      	movs	r1, #96	; 0x60
 80030e4:	6820      	ldr	r0, [r4, #0]
 80030e6:	f7ff fdd6 	bl	8002c96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2000      	movs	r0, #0
      break;
 80030ec:	e7be      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	68ca      	ldr	r2, [r1, #12]
 80030f0:	6849      	ldr	r1, [r1, #4]
 80030f2:	6800      	ldr	r0, [r0, #0]
 80030f4:	f7ff fda8 	bl	8002c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	f7ff fdcb 	bl	8002c96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2000      	movs	r0, #0
      break;
 8003102:	e7b3      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003104:	2000      	movs	r0, #0
 8003106:	e7b1      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003108:	2001      	movs	r0, #1
 800310a:	e7af      	b.n	800306c <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800310c:	2002      	movs	r0, #2
}
 800310e:	4770      	bx	lr

08003110 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003110:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d035      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003118:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800311a:	2301      	movs	r3, #1
 800311c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800312a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003130:	680a      	ldr	r2, [r1, #0]
 8003132:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003136:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	6803      	ldr	r3, [r0, #0]
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d00f      	beq.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003146:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800314e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800315e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003162:	4293      	cmp	r3, r2
 8003164:	d104      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003166:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800316a:	684a      	ldr	r2, [r1, #4]
 800316c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800316e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003170:	2301      	movs	r3, #1
 8003172:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003176:	2300      	movs	r3, #0
 8003178:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800317c:	4618      	mov	r0, r3
}
 800317e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003182:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003184:	2002      	movs	r0, #2
}
 8003186:	4770      	bx	lr
 8003188:	40010000 	.word	0x40010000

0800318c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800318c:	4770      	bx	lr

0800318e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800318e:	4770      	bx	lr

08003190 <gcvt>:
 8003190:	b530      	push	{r4, r5, lr}
 8003192:	2200      	movs	r2, #0
 8003194:	b085      	sub	sp, #20
 8003196:	460c      	mov	r4, r1
 8003198:	4605      	mov	r5, r0
 800319a:	2300      	movs	r3, #0
 800319c:	ec51 0b10 	vmov	r0, r1, d0
 80031a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80031a4:	f7fd fc9a 	bl	8000adc <__aeabi_dcmplt>
 80031a8:	ed9d 0b02 	vldr	d0, [sp, #8]
 80031ac:	4622      	mov	r2, r4
 80031ae:	b118      	cbz	r0, 80031b8 <gcvt+0x28>
 80031b0:	232d      	movs	r3, #45	; 0x2d
 80031b2:	f802 3b01 	strb.w	r3, [r2], #1
 80031b6:	3d01      	subs	r5, #1
 80031b8:	2300      	movs	r3, #0
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <gcvt+0x44>)
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4629      	mov	r1, r5
 80031c0:	2367      	movs	r3, #103	; 0x67
 80031c2:	6800      	ldr	r0, [r0, #0]
 80031c4:	f000 f9ac 	bl	8003520 <_gcvt>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	bf14      	ite	ne
 80031cc:	4620      	movne	r0, r4
 80031ce:	2000      	moveq	r0, #0
 80031d0:	b005      	add	sp, #20
 80031d2:	bd30      	pop	{r4, r5, pc}
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <__errno>:
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <__errno+0x8>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000000c 	.word	0x2000000c

080031e4 <__libc_init_array>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4d0d      	ldr	r5, [pc, #52]	; (800321c <__libc_init_array+0x38>)
 80031e8:	4c0d      	ldr	r4, [pc, #52]	; (8003220 <__libc_init_array+0x3c>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	2600      	movs	r6, #0
 80031f0:	42a6      	cmp	r6, r4
 80031f2:	d109      	bne.n	8003208 <__libc_init_array+0x24>
 80031f4:	4d0b      	ldr	r5, [pc, #44]	; (8003224 <__libc_init_array+0x40>)
 80031f6:	4c0c      	ldr	r4, [pc, #48]	; (8003228 <__libc_init_array+0x44>)
 80031f8:	f002 fb9c 	bl	8005934 <_init>
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	2600      	movs	r6, #0
 8003202:	42a6      	cmp	r6, r4
 8003204:	d105      	bne.n	8003212 <__libc_init_array+0x2e>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	f855 3b04 	ldr.w	r3, [r5], #4
 800320c:	4798      	blx	r3
 800320e:	3601      	adds	r6, #1
 8003210:	e7ee      	b.n	80031f0 <__libc_init_array+0xc>
 8003212:	f855 3b04 	ldr.w	r3, [r5], #4
 8003216:	4798      	blx	r3
 8003218:	3601      	adds	r6, #1
 800321a:	e7f2      	b.n	8003202 <__libc_init_array+0x1e>
 800321c:	08005cf0 	.word	0x08005cf0
 8003220:	08005cf0 	.word	0x08005cf0
 8003224:	08005cf0 	.word	0x08005cf0
 8003228:	08005cf4 	.word	0x08005cf4

0800322c <malloc>:
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <malloc+0xc>)
 800322e:	4601      	mov	r1, r0
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f000 b877 	b.w	8003324 <_malloc_r>
 8003236:	bf00      	nop
 8003238:	2000000c 	.word	0x2000000c

0800323c <memset>:
 800323c:	4402      	add	r2, r0
 800323e:	4603      	mov	r3, r0
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <memset+0xa>
 8003244:	4770      	bx	lr
 8003246:	f803 1b01 	strb.w	r1, [r3], #1
 800324a:	e7f9      	b.n	8003240 <memset+0x4>

0800324c <_free_r>:
 800324c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800324e:	2900      	cmp	r1, #0
 8003250:	d044      	beq.n	80032dc <_free_r+0x90>
 8003252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003256:	9001      	str	r0, [sp, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f1a1 0404 	sub.w	r4, r1, #4
 800325e:	bfb8      	it	lt
 8003260:	18e4      	addlt	r4, r4, r3
 8003262:	f000 fa1d 	bl	80036a0 <__malloc_lock>
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <_free_r+0x94>)
 8003268:	9801      	ldr	r0, [sp, #4]
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	b933      	cbnz	r3, 800327c <_free_r+0x30>
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	6014      	str	r4, [r2, #0]
 8003272:	b003      	add	sp, #12
 8003274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003278:	f000 ba18 	b.w	80036ac <__malloc_unlock>
 800327c:	42a3      	cmp	r3, r4
 800327e:	d908      	bls.n	8003292 <_free_r+0x46>
 8003280:	6825      	ldr	r5, [r4, #0]
 8003282:	1961      	adds	r1, r4, r5
 8003284:	428b      	cmp	r3, r1
 8003286:	bf01      	itttt	eq
 8003288:	6819      	ldreq	r1, [r3, #0]
 800328a:	685b      	ldreq	r3, [r3, #4]
 800328c:	1949      	addeq	r1, r1, r5
 800328e:	6021      	streq	r1, [r4, #0]
 8003290:	e7ed      	b.n	800326e <_free_r+0x22>
 8003292:	461a      	mov	r2, r3
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b10b      	cbz	r3, 800329c <_free_r+0x50>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d9fa      	bls.n	8003292 <_free_r+0x46>
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	1855      	adds	r5, r2, r1
 80032a0:	42a5      	cmp	r5, r4
 80032a2:	d10b      	bne.n	80032bc <_free_r+0x70>
 80032a4:	6824      	ldr	r4, [r4, #0]
 80032a6:	4421      	add	r1, r4
 80032a8:	1854      	adds	r4, r2, r1
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	d1e0      	bne.n	8003272 <_free_r+0x26>
 80032b0:	681c      	ldr	r4, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	6053      	str	r3, [r2, #4]
 80032b6:	4421      	add	r1, r4
 80032b8:	6011      	str	r1, [r2, #0]
 80032ba:	e7da      	b.n	8003272 <_free_r+0x26>
 80032bc:	d902      	bls.n	80032c4 <_free_r+0x78>
 80032be:	230c      	movs	r3, #12
 80032c0:	6003      	str	r3, [r0, #0]
 80032c2:	e7d6      	b.n	8003272 <_free_r+0x26>
 80032c4:	6825      	ldr	r5, [r4, #0]
 80032c6:	1961      	adds	r1, r4, r5
 80032c8:	428b      	cmp	r3, r1
 80032ca:	bf04      	itt	eq
 80032cc:	6819      	ldreq	r1, [r3, #0]
 80032ce:	685b      	ldreq	r3, [r3, #4]
 80032d0:	6063      	str	r3, [r4, #4]
 80032d2:	bf04      	itt	eq
 80032d4:	1949      	addeq	r1, r1, r5
 80032d6:	6021      	streq	r1, [r4, #0]
 80032d8:	6054      	str	r4, [r2, #4]
 80032da:	e7ca      	b.n	8003272 <_free_r+0x26>
 80032dc:	b003      	add	sp, #12
 80032de:	bd30      	pop	{r4, r5, pc}
 80032e0:	200002e8 	.word	0x200002e8

080032e4 <sbrk_aligned>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4e0e      	ldr	r6, [pc, #56]	; (8003320 <sbrk_aligned+0x3c>)
 80032e8:	460c      	mov	r4, r1
 80032ea:	6831      	ldr	r1, [r6, #0]
 80032ec:	4605      	mov	r5, r0
 80032ee:	b911      	cbnz	r1, 80032f6 <sbrk_aligned+0x12>
 80032f0:	f000 f88c 	bl	800340c <_sbrk_r>
 80032f4:	6030      	str	r0, [r6, #0]
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 f887 	bl	800340c <_sbrk_r>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	d00a      	beq.n	8003318 <sbrk_aligned+0x34>
 8003302:	1cc4      	adds	r4, r0, #3
 8003304:	f024 0403 	bic.w	r4, r4, #3
 8003308:	42a0      	cmp	r0, r4
 800330a:	d007      	beq.n	800331c <sbrk_aligned+0x38>
 800330c:	1a21      	subs	r1, r4, r0
 800330e:	4628      	mov	r0, r5
 8003310:	f000 f87c 	bl	800340c <_sbrk_r>
 8003314:	3001      	adds	r0, #1
 8003316:	d101      	bne.n	800331c <sbrk_aligned+0x38>
 8003318:	f04f 34ff 	mov.w	r4, #4294967295
 800331c:	4620      	mov	r0, r4
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	200002ec 	.word	0x200002ec

08003324 <_malloc_r>:
 8003324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003328:	1ccd      	adds	r5, r1, #3
 800332a:	f025 0503 	bic.w	r5, r5, #3
 800332e:	3508      	adds	r5, #8
 8003330:	2d0c      	cmp	r5, #12
 8003332:	bf38      	it	cc
 8003334:	250c      	movcc	r5, #12
 8003336:	2d00      	cmp	r5, #0
 8003338:	4607      	mov	r7, r0
 800333a:	db01      	blt.n	8003340 <_malloc_r+0x1c>
 800333c:	42a9      	cmp	r1, r5
 800333e:	d905      	bls.n	800334c <_malloc_r+0x28>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	2600      	movs	r6, #0
 8003346:	4630      	mov	r0, r6
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	4e2e      	ldr	r6, [pc, #184]	; (8003408 <_malloc_r+0xe4>)
 800334e:	f000 f9a7 	bl	80036a0 <__malloc_lock>
 8003352:	6833      	ldr	r3, [r6, #0]
 8003354:	461c      	mov	r4, r3
 8003356:	bb34      	cbnz	r4, 80033a6 <_malloc_r+0x82>
 8003358:	4629      	mov	r1, r5
 800335a:	4638      	mov	r0, r7
 800335c:	f7ff ffc2 	bl	80032e4 <sbrk_aligned>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	4604      	mov	r4, r0
 8003364:	d14d      	bne.n	8003402 <_malloc_r+0xde>
 8003366:	6834      	ldr	r4, [r6, #0]
 8003368:	4626      	mov	r6, r4
 800336a:	2e00      	cmp	r6, #0
 800336c:	d140      	bne.n	80033f0 <_malloc_r+0xcc>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	4631      	mov	r1, r6
 8003372:	4638      	mov	r0, r7
 8003374:	eb04 0803 	add.w	r8, r4, r3
 8003378:	f000 f848 	bl	800340c <_sbrk_r>
 800337c:	4580      	cmp	r8, r0
 800337e:	d13a      	bne.n	80033f6 <_malloc_r+0xd2>
 8003380:	6821      	ldr	r1, [r4, #0]
 8003382:	3503      	adds	r5, #3
 8003384:	1a6d      	subs	r5, r5, r1
 8003386:	f025 0503 	bic.w	r5, r5, #3
 800338a:	3508      	adds	r5, #8
 800338c:	2d0c      	cmp	r5, #12
 800338e:	bf38      	it	cc
 8003390:	250c      	movcc	r5, #12
 8003392:	4629      	mov	r1, r5
 8003394:	4638      	mov	r0, r7
 8003396:	f7ff ffa5 	bl	80032e4 <sbrk_aligned>
 800339a:	3001      	adds	r0, #1
 800339c:	d02b      	beq.n	80033f6 <_malloc_r+0xd2>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	442b      	add	r3, r5
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	e00e      	b.n	80033c4 <_malloc_r+0xa0>
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	1b52      	subs	r2, r2, r5
 80033aa:	d41e      	bmi.n	80033ea <_malloc_r+0xc6>
 80033ac:	2a0b      	cmp	r2, #11
 80033ae:	d916      	bls.n	80033de <_malloc_r+0xba>
 80033b0:	1961      	adds	r1, r4, r5
 80033b2:	42a3      	cmp	r3, r4
 80033b4:	6025      	str	r5, [r4, #0]
 80033b6:	bf18      	it	ne
 80033b8:	6059      	strne	r1, [r3, #4]
 80033ba:	6863      	ldr	r3, [r4, #4]
 80033bc:	bf08      	it	eq
 80033be:	6031      	streq	r1, [r6, #0]
 80033c0:	5162      	str	r2, [r4, r5]
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	4638      	mov	r0, r7
 80033c6:	f104 060b 	add.w	r6, r4, #11
 80033ca:	f000 f96f 	bl	80036ac <__malloc_unlock>
 80033ce:	f026 0607 	bic.w	r6, r6, #7
 80033d2:	1d23      	adds	r3, r4, #4
 80033d4:	1af2      	subs	r2, r6, r3
 80033d6:	d0b6      	beq.n	8003346 <_malloc_r+0x22>
 80033d8:	1b9b      	subs	r3, r3, r6
 80033da:	50a3      	str	r3, [r4, r2]
 80033dc:	e7b3      	b.n	8003346 <_malloc_r+0x22>
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	bf0c      	ite	eq
 80033e4:	6032      	streq	r2, [r6, #0]
 80033e6:	605a      	strne	r2, [r3, #4]
 80033e8:	e7ec      	b.n	80033c4 <_malloc_r+0xa0>
 80033ea:	4623      	mov	r3, r4
 80033ec:	6864      	ldr	r4, [r4, #4]
 80033ee:	e7b2      	b.n	8003356 <_malloc_r+0x32>
 80033f0:	4634      	mov	r4, r6
 80033f2:	6876      	ldr	r6, [r6, #4]
 80033f4:	e7b9      	b.n	800336a <_malloc_r+0x46>
 80033f6:	230c      	movs	r3, #12
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4638      	mov	r0, r7
 80033fc:	f000 f956 	bl	80036ac <__malloc_unlock>
 8003400:	e7a1      	b.n	8003346 <_malloc_r+0x22>
 8003402:	6025      	str	r5, [r4, #0]
 8003404:	e7de      	b.n	80033c4 <_malloc_r+0xa0>
 8003406:	bf00      	nop
 8003408:	200002e8 	.word	0x200002e8

0800340c <_sbrk_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4d06      	ldr	r5, [pc, #24]	; (8003428 <_sbrk_r+0x1c>)
 8003410:	2300      	movs	r3, #0
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	f7fe fc24 	bl	8001c64 <_sbrk>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_sbrk_r+0x1a>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_sbrk_r+0x1a>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200002f0 	.word	0x200002f0

0800342c <print_e>:
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	ec43 2b10 	vmov	d0, r2, r3
 8003434:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003436:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800343a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800343c:	ab04      	add	r3, sp, #16
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	ab03      	add	r3, sp, #12
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	1c62      	adds	r2, r4, #1
 8003446:	ab05      	add	r3, sp, #20
 8003448:	460f      	mov	r7, r1
 800344a:	2102      	movs	r1, #2
 800344c:	f000 fda0 	bl	8003f90 <_dtoa_r>
 8003450:	9a05      	ldr	r2, [sp, #20]
 8003452:	f242 730f 	movw	r3, #9999	; 0x270f
 8003456:	429a      	cmp	r2, r3
 8003458:	d105      	bne.n	8003466 <print_e+0x3a>
 800345a:	4601      	mov	r1, r0
 800345c:	4638      	mov	r0, r7
 800345e:	f000 fce3 	bl	8003e28 <strcpy>
 8003462:	b007      	add	sp, #28
 8003464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003466:	463b      	mov	r3, r7
 8003468:	7801      	ldrb	r1, [r0, #0]
 800346a:	f803 1b01 	strb.w	r1, [r3], #1
 800346e:	2c00      	cmp	r4, #0
 8003470:	bfc8      	it	gt
 8003472:	2501      	movgt	r5, #1
 8003474:	212e      	movs	r1, #46	; 0x2e
 8003476:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800347a:	b10f      	cbz	r7, 8003480 <print_e+0x54>
 800347c:	2c00      	cmp	r4, #0
 800347e:	dc37      	bgt.n	80034f0 <print_e+0xc4>
 8003480:	2e67      	cmp	r6, #103	; 0x67
 8003482:	d046      	beq.n	8003512 <print_e+0xe6>
 8003484:	2e47      	cmp	r6, #71	; 0x47
 8003486:	d046      	beq.n	8003516 <print_e+0xea>
 8003488:	212e      	movs	r1, #46	; 0x2e
 800348a:	2030      	movs	r0, #48	; 0x30
 800348c:	2c00      	cmp	r4, #0
 800348e:	dc38      	bgt.n	8003502 <print_e+0xd6>
 8003490:	1e51      	subs	r1, r2, #1
 8003492:	2900      	cmp	r1, #0
 8003494:	bfb8      	it	lt
 8003496:	f1c2 0201 	rsblt	r2, r2, #1
 800349a:	4618      	mov	r0, r3
 800349c:	9105      	str	r1, [sp, #20]
 800349e:	bfac      	ite	ge
 80034a0:	222b      	movge	r2, #43	; 0x2b
 80034a2:	9205      	strlt	r2, [sp, #20]
 80034a4:	f800 6b02 	strb.w	r6, [r0], #2
 80034a8:	bfa8      	it	ge
 80034aa:	705a      	strbge	r2, [r3, #1]
 80034ac:	9a05      	ldr	r2, [sp, #20]
 80034ae:	bfbc      	itt	lt
 80034b0:	212d      	movlt	r1, #45	; 0x2d
 80034b2:	7059      	strblt	r1, [r3, #1]
 80034b4:	2a63      	cmp	r2, #99	; 0x63
 80034b6:	dd0b      	ble.n	80034d0 <print_e+0xa4>
 80034b8:	2164      	movs	r1, #100	; 0x64
 80034ba:	fb92 f1f1 	sdiv	r1, r2, r1
 80034be:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80034c2:	1cd8      	adds	r0, r3, #3
 80034c4:	709c      	strb	r4, [r3, #2]
 80034c6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80034ca:	fb03 2201 	mla	r2, r3, r1, r2
 80034ce:	9205      	str	r2, [sp, #20]
 80034d0:	9b05      	ldr	r3, [sp, #20]
 80034d2:	220a      	movs	r2, #10
 80034d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80034d8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80034dc:	7001      	strb	r1, [r0, #0]
 80034de:	f06f 0109 	mvn.w	r1, #9
 80034e2:	fb01 3302 	mla	r3, r1, r2, r3
 80034e6:	3330      	adds	r3, #48	; 0x30
 80034e8:	7043      	strb	r3, [r0, #1]
 80034ea:	2300      	movs	r3, #0
 80034ec:	7083      	strb	r3, [r0, #2]
 80034ee:	e7b8      	b.n	8003462 <print_e+0x36>
 80034f0:	b10d      	cbz	r5, 80034f6 <print_e+0xca>
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	7805      	ldrb	r5, [r0, #0]
 80034f8:	f803 5b01 	strb.w	r5, [r3], #1
 80034fc:	3c01      	subs	r4, #1
 80034fe:	2500      	movs	r5, #0
 8003500:	e7b9      	b.n	8003476 <print_e+0x4a>
 8003502:	b10d      	cbz	r5, 8003508 <print_e+0xdc>
 8003504:	f803 1b01 	strb.w	r1, [r3], #1
 8003508:	f803 0b01 	strb.w	r0, [r3], #1
 800350c:	3c01      	subs	r4, #1
 800350e:	2500      	movs	r5, #0
 8003510:	e7bc      	b.n	800348c <print_e+0x60>
 8003512:	2665      	movs	r6, #101	; 0x65
 8003514:	e7bc      	b.n	8003490 <print_e+0x64>
 8003516:	2645      	movs	r6, #69	; 0x45
 8003518:	e7ba      	b.n	8003490 <print_e+0x64>
 800351a:	0000      	movs	r0, r0
 800351c:	0000      	movs	r0, r0
	...

08003520 <_gcvt>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	ec55 4b10 	vmov	r4, r5, d0
 8003528:	b088      	sub	sp, #32
 800352a:	4681      	mov	r9, r0
 800352c:	4688      	mov	r8, r1
 800352e:	4616      	mov	r6, r2
 8003530:	469a      	mov	sl, r3
 8003532:	ee10 0a10 	vmov	r0, s0
 8003536:	2200      	movs	r2, #0
 8003538:	2300      	movs	r3, #0
 800353a:	4629      	mov	r1, r5
 800353c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800353e:	f7fd facd 	bl	8000adc <__aeabi_dcmplt>
 8003542:	b110      	cbz	r0, 800354a <_gcvt+0x2a>
 8003544:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003548:	461d      	mov	r5, r3
 800354a:	2200      	movs	r2, #0
 800354c:	2300      	movs	r3, #0
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fd fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003556:	b138      	cbz	r0, 8003568 <_gcvt+0x48>
 8003558:	2330      	movs	r3, #48	; 0x30
 800355a:	7033      	strb	r3, [r6, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	7073      	strb	r3, [r6, #1]
 8003560:	4630      	mov	r0, r6
 8003562:	b008      	add	sp, #32
 8003564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003568:	a34b      	add	r3, pc, #300	; (adr r3, 8003698 <_gcvt+0x178>)
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	4620      	mov	r0, r4
 8003570:	4629      	mov	r1, r5
 8003572:	f7fd fabd 	bl	8000af0 <__aeabi_dcmple>
 8003576:	b158      	cbz	r0, 8003590 <_gcvt+0x70>
 8003578:	f108 31ff 	add.w	r1, r8, #4294967295
 800357c:	9100      	str	r1, [sp, #0]
 800357e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8003582:	4622      	mov	r2, r4
 8003584:	462b      	mov	r3, r5
 8003586:	4631      	mov	r1, r6
 8003588:	4648      	mov	r0, r9
 800358a:	f7ff ff4f 	bl	800342c <print_e>
 800358e:	e7e7      	b.n	8003560 <_gcvt+0x40>
 8003590:	4640      	mov	r0, r8
 8003592:	f000 fc15 	bl	8003dc0 <_mprec_log10>
 8003596:	4622      	mov	r2, r4
 8003598:	ec51 0b10 	vmov	r0, r1, d0
 800359c:	462b      	mov	r3, r5
 800359e:	f7fd faa7 	bl	8000af0 <__aeabi_dcmple>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d1e8      	bne.n	8003578 <_gcvt+0x58>
 80035a6:	ab07      	add	r3, sp, #28
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	ab06      	add	r3, sp, #24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4642      	mov	r2, r8
 80035b0:	ab05      	add	r3, sp, #20
 80035b2:	ec45 4b10 	vmov	d0, r4, r5
 80035b6:	2102      	movs	r1, #2
 80035b8:	4648      	mov	r0, r9
 80035ba:	f000 fce9 	bl	8003f90 <_dtoa_r>
 80035be:	9a05      	ldr	r2, [sp, #20]
 80035c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d00e      	beq.n	80035e6 <_gcvt+0xc6>
 80035c8:	4633      	mov	r3, r6
 80035ca:	44b0      	add	r8, r6
 80035cc:	4605      	mov	r5, r0
 80035ce:	f810 1b01 	ldrb.w	r1, [r0], #1
 80035d2:	9c05      	ldr	r4, [sp, #20]
 80035d4:	eba8 0203 	sub.w	r2, r8, r3
 80035d8:	b109      	cbz	r1, 80035de <_gcvt+0xbe>
 80035da:	2c00      	cmp	r4, #0
 80035dc:	dc08      	bgt.n	80035f0 <_gcvt+0xd0>
 80035de:	2100      	movs	r1, #0
 80035e0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80035e4:	e00d      	b.n	8003602 <_gcvt+0xe2>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4630      	mov	r0, r6
 80035ea:	f000 fc1d 	bl	8003e28 <strcpy>
 80035ee:	e7b7      	b.n	8003560 <_gcvt+0x40>
 80035f0:	3c01      	subs	r4, #1
 80035f2:	f803 1b01 	strb.w	r1, [r3], #1
 80035f6:	9405      	str	r4, [sp, #20]
 80035f8:	e7e8      	b.n	80035cc <_gcvt+0xac>
 80035fa:	f803 cb01 	strb.w	ip, [r3], #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	2101      	movs	r1, #1
 8003602:	2c00      	cmp	r4, #0
 8003604:	4620      	mov	r0, r4
 8003606:	dc2a      	bgt.n	800365e <_gcvt+0x13e>
 8003608:	b101      	cbz	r1, 800360c <_gcvt+0xec>
 800360a:	9405      	str	r4, [sp, #20]
 800360c:	b90f      	cbnz	r7, 8003612 <_gcvt+0xf2>
 800360e:	7829      	ldrb	r1, [r5, #0]
 8003610:	b311      	cbz	r1, 8003658 <_gcvt+0x138>
 8003612:	42b3      	cmp	r3, r6
 8003614:	bf04      	itt	eq
 8003616:	2130      	moveq	r1, #48	; 0x30
 8003618:	f803 1b01 	strbeq.w	r1, [r3], #1
 800361c:	212e      	movs	r1, #46	; 0x2e
 800361e:	7019      	strb	r1, [r3, #0]
 8003620:	9905      	ldr	r1, [sp, #20]
 8003622:	4618      	mov	r0, r3
 8003624:	2400      	movs	r4, #0
 8003626:	eba1 0c03 	sub.w	ip, r1, r3
 800362a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800362e:	eb1c 0f00 	cmn.w	ip, r0
 8003632:	d41c      	bmi.n	800366e <_gcvt+0x14e>
 8003634:	2900      	cmp	r1, #0
 8003636:	f1c1 0000 	rsb	r0, r1, #0
 800363a:	bfc8      	it	gt
 800363c:	2000      	movgt	r0, #0
 800363e:	f100 0c01 	add.w	ip, r0, #1
 8003642:	4463      	add	r3, ip
 8003644:	4401      	add	r1, r0
 8003646:	b104      	cbz	r4, 800364a <_gcvt+0x12a>
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	1e69      	subs	r1, r5, #1
 800364c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003650:	b108      	cbz	r0, 8003656 <_gcvt+0x136>
 8003652:	2a00      	cmp	r2, #0
 8003654:	dc0f      	bgt.n	8003676 <_gcvt+0x156>
 8003656:	b9df      	cbnz	r7, 8003690 <_gcvt+0x170>
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e780      	b.n	8003560 <_gcvt+0x40>
 800365e:	2a00      	cmp	r2, #0
 8003660:	f104 34ff 	add.w	r4, r4, #4294967295
 8003664:	dcc9      	bgt.n	80035fa <_gcvt+0xda>
 8003666:	2900      	cmp	r1, #0
 8003668:	d0d0      	beq.n	800360c <_gcvt+0xec>
 800366a:	9005      	str	r0, [sp, #20]
 800366c:	e7ce      	b.n	800360c <_gcvt+0xec>
 800366e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8003672:	2401      	movs	r4, #1
 8003674:	e7db      	b.n	800362e <_gcvt+0x10e>
 8003676:	f803 0b01 	strb.w	r0, [r3], #1
 800367a:	3a01      	subs	r2, #1
 800367c:	e7e6      	b.n	800364c <_gcvt+0x12c>
 800367e:	f801 5b01 	strb.w	r5, [r1], #1
 8003682:	1a60      	subs	r0, r4, r1
 8003684:	2800      	cmp	r0, #0
 8003686:	dcfa      	bgt.n	800367e <_gcvt+0x15e>
 8003688:	2a00      	cmp	r2, #0
 800368a:	bfa8      	it	ge
 800368c:	189b      	addge	r3, r3, r2
 800368e:	e7e3      	b.n	8003658 <_gcvt+0x138>
 8003690:	4619      	mov	r1, r3
 8003692:	189c      	adds	r4, r3, r2
 8003694:	2530      	movs	r5, #48	; 0x30
 8003696:	e7f4      	b.n	8003682 <_gcvt+0x162>
 8003698:	eb1c432d 	.word	0xeb1c432d
 800369c:	3f1a36e2 	.word	0x3f1a36e2

080036a0 <__malloc_lock>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__malloc_lock+0x8>)
 80036a2:	f001 ba76 	b.w	8004b92 <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	200002f4 	.word	0x200002f4

080036ac <__malloc_unlock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__malloc_unlock+0x8>)
 80036ae:	f001 ba71 	b.w	8004b94 <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	200002f4 	.word	0x200002f4

080036b8 <_Balloc>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80036bc:	4604      	mov	r4, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	b976      	cbnz	r6, 80036e0 <_Balloc+0x28>
 80036c2:	2010      	movs	r0, #16
 80036c4:	f7ff fdb2 	bl	800322c <malloc>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6260      	str	r0, [r4, #36]	; 0x24
 80036cc:	b920      	cbnz	r0, 80036d8 <_Balloc+0x20>
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <_Balloc+0x78>)
 80036d0:	4818      	ldr	r0, [pc, #96]	; (8003734 <_Balloc+0x7c>)
 80036d2:	2166      	movs	r1, #102	; 0x66
 80036d4:	f000 fbb0 	bl	8003e38 <__assert_func>
 80036d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80036dc:	6006      	str	r6, [r0, #0]
 80036de:	60c6      	str	r6, [r0, #12]
 80036e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80036e2:	68f3      	ldr	r3, [r6, #12]
 80036e4:	b183      	cbz	r3, 8003708 <_Balloc+0x50>
 80036e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80036ee:	b9b8      	cbnz	r0, 8003720 <_Balloc+0x68>
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f605 	lsl.w	r6, r1, r5
 80036f6:	1d72      	adds	r2, r6, #5
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fb7e 	bl	8003dfc <_calloc_r>
 8003700:	b160      	cbz	r0, 800371c <_Balloc+0x64>
 8003702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003706:	e00e      	b.n	8003726 <_Balloc+0x6e>
 8003708:	2221      	movs	r2, #33	; 0x21
 800370a:	2104      	movs	r1, #4
 800370c:	4620      	mov	r0, r4
 800370e:	f000 fb75 	bl	8003dfc <_calloc_r>
 8003712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003714:	60f0      	str	r0, [r6, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e4      	bne.n	80036e6 <_Balloc+0x2e>
 800371c:	2000      	movs	r0, #0
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	6802      	ldr	r2, [r0, #0]
 8003722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003726:	2300      	movs	r3, #0
 8003728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800372c:	e7f7      	b.n	800371e <_Balloc+0x66>
 800372e:	bf00      	nop
 8003730:	08005a28 	.word	0x08005a28
 8003734:	08005a3f 	.word	0x08005a3f

08003738 <_Bfree>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800373c:	4605      	mov	r5, r0
 800373e:	460c      	mov	r4, r1
 8003740:	b976      	cbnz	r6, 8003760 <_Bfree+0x28>
 8003742:	2010      	movs	r0, #16
 8003744:	f7ff fd72 	bl	800322c <malloc>
 8003748:	4602      	mov	r2, r0
 800374a:	6268      	str	r0, [r5, #36]	; 0x24
 800374c:	b920      	cbnz	r0, 8003758 <_Bfree+0x20>
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <_Bfree+0x3c>)
 8003750:	4809      	ldr	r0, [pc, #36]	; (8003778 <_Bfree+0x40>)
 8003752:	218a      	movs	r1, #138	; 0x8a
 8003754:	f000 fb70 	bl	8003e38 <__assert_func>
 8003758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800375c:	6006      	str	r6, [r0, #0]
 800375e:	60c6      	str	r6, [r0, #12]
 8003760:	b13c      	cbz	r4, 8003772 <_Bfree+0x3a>
 8003762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003764:	6862      	ldr	r2, [r4, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800376c:	6021      	str	r1, [r4, #0]
 800376e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	08005a28 	.word	0x08005a28
 8003778:	08005a3f 	.word	0x08005a3f

0800377c <__multadd>:
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	690d      	ldr	r5, [r1, #16]
 8003782:	4607      	mov	r7, r0
 8003784:	460c      	mov	r4, r1
 8003786:	461e      	mov	r6, r3
 8003788:	f101 0c14 	add.w	ip, r1, #20
 800378c:	2000      	movs	r0, #0
 800378e:	f8dc 3000 	ldr.w	r3, [ip]
 8003792:	b299      	uxth	r1, r3
 8003794:	fb02 6101 	mla	r1, r2, r1, r6
 8003798:	0c1e      	lsrs	r6, r3, #16
 800379a:	0c0b      	lsrs	r3, r1, #16
 800379c:	fb02 3306 	mla	r3, r2, r6, r3
 80037a0:	b289      	uxth	r1, r1
 80037a2:	3001      	adds	r0, #1
 80037a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80037a8:	4285      	cmp	r5, r0
 80037aa:	f84c 1b04 	str.w	r1, [ip], #4
 80037ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80037b2:	dcec      	bgt.n	800378e <__multadd+0x12>
 80037b4:	b30e      	cbz	r6, 80037fa <__multadd+0x7e>
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	42ab      	cmp	r3, r5
 80037ba:	dc19      	bgt.n	80037f0 <__multadd+0x74>
 80037bc:	6861      	ldr	r1, [r4, #4]
 80037be:	4638      	mov	r0, r7
 80037c0:	3101      	adds	r1, #1
 80037c2:	f7ff ff79 	bl	80036b8 <_Balloc>
 80037c6:	4680      	mov	r8, r0
 80037c8:	b928      	cbnz	r0, 80037d6 <__multadd+0x5a>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__multadd+0x84>)
 80037ce:	480d      	ldr	r0, [pc, #52]	; (8003804 <__multadd+0x88>)
 80037d0:	21b5      	movs	r1, #181	; 0xb5
 80037d2:	f000 fb31 	bl	8003e38 <__assert_func>
 80037d6:	6922      	ldr	r2, [r4, #16]
 80037d8:	3202      	adds	r2, #2
 80037da:	f104 010c 	add.w	r1, r4, #12
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	300c      	adds	r0, #12
 80037e2:	f001 f9d8 	bl	8004b96 <memcpy>
 80037e6:	4621      	mov	r1, r4
 80037e8:	4638      	mov	r0, r7
 80037ea:	f7ff ffa5 	bl	8003738 <_Bfree>
 80037ee:	4644      	mov	r4, r8
 80037f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037f4:	3501      	adds	r5, #1
 80037f6:	615e      	str	r6, [r3, #20]
 80037f8:	6125      	str	r5, [r4, #16]
 80037fa:	4620      	mov	r0, r4
 80037fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003800:	08005a9b 	.word	0x08005a9b
 8003804:	08005a3f 	.word	0x08005a3f

08003808 <__hi0bits>:
 8003808:	0c03      	lsrs	r3, r0, #16
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	b9d3      	cbnz	r3, 8003844 <__hi0bits+0x3c>
 800380e:	0400      	lsls	r0, r0, #16
 8003810:	2310      	movs	r3, #16
 8003812:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003816:	bf04      	itt	eq
 8003818:	0200      	lsleq	r0, r0, #8
 800381a:	3308      	addeq	r3, #8
 800381c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003820:	bf04      	itt	eq
 8003822:	0100      	lsleq	r0, r0, #4
 8003824:	3304      	addeq	r3, #4
 8003826:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800382a:	bf04      	itt	eq
 800382c:	0080      	lsleq	r0, r0, #2
 800382e:	3302      	addeq	r3, #2
 8003830:	2800      	cmp	r0, #0
 8003832:	db05      	blt.n	8003840 <__hi0bits+0x38>
 8003834:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003838:	f103 0301 	add.w	r3, r3, #1
 800383c:	bf08      	it	eq
 800383e:	2320      	moveq	r3, #32
 8003840:	4618      	mov	r0, r3
 8003842:	4770      	bx	lr
 8003844:	2300      	movs	r3, #0
 8003846:	e7e4      	b.n	8003812 <__hi0bits+0xa>

08003848 <__lo0bits>:
 8003848:	6803      	ldr	r3, [r0, #0]
 800384a:	f013 0207 	ands.w	r2, r3, #7
 800384e:	4601      	mov	r1, r0
 8003850:	d00b      	beq.n	800386a <__lo0bits+0x22>
 8003852:	07da      	lsls	r2, r3, #31
 8003854:	d423      	bmi.n	800389e <__lo0bits+0x56>
 8003856:	0798      	lsls	r0, r3, #30
 8003858:	bf49      	itett	mi
 800385a:	085b      	lsrmi	r3, r3, #1
 800385c:	089b      	lsrpl	r3, r3, #2
 800385e:	2001      	movmi	r0, #1
 8003860:	600b      	strmi	r3, [r1, #0]
 8003862:	bf5c      	itt	pl
 8003864:	600b      	strpl	r3, [r1, #0]
 8003866:	2002      	movpl	r0, #2
 8003868:	4770      	bx	lr
 800386a:	b298      	uxth	r0, r3
 800386c:	b9a8      	cbnz	r0, 800389a <__lo0bits+0x52>
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	2010      	movs	r0, #16
 8003872:	b2da      	uxtb	r2, r3
 8003874:	b90a      	cbnz	r2, 800387a <__lo0bits+0x32>
 8003876:	3008      	adds	r0, #8
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	071a      	lsls	r2, r3, #28
 800387c:	bf04      	itt	eq
 800387e:	091b      	lsreq	r3, r3, #4
 8003880:	3004      	addeq	r0, #4
 8003882:	079a      	lsls	r2, r3, #30
 8003884:	bf04      	itt	eq
 8003886:	089b      	lsreq	r3, r3, #2
 8003888:	3002      	addeq	r0, #2
 800388a:	07da      	lsls	r2, r3, #31
 800388c:	d403      	bmi.n	8003896 <__lo0bits+0x4e>
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	f100 0001 	add.w	r0, r0, #1
 8003894:	d005      	beq.n	80038a2 <__lo0bits+0x5a>
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	4770      	bx	lr
 800389a:	4610      	mov	r0, r2
 800389c:	e7e9      	b.n	8003872 <__lo0bits+0x2a>
 800389e:	2000      	movs	r0, #0
 80038a0:	4770      	bx	lr
 80038a2:	2020      	movs	r0, #32
 80038a4:	4770      	bx	lr
	...

080038a8 <__i2b>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	460c      	mov	r4, r1
 80038ac:	2101      	movs	r1, #1
 80038ae:	f7ff ff03 	bl	80036b8 <_Balloc>
 80038b2:	4602      	mov	r2, r0
 80038b4:	b928      	cbnz	r0, 80038c2 <__i2b+0x1a>
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <__i2b+0x24>)
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <__i2b+0x28>)
 80038ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80038be:	f000 fabb 	bl	8003e38 <__assert_func>
 80038c2:	2301      	movs	r3, #1
 80038c4:	6144      	str	r4, [r0, #20]
 80038c6:	6103      	str	r3, [r0, #16]
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	bf00      	nop
 80038cc:	08005a9b 	.word	0x08005a9b
 80038d0:	08005a3f 	.word	0x08005a3f

080038d4 <__multiply>:
 80038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d8:	4691      	mov	r9, r2
 80038da:	690a      	ldr	r2, [r1, #16]
 80038dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	bfb8      	it	lt
 80038e4:	460b      	movlt	r3, r1
 80038e6:	460c      	mov	r4, r1
 80038e8:	bfbc      	itt	lt
 80038ea:	464c      	movlt	r4, r9
 80038ec:	4699      	movlt	r9, r3
 80038ee:	6927      	ldr	r7, [r4, #16]
 80038f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	6861      	ldr	r1, [r4, #4]
 80038f8:	eb07 060a 	add.w	r6, r7, sl
 80038fc:	42b3      	cmp	r3, r6
 80038fe:	b085      	sub	sp, #20
 8003900:	bfb8      	it	lt
 8003902:	3101      	addlt	r1, #1
 8003904:	f7ff fed8 	bl	80036b8 <_Balloc>
 8003908:	b930      	cbnz	r0, 8003918 <__multiply+0x44>
 800390a:	4602      	mov	r2, r0
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <__multiply+0x14c>)
 800390e:	4845      	ldr	r0, [pc, #276]	; (8003a24 <__multiply+0x150>)
 8003910:	f240 115d 	movw	r1, #349	; 0x15d
 8003914:	f000 fa90 	bl	8003e38 <__assert_func>
 8003918:	f100 0514 	add.w	r5, r0, #20
 800391c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003920:	462b      	mov	r3, r5
 8003922:	2200      	movs	r2, #0
 8003924:	4543      	cmp	r3, r8
 8003926:	d321      	bcc.n	800396c <__multiply+0x98>
 8003928:	f104 0314 	add.w	r3, r4, #20
 800392c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003930:	f109 0314 	add.w	r3, r9, #20
 8003934:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003938:	9202      	str	r2, [sp, #8]
 800393a:	1b3a      	subs	r2, r7, r4
 800393c:	3a15      	subs	r2, #21
 800393e:	f022 0203 	bic.w	r2, r2, #3
 8003942:	3204      	adds	r2, #4
 8003944:	f104 0115 	add.w	r1, r4, #21
 8003948:	428f      	cmp	r7, r1
 800394a:	bf38      	it	cc
 800394c:	2204      	movcc	r2, #4
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	9a02      	ldr	r2, [sp, #8]
 8003952:	9303      	str	r3, [sp, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d80c      	bhi.n	8003972 <__multiply+0x9e>
 8003958:	2e00      	cmp	r6, #0
 800395a:	dd03      	ble.n	8003964 <__multiply+0x90>
 800395c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05a      	beq.n	8003a1a <__multiply+0x146>
 8003964:	6106      	str	r6, [r0, #16]
 8003966:	b005      	add	sp, #20
 8003968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396c:	f843 2b04 	str.w	r2, [r3], #4
 8003970:	e7d8      	b.n	8003924 <__multiply+0x50>
 8003972:	f8b3 a000 	ldrh.w	sl, [r3]
 8003976:	f1ba 0f00 	cmp.w	sl, #0
 800397a:	d024      	beq.n	80039c6 <__multiply+0xf2>
 800397c:	f104 0e14 	add.w	lr, r4, #20
 8003980:	46a9      	mov	r9, r5
 8003982:	f04f 0c00 	mov.w	ip, #0
 8003986:	f85e 2b04 	ldr.w	r2, [lr], #4
 800398a:	f8d9 1000 	ldr.w	r1, [r9]
 800398e:	fa1f fb82 	uxth.w	fp, r2
 8003992:	b289      	uxth	r1, r1
 8003994:	fb0a 110b 	mla	r1, sl, fp, r1
 8003998:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800399c:	f8d9 2000 	ldr.w	r2, [r9]
 80039a0:	4461      	add	r1, ip
 80039a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80039a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80039aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80039ae:	b289      	uxth	r1, r1
 80039b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80039b4:	4577      	cmp	r7, lr
 80039b6:	f849 1b04 	str.w	r1, [r9], #4
 80039ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80039be:	d8e2      	bhi.n	8003986 <__multiply+0xb2>
 80039c0:	9a01      	ldr	r2, [sp, #4]
 80039c2:	f845 c002 	str.w	ip, [r5, r2]
 80039c6:	9a03      	ldr	r2, [sp, #12]
 80039c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80039cc:	3304      	adds	r3, #4
 80039ce:	f1b9 0f00 	cmp.w	r9, #0
 80039d2:	d020      	beq.n	8003a16 <__multiply+0x142>
 80039d4:	6829      	ldr	r1, [r5, #0]
 80039d6:	f104 0c14 	add.w	ip, r4, #20
 80039da:	46ae      	mov	lr, r5
 80039dc:	f04f 0a00 	mov.w	sl, #0
 80039e0:	f8bc b000 	ldrh.w	fp, [ip]
 80039e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80039e8:	fb09 220b 	mla	r2, r9, fp, r2
 80039ec:	4492      	add	sl, r2
 80039ee:	b289      	uxth	r1, r1
 80039f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80039f4:	f84e 1b04 	str.w	r1, [lr], #4
 80039f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80039fc:	f8be 1000 	ldrh.w	r1, [lr]
 8003a00:	0c12      	lsrs	r2, r2, #16
 8003a02:	fb09 1102 	mla	r1, r9, r2, r1
 8003a06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003a0a:	4567      	cmp	r7, ip
 8003a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003a10:	d8e6      	bhi.n	80039e0 <__multiply+0x10c>
 8003a12:	9a01      	ldr	r2, [sp, #4]
 8003a14:	50a9      	str	r1, [r5, r2]
 8003a16:	3504      	adds	r5, #4
 8003a18:	e79a      	b.n	8003950 <__multiply+0x7c>
 8003a1a:	3e01      	subs	r6, #1
 8003a1c:	e79c      	b.n	8003958 <__multiply+0x84>
 8003a1e:	bf00      	nop
 8003a20:	08005a9b 	.word	0x08005a9b
 8003a24:	08005a3f 	.word	0x08005a3f

08003a28 <__pow5mult>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	f012 0203 	ands.w	r2, r2, #3
 8003a32:	4606      	mov	r6, r0
 8003a34:	460f      	mov	r7, r1
 8003a36:	d007      	beq.n	8003a48 <__pow5mult+0x20>
 8003a38:	4c25      	ldr	r4, [pc, #148]	; (8003ad0 <__pow5mult+0xa8>)
 8003a3a:	3a01      	subs	r2, #1
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a42:	f7ff fe9b 	bl	800377c <__multadd>
 8003a46:	4607      	mov	r7, r0
 8003a48:	10ad      	asrs	r5, r5, #2
 8003a4a:	d03d      	beq.n	8003ac8 <__pow5mult+0xa0>
 8003a4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a4e:	b97c      	cbnz	r4, 8003a70 <__pow5mult+0x48>
 8003a50:	2010      	movs	r0, #16
 8003a52:	f7ff fbeb 	bl	800322c <malloc>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6270      	str	r0, [r6, #36]	; 0x24
 8003a5a:	b928      	cbnz	r0, 8003a68 <__pow5mult+0x40>
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <__pow5mult+0xac>)
 8003a5e:	481e      	ldr	r0, [pc, #120]	; (8003ad8 <__pow5mult+0xb0>)
 8003a60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003a64:	f000 f9e8 	bl	8003e38 <__assert_func>
 8003a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a6c:	6004      	str	r4, [r0, #0]
 8003a6e:	60c4      	str	r4, [r0, #12]
 8003a70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a78:	b94c      	cbnz	r4, 8003a8e <__pow5mult+0x66>
 8003a7a:	f240 2171 	movw	r1, #625	; 0x271
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7ff ff12 	bl	80038a8 <__i2b>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	6003      	str	r3, [r0, #0]
 8003a8e:	f04f 0900 	mov.w	r9, #0
 8003a92:	07eb      	lsls	r3, r5, #31
 8003a94:	d50a      	bpl.n	8003aac <__pow5mult+0x84>
 8003a96:	4639      	mov	r1, r7
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7ff ff1a 	bl	80038d4 <__multiply>
 8003aa0:	4639      	mov	r1, r7
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	f7ff fe47 	bl	8003738 <_Bfree>
 8003aaa:	4647      	mov	r7, r8
 8003aac:	106d      	asrs	r5, r5, #1
 8003aae:	d00b      	beq.n	8003ac8 <__pow5mult+0xa0>
 8003ab0:	6820      	ldr	r0, [r4, #0]
 8003ab2:	b938      	cbnz	r0, 8003ac4 <__pow5mult+0x9c>
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7ff ff0b 	bl	80038d4 <__multiply>
 8003abe:	6020      	str	r0, [r4, #0]
 8003ac0:	f8c0 9000 	str.w	r9, [r0]
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	e7e4      	b.n	8003a92 <__pow5mult+0x6a>
 8003ac8:	4638      	mov	r0, r7
 8003aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ace:	bf00      	nop
 8003ad0:	08005ba0 	.word	0x08005ba0
 8003ad4:	08005a28 	.word	0x08005a28
 8003ad8:	08005a3f 	.word	0x08005a3f

08003adc <__lshift>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	6849      	ldr	r1, [r1, #4]
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	4607      	mov	r7, r0
 8003aee:	4691      	mov	r9, r2
 8003af0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003af4:	f108 0601 	add.w	r6, r8, #1
 8003af8:	42b3      	cmp	r3, r6
 8003afa:	db0b      	blt.n	8003b14 <__lshift+0x38>
 8003afc:	4638      	mov	r0, r7
 8003afe:	f7ff fddb 	bl	80036b8 <_Balloc>
 8003b02:	4605      	mov	r5, r0
 8003b04:	b948      	cbnz	r0, 8003b1a <__lshift+0x3e>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <__lshift+0xd8>)
 8003b0a:	482b      	ldr	r0, [pc, #172]	; (8003bb8 <__lshift+0xdc>)
 8003b0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003b10:	f000 f992 	bl	8003e38 <__assert_func>
 8003b14:	3101      	adds	r1, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	e7ee      	b.n	8003af8 <__lshift+0x1c>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f100 0114 	add.w	r1, r0, #20
 8003b20:	f100 0210 	add.w	r2, r0, #16
 8003b24:	4618      	mov	r0, r3
 8003b26:	4553      	cmp	r3, sl
 8003b28:	db37      	blt.n	8003b9a <__lshift+0xbe>
 8003b2a:	6920      	ldr	r0, [r4, #16]
 8003b2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b30:	f104 0314 	add.w	r3, r4, #20
 8003b34:	f019 091f 	ands.w	r9, r9, #31
 8003b38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003b40:	d02f      	beq.n	8003ba2 <__lshift+0xc6>
 8003b42:	f1c9 0e20 	rsb	lr, r9, #32
 8003b46:	468a      	mov	sl, r1
 8003b48:	f04f 0c00 	mov.w	ip, #0
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	fa02 f209 	lsl.w	r2, r2, r9
 8003b52:	ea42 020c 	orr.w	r2, r2, ip
 8003b56:	f84a 2b04 	str.w	r2, [sl], #4
 8003b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b5e:	4298      	cmp	r0, r3
 8003b60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003b64:	d8f2      	bhi.n	8003b4c <__lshift+0x70>
 8003b66:	1b03      	subs	r3, r0, r4
 8003b68:	3b15      	subs	r3, #21
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	3304      	adds	r3, #4
 8003b70:	f104 0215 	add.w	r2, r4, #21
 8003b74:	4290      	cmp	r0, r2
 8003b76:	bf38      	it	cc
 8003b78:	2304      	movcc	r3, #4
 8003b7a:	f841 c003 	str.w	ip, [r1, r3]
 8003b7e:	f1bc 0f00 	cmp.w	ip, #0
 8003b82:	d001      	beq.n	8003b88 <__lshift+0xac>
 8003b84:	f108 0602 	add.w	r6, r8, #2
 8003b88:	3e01      	subs	r6, #1
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	612e      	str	r6, [r5, #16]
 8003b8e:	4621      	mov	r1, r4
 8003b90:	f7ff fdd2 	bl	8003738 <_Bfree>
 8003b94:	4628      	mov	r0, r5
 8003b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	e7c1      	b.n	8003b26 <__lshift+0x4a>
 8003ba2:	3904      	subs	r1, #4
 8003ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003bac:	4298      	cmp	r0, r3
 8003bae:	d8f9      	bhi.n	8003ba4 <__lshift+0xc8>
 8003bb0:	e7ea      	b.n	8003b88 <__lshift+0xac>
 8003bb2:	bf00      	nop
 8003bb4:	08005a9b 	.word	0x08005a9b
 8003bb8:	08005a3f 	.word	0x08005a3f

08003bbc <__mcmp>:
 8003bbc:	b530      	push	{r4, r5, lr}
 8003bbe:	6902      	ldr	r2, [r0, #16]
 8003bc0:	690c      	ldr	r4, [r1, #16]
 8003bc2:	1b12      	subs	r2, r2, r4
 8003bc4:	d10e      	bne.n	8003be4 <__mcmp+0x28>
 8003bc6:	f100 0314 	add.w	r3, r0, #20
 8003bca:	3114      	adds	r1, #20
 8003bcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003bd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003bd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003bd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003bdc:	42a5      	cmp	r5, r4
 8003bde:	d003      	beq.n	8003be8 <__mcmp+0x2c>
 8003be0:	d305      	bcc.n	8003bee <__mcmp+0x32>
 8003be2:	2201      	movs	r2, #1
 8003be4:	4610      	mov	r0, r2
 8003be6:	bd30      	pop	{r4, r5, pc}
 8003be8:	4283      	cmp	r3, r0
 8003bea:	d3f3      	bcc.n	8003bd4 <__mcmp+0x18>
 8003bec:	e7fa      	b.n	8003be4 <__mcmp+0x28>
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	e7f7      	b.n	8003be4 <__mcmp+0x28>

08003bf4 <__mdiff>:
 8003bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4690      	mov	r8, r2
 8003c02:	f7ff ffdb 	bl	8003bbc <__mcmp>
 8003c06:	1e05      	subs	r5, r0, #0
 8003c08:	d110      	bne.n	8003c2c <__mdiff+0x38>
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f7ff fd53 	bl	80036b8 <_Balloc>
 8003c12:	b930      	cbnz	r0, 8003c22 <__mdiff+0x2e>
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <__mdiff+0x10c>)
 8003c16:	4602      	mov	r2, r0
 8003c18:	f240 2132 	movw	r1, #562	; 0x232
 8003c1c:	4839      	ldr	r0, [pc, #228]	; (8003d04 <__mdiff+0x110>)
 8003c1e:	f000 f90b 	bl	8003e38 <__assert_func>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	bfa4      	itt	ge
 8003c2e:	4643      	movge	r3, r8
 8003c30:	46a0      	movge	r8, r4
 8003c32:	4630      	mov	r0, r6
 8003c34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003c38:	bfa6      	itte	ge
 8003c3a:	461c      	movge	r4, r3
 8003c3c:	2500      	movge	r5, #0
 8003c3e:	2501      	movlt	r5, #1
 8003c40:	f7ff fd3a 	bl	80036b8 <_Balloc>
 8003c44:	b920      	cbnz	r0, 8003c50 <__mdiff+0x5c>
 8003c46:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <__mdiff+0x10c>)
 8003c48:	4602      	mov	r2, r0
 8003c4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003c4e:	e7e5      	b.n	8003c1c <__mdiff+0x28>
 8003c50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003c54:	6926      	ldr	r6, [r4, #16]
 8003c56:	60c5      	str	r5, [r0, #12]
 8003c58:	f104 0914 	add.w	r9, r4, #20
 8003c5c:	f108 0514 	add.w	r5, r8, #20
 8003c60:	f100 0e14 	add.w	lr, r0, #20
 8003c64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003c68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003c6c:	f108 0210 	add.w	r2, r8, #16
 8003c70:	46f2      	mov	sl, lr
 8003c72:	2100      	movs	r1, #0
 8003c74:	f859 3b04 	ldr.w	r3, [r9], #4
 8003c78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003c7c:	fa1f f883 	uxth.w	r8, r3
 8003c80:	fa11 f18b 	uxtah	r1, r1, fp
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	eba1 0808 	sub.w	r8, r1, r8
 8003c8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003c8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003c92:	fa1f f888 	uxth.w	r8, r8
 8003c96:	1419      	asrs	r1, r3, #16
 8003c98:	454e      	cmp	r6, r9
 8003c9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003c9e:	f84a 3b04 	str.w	r3, [sl], #4
 8003ca2:	d8e7      	bhi.n	8003c74 <__mdiff+0x80>
 8003ca4:	1b33      	subs	r3, r6, r4
 8003ca6:	3b15      	subs	r3, #21
 8003ca8:	f023 0303 	bic.w	r3, r3, #3
 8003cac:	3304      	adds	r3, #4
 8003cae:	3415      	adds	r4, #21
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	bf38      	it	cc
 8003cb4:	2304      	movcc	r3, #4
 8003cb6:	441d      	add	r5, r3
 8003cb8:	4473      	add	r3, lr
 8003cba:	469e      	mov	lr, r3
 8003cbc:	462e      	mov	r6, r5
 8003cbe:	4566      	cmp	r6, ip
 8003cc0:	d30e      	bcc.n	8003ce0 <__mdiff+0xec>
 8003cc2:	f10c 0203 	add.w	r2, ip, #3
 8003cc6:	1b52      	subs	r2, r2, r5
 8003cc8:	f022 0203 	bic.w	r2, r2, #3
 8003ccc:	3d03      	subs	r5, #3
 8003cce:	45ac      	cmp	ip, r5
 8003cd0:	bf38      	it	cc
 8003cd2:	2200      	movcc	r2, #0
 8003cd4:	441a      	add	r2, r3
 8003cd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003cda:	b17b      	cbz	r3, 8003cfc <__mdiff+0x108>
 8003cdc:	6107      	str	r7, [r0, #16]
 8003cde:	e7a3      	b.n	8003c28 <__mdiff+0x34>
 8003ce0:	f856 8b04 	ldr.w	r8, [r6], #4
 8003ce4:	fa11 f288 	uxtah	r2, r1, r8
 8003ce8:	1414      	asrs	r4, r2, #16
 8003cea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003cf4:	f84e 2b04 	str.w	r2, [lr], #4
 8003cf8:	1421      	asrs	r1, r4, #16
 8003cfa:	e7e0      	b.n	8003cbe <__mdiff+0xca>
 8003cfc:	3f01      	subs	r7, #1
 8003cfe:	e7ea      	b.n	8003cd6 <__mdiff+0xe2>
 8003d00:	08005a9b 	.word	0x08005a9b
 8003d04:	08005a3f 	.word	0x08005a3f

08003d08 <__d2b>:
 8003d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	4689      	mov	r9, r1
 8003d0e:	2101      	movs	r1, #1
 8003d10:	ec57 6b10 	vmov	r6, r7, d0
 8003d14:	4690      	mov	r8, r2
 8003d16:	f7ff fccf 	bl	80036b8 <_Balloc>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	b930      	cbnz	r0, 8003d2c <__d2b+0x24>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <__d2b+0xb0>)
 8003d22:	4826      	ldr	r0, [pc, #152]	; (8003dbc <__d2b+0xb4>)
 8003d24:	f240 310a 	movw	r1, #778	; 0x30a
 8003d28:	f000 f886 	bl	8003e38 <__assert_func>
 8003d2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d34:	bb35      	cbnz	r5, 8003d84 <__d2b+0x7c>
 8003d36:	2e00      	cmp	r6, #0
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	d028      	beq.n	8003d8e <__d2b+0x86>
 8003d3c:	4668      	mov	r0, sp
 8003d3e:	9600      	str	r6, [sp, #0]
 8003d40:	f7ff fd82 	bl	8003848 <__lo0bits>
 8003d44:	9900      	ldr	r1, [sp, #0]
 8003d46:	b300      	cbz	r0, 8003d8a <__d2b+0x82>
 8003d48:	9a01      	ldr	r2, [sp, #4]
 8003d4a:	f1c0 0320 	rsb	r3, r0, #32
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	430b      	orrs	r3, r1
 8003d54:	40c2      	lsrs	r2, r0
 8003d56:	6163      	str	r3, [r4, #20]
 8003d58:	9201      	str	r2, [sp, #4]
 8003d5a:	9b01      	ldr	r3, [sp, #4]
 8003d5c:	61a3      	str	r3, [r4, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2202      	movne	r2, #2
 8003d64:	2201      	moveq	r2, #1
 8003d66:	6122      	str	r2, [r4, #16]
 8003d68:	b1d5      	cbz	r5, 8003da0 <__d2b+0x98>
 8003d6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003d6e:	4405      	add	r5, r0
 8003d70:	f8c9 5000 	str.w	r5, [r9]
 8003d74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003d78:	f8c8 0000 	str.w	r0, [r8]
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	b003      	add	sp, #12
 8003d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d88:	e7d5      	b.n	8003d36 <__d2b+0x2e>
 8003d8a:	6161      	str	r1, [r4, #20]
 8003d8c:	e7e5      	b.n	8003d5a <__d2b+0x52>
 8003d8e:	a801      	add	r0, sp, #4
 8003d90:	f7ff fd5a 	bl	8003848 <__lo0bits>
 8003d94:	9b01      	ldr	r3, [sp, #4]
 8003d96:	6163      	str	r3, [r4, #20]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	6122      	str	r2, [r4, #16]
 8003d9c:	3020      	adds	r0, #32
 8003d9e:	e7e3      	b.n	8003d68 <__d2b+0x60>
 8003da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003da8:	f8c9 0000 	str.w	r0, [r9]
 8003dac:	6918      	ldr	r0, [r3, #16]
 8003dae:	f7ff fd2b 	bl	8003808 <__hi0bits>
 8003db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003db6:	e7df      	b.n	8003d78 <__d2b+0x70>
 8003db8:	08005a9b 	.word	0x08005a9b
 8003dbc:	08005a3f 	.word	0x08005a3f

08003dc0 <_mprec_log10>:
 8003dc0:	2817      	cmp	r0, #23
 8003dc2:	b5d0      	push	{r4, r6, r7, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	dc07      	bgt.n	8003dd8 <_mprec_log10+0x18>
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <_mprec_log10+0x30>)
 8003dca:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8003dce:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003dd2:	ec41 0b10 	vmov	d0, r0, r1
 8003dd6:	bdd0      	pop	{r4, r6, r7, pc}
 8003dd8:	4906      	ldr	r1, [pc, #24]	; (8003df4 <_mprec_log10+0x34>)
 8003dda:	4f07      	ldr	r7, [pc, #28]	; (8003df8 <_mprec_log10+0x38>)
 8003ddc:	2000      	movs	r0, #0
 8003dde:	2600      	movs	r6, #0
 8003de0:	4632      	mov	r2, r6
 8003de2:	463b      	mov	r3, r7
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	3c01      	subs	r4, #1
 8003dea:	d1f9      	bne.n	8003de0 <_mprec_log10+0x20>
 8003dec:	e7f1      	b.n	8003dd2 <_mprec_log10+0x12>
 8003dee:	bf00      	nop
 8003df0:	08005ad8 	.word	0x08005ad8
 8003df4:	3ff00000 	.word	0x3ff00000
 8003df8:	40240000 	.word	0x40240000

08003dfc <_calloc_r>:
 8003dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dfe:	fba1 2402 	umull	r2, r4, r1, r2
 8003e02:	b94c      	cbnz	r4, 8003e18 <_calloc_r+0x1c>
 8003e04:	4611      	mov	r1, r2
 8003e06:	9201      	str	r2, [sp, #4]
 8003e08:	f7ff fa8c 	bl	8003324 <_malloc_r>
 8003e0c:	9a01      	ldr	r2, [sp, #4]
 8003e0e:	4605      	mov	r5, r0
 8003e10:	b930      	cbnz	r0, 8003e20 <_calloc_r+0x24>
 8003e12:	4628      	mov	r0, r5
 8003e14:	b003      	add	sp, #12
 8003e16:	bd30      	pop	{r4, r5, pc}
 8003e18:	220c      	movs	r2, #12
 8003e1a:	6002      	str	r2, [r0, #0]
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	e7f8      	b.n	8003e12 <_calloc_r+0x16>
 8003e20:	4621      	mov	r1, r4
 8003e22:	f7ff fa0b 	bl	800323c <memset>
 8003e26:	e7f4      	b.n	8003e12 <_calloc_r+0x16>

08003e28 <strcpy>:
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e2e:	f803 2b01 	strb.w	r2, [r3], #1
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	d1f9      	bne.n	8003e2a <strcpy+0x2>
 8003e36:	4770      	bx	lr

08003e38 <__assert_func>:
 8003e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <__assert_func+0x2c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4605      	mov	r5, r0
 8003e44:	68d8      	ldr	r0, [r3, #12]
 8003e46:	b14c      	cbz	r4, 8003e5c <__assert_func+0x24>
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <__assert_func+0x30>)
 8003e4a:	9100      	str	r1, [sp, #0]
 8003e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e50:	4906      	ldr	r1, [pc, #24]	; (8003e6c <__assert_func+0x34>)
 8003e52:	462b      	mov	r3, r5
 8003e54:	f000 fe8a 	bl	8004b6c <fiprintf>
 8003e58:	f001 fa58 	bl	800530c <abort>
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <__assert_func+0x38>)
 8003e5e:	461c      	mov	r4, r3
 8003e60:	e7f3      	b.n	8003e4a <__assert_func+0x12>
 8003e62:	bf00      	nop
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	08005bac 	.word	0x08005bac
 8003e6c:	08005bb9 	.word	0x08005bb9
 8003e70:	08005be7 	.word	0x08005be7

08003e74 <quorem>:
 8003e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	6903      	ldr	r3, [r0, #16]
 8003e7a:	690c      	ldr	r4, [r1, #16]
 8003e7c:	42a3      	cmp	r3, r4
 8003e7e:	4607      	mov	r7, r0
 8003e80:	f2c0 8081 	blt.w	8003f86 <quorem+0x112>
 8003e84:	3c01      	subs	r4, #1
 8003e86:	f101 0814 	add.w	r8, r1, #20
 8003e8a:	f100 0514 	add.w	r5, r0, #20
 8003e8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ea4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ea8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003eac:	d331      	bcc.n	8003f12 <quorem+0x9e>
 8003eae:	f04f 0e00 	mov.w	lr, #0
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	46ac      	mov	ip, r5
 8003eb6:	46f2      	mov	sl, lr
 8003eb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ebc:	b293      	uxth	r3, r2
 8003ebe:	fb06 e303 	mla	r3, r6, r3, lr
 8003ec2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	ebaa 0303 	sub.w	r3, sl, r3
 8003ecc:	f8dc a000 	ldr.w	sl, [ip]
 8003ed0:	0c12      	lsrs	r2, r2, #16
 8003ed2:	fa13 f38a 	uxtah	r3, r3, sl
 8003ed6:	fb06 e202 	mla	r2, r6, r2, lr
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	9b00      	ldr	r3, [sp, #0]
 8003ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003eec:	f8bd 3000 	ldrh.w	r3, [sp]
 8003ef0:	4581      	cmp	r9, r0
 8003ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ef6:	f84c 3b04 	str.w	r3, [ip], #4
 8003efa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003efe:	d2db      	bcs.n	8003eb8 <quorem+0x44>
 8003f00:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f04:	b92b      	cbnz	r3, 8003f12 <quorem+0x9e>
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	3b04      	subs	r3, #4
 8003f0a:	429d      	cmp	r5, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	d32e      	bcc.n	8003f6e <quorem+0xfa>
 8003f10:	613c      	str	r4, [r7, #16]
 8003f12:	4638      	mov	r0, r7
 8003f14:	f7ff fe52 	bl	8003bbc <__mcmp>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	db24      	blt.n	8003f66 <quorem+0xf2>
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f04f 0c00 	mov.w	ip, #0
 8003f24:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f28:	f8d0 e000 	ldr.w	lr, [r0]
 8003f2c:	b293      	uxth	r3, r2
 8003f2e:	ebac 0303 	sub.w	r3, ip, r3
 8003f32:	0c12      	lsrs	r2, r2, #16
 8003f34:	fa13 f38e 	uxtah	r3, r3, lr
 8003f38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f46:	45c1      	cmp	r9, r8
 8003f48:	f840 3b04 	str.w	r3, [r0], #4
 8003f4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f50:	d2e8      	bcs.n	8003f24 <quorem+0xb0>
 8003f52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f5a:	b922      	cbnz	r2, 8003f66 <quorem+0xf2>
 8003f5c:	3b04      	subs	r3, #4
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	d30a      	bcc.n	8003f7a <quorem+0x106>
 8003f64:	613c      	str	r4, [r7, #16]
 8003f66:	4630      	mov	r0, r6
 8003f68:	b003      	add	sp, #12
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	3b04      	subs	r3, #4
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d1cc      	bne.n	8003f10 <quorem+0x9c>
 8003f76:	3c01      	subs	r4, #1
 8003f78:	e7c7      	b.n	8003f0a <quorem+0x96>
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d1f0      	bne.n	8003f64 <quorem+0xf0>
 8003f82:	3c01      	subs	r4, #1
 8003f84:	e7eb      	b.n	8003f5e <quorem+0xea>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e7ee      	b.n	8003f68 <quorem+0xf4>
 8003f8a:	0000      	movs	r0, r0
 8003f8c:	0000      	movs	r0, r0
	...

08003f90 <_dtoa_r>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	ed2d 8b04 	vpush	{d8-d9}
 8003f98:	ec57 6b10 	vmov	r6, r7, d0
 8003f9c:	b093      	sub	sp, #76	; 0x4c
 8003f9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003fa4:	9106      	str	r1, [sp, #24]
 8003fa6:	ee10 aa10 	vmov	sl, s0
 8003faa:	4604      	mov	r4, r0
 8003fac:	9209      	str	r2, [sp, #36]	; 0x24
 8003fae:	930c      	str	r3, [sp, #48]	; 0x30
 8003fb0:	46bb      	mov	fp, r7
 8003fb2:	b975      	cbnz	r5, 8003fd2 <_dtoa_r+0x42>
 8003fb4:	2010      	movs	r0, #16
 8003fb6:	f7ff f939 	bl	800322c <malloc>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8003fbe:	b920      	cbnz	r0, 8003fca <_dtoa_r+0x3a>
 8003fc0:	4ba7      	ldr	r3, [pc, #668]	; (8004260 <_dtoa_r+0x2d0>)
 8003fc2:	21ea      	movs	r1, #234	; 0xea
 8003fc4:	48a7      	ldr	r0, [pc, #668]	; (8004264 <_dtoa_r+0x2d4>)
 8003fc6:	f7ff ff37 	bl	8003e38 <__assert_func>
 8003fca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fce:	6005      	str	r5, [r0, #0]
 8003fd0:	60c5      	str	r5, [r0, #12]
 8003fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	b151      	cbz	r1, 8003fee <_dtoa_r+0x5e>
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	604a      	str	r2, [r1, #4]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4093      	lsls	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7ff fba8 	bl	8003738 <_Bfree>
 8003fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	1e3b      	subs	r3, r7, #0
 8003ff0:	bfaa      	itet	ge
 8003ff2:	2300      	movge	r3, #0
 8003ff4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003ff8:	f8c8 3000 	strge.w	r3, [r8]
 8003ffc:	4b9a      	ldr	r3, [pc, #616]	; (8004268 <_dtoa_r+0x2d8>)
 8003ffe:	bfbc      	itt	lt
 8004000:	2201      	movlt	r2, #1
 8004002:	f8c8 2000 	strlt.w	r2, [r8]
 8004006:	ea33 030b 	bics.w	r3, r3, fp
 800400a:	d11b      	bne.n	8004044 <_dtoa_r+0xb4>
 800400c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800400e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004018:	4333      	orrs	r3, r6
 800401a:	f000 8592 	beq.w	8004b42 <_dtoa_r+0xbb2>
 800401e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004020:	b963      	cbnz	r3, 800403c <_dtoa_r+0xac>
 8004022:	4b92      	ldr	r3, [pc, #584]	; (800426c <_dtoa_r+0x2dc>)
 8004024:	e022      	b.n	800406c <_dtoa_r+0xdc>
 8004026:	4b92      	ldr	r3, [pc, #584]	; (8004270 <_dtoa_r+0x2e0>)
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	3308      	adds	r3, #8
 800402c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	9801      	ldr	r0, [sp, #4]
 8004032:	b013      	add	sp, #76	; 0x4c
 8004034:	ecbd 8b04 	vpop	{d8-d9}
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403c:	4b8b      	ldr	r3, [pc, #556]	; (800426c <_dtoa_r+0x2dc>)
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	3303      	adds	r3, #3
 8004042:	e7f3      	b.n	800402c <_dtoa_r+0x9c>
 8004044:	2200      	movs	r2, #0
 8004046:	2300      	movs	r3, #0
 8004048:	4650      	mov	r0, sl
 800404a:	4659      	mov	r1, fp
 800404c:	f7fc fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004050:	ec4b ab19 	vmov	d9, sl, fp
 8004054:	4680      	mov	r8, r0
 8004056:	b158      	cbz	r0, 8004070 <_dtoa_r+0xe0>
 8004058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800405a:	2301      	movs	r3, #1
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 856b 	beq.w	8004b3c <_dtoa_r+0xbac>
 8004066:	4883      	ldr	r0, [pc, #524]	; (8004274 <_dtoa_r+0x2e4>)
 8004068:	6018      	str	r0, [r3, #0]
 800406a:	1e43      	subs	r3, r0, #1
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	e7df      	b.n	8004030 <_dtoa_r+0xa0>
 8004070:	ec4b ab10 	vmov	d0, sl, fp
 8004074:	aa10      	add	r2, sp, #64	; 0x40
 8004076:	a911      	add	r1, sp, #68	; 0x44
 8004078:	4620      	mov	r0, r4
 800407a:	f7ff fe45 	bl	8003d08 <__d2b>
 800407e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004082:	ee08 0a10 	vmov	s16, r0
 8004086:	2d00      	cmp	r5, #0
 8004088:	f000 8084 	beq.w	8004194 <_dtoa_r+0x204>
 800408c:	ee19 3a90 	vmov	r3, s19
 8004090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004094:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004098:	4656      	mov	r6, sl
 800409a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800409e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80040a6:	4b74      	ldr	r3, [pc, #464]	; (8004278 <_dtoa_r+0x2e8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	4630      	mov	r0, r6
 80040ac:	4639      	mov	r1, r7
 80040ae:	f7fc f8eb 	bl	8000288 <__aeabi_dsub>
 80040b2:	a365      	add	r3, pc, #404	; (adr r3, 8004248 <_dtoa_r+0x2b8>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc fa9e 	bl	80005f8 <__aeabi_dmul>
 80040bc:	a364      	add	r3, pc, #400	; (adr r3, 8004250 <_dtoa_r+0x2c0>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc f8e3 	bl	800028c <__adddf3>
 80040c6:	4606      	mov	r6, r0
 80040c8:	4628      	mov	r0, r5
 80040ca:	460f      	mov	r7, r1
 80040cc:	f7fc fa2a 	bl	8000524 <__aeabi_i2d>
 80040d0:	a361      	add	r3, pc, #388	; (adr r3, 8004258 <_dtoa_r+0x2c8>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa8f 	bl	80005f8 <__aeabi_dmul>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4630      	mov	r0, r6
 80040e0:	4639      	mov	r1, r7
 80040e2:	f7fc f8d3 	bl	800028c <__adddf3>
 80040e6:	4606      	mov	r6, r0
 80040e8:	460f      	mov	r7, r1
 80040ea:	f7fc fd1f 	bl	8000b2c <__aeabi_d2iz>
 80040ee:	2200      	movs	r2, #0
 80040f0:	9000      	str	r0, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	4630      	mov	r0, r6
 80040f6:	4639      	mov	r1, r7
 80040f8:	f7fc fcf0 	bl	8000adc <__aeabi_dcmplt>
 80040fc:	b150      	cbz	r0, 8004114 <_dtoa_r+0x184>
 80040fe:	9800      	ldr	r0, [sp, #0]
 8004100:	f7fc fa10 	bl	8000524 <__aeabi_i2d>
 8004104:	4632      	mov	r2, r6
 8004106:	463b      	mov	r3, r7
 8004108:	f7fc fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800410c:	b910      	cbnz	r0, 8004114 <_dtoa_r+0x184>
 800410e:	9b00      	ldr	r3, [sp, #0]
 8004110:	3b01      	subs	r3, #1
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	9b00      	ldr	r3, [sp, #0]
 8004116:	2b16      	cmp	r3, #22
 8004118:	d85a      	bhi.n	80041d0 <_dtoa_r+0x240>
 800411a:	9a00      	ldr	r2, [sp, #0]
 800411c:	4b57      	ldr	r3, [pc, #348]	; (800427c <_dtoa_r+0x2ec>)
 800411e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	ec51 0b19 	vmov	r0, r1, d9
 800412a:	f7fc fcd7 	bl	8000adc <__aeabi_dcmplt>
 800412e:	2800      	cmp	r0, #0
 8004130:	d050      	beq.n	80041d4 <_dtoa_r+0x244>
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	930b      	str	r3, [sp, #44]	; 0x2c
 800413c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800413e:	1b5d      	subs	r5, r3, r5
 8004140:	1e6b      	subs	r3, r5, #1
 8004142:	9305      	str	r3, [sp, #20]
 8004144:	bf45      	ittet	mi
 8004146:	f1c5 0301 	rsbmi	r3, r5, #1
 800414a:	9304      	strmi	r3, [sp, #16]
 800414c:	2300      	movpl	r3, #0
 800414e:	2300      	movmi	r3, #0
 8004150:	bf4c      	ite	mi
 8004152:	9305      	strmi	r3, [sp, #20]
 8004154:	9304      	strpl	r3, [sp, #16]
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db3d      	blt.n	80041d8 <_dtoa_r+0x248>
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	9a00      	ldr	r2, [sp, #0]
 8004160:	920a      	str	r2, [sp, #40]	; 0x28
 8004162:	4413      	add	r3, r2
 8004164:	9305      	str	r3, [sp, #20]
 8004166:	2300      	movs	r3, #0
 8004168:	9307      	str	r3, [sp, #28]
 800416a:	9b06      	ldr	r3, [sp, #24]
 800416c:	2b09      	cmp	r3, #9
 800416e:	f200 8089 	bhi.w	8004284 <_dtoa_r+0x2f4>
 8004172:	2b05      	cmp	r3, #5
 8004174:	bfc4      	itt	gt
 8004176:	3b04      	subgt	r3, #4
 8004178:	9306      	strgt	r3, [sp, #24]
 800417a:	9b06      	ldr	r3, [sp, #24]
 800417c:	f1a3 0302 	sub.w	r3, r3, #2
 8004180:	bfcc      	ite	gt
 8004182:	2500      	movgt	r5, #0
 8004184:	2501      	movle	r5, #1
 8004186:	2b03      	cmp	r3, #3
 8004188:	f200 8087 	bhi.w	800429a <_dtoa_r+0x30a>
 800418c:	e8df f003 	tbb	[pc, r3]
 8004190:	59383a2d 	.word	0x59383a2d
 8004194:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004198:	441d      	add	r5, r3
 800419a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800419e:	2b20      	cmp	r3, #32
 80041a0:	bfc1      	itttt	gt
 80041a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80041aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80041ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041b2:	bfda      	itte	le
 80041b4:	f1c3 0320 	rsble	r3, r3, #32
 80041b8:	fa06 f003 	lslle.w	r0, r6, r3
 80041bc:	4318      	orrgt	r0, r3
 80041be:	f7fc f9a1 	bl	8000504 <__aeabi_ui2d>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4606      	mov	r6, r0
 80041c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80041ca:	3d01      	subs	r5, #1
 80041cc:	930e      	str	r3, [sp, #56]	; 0x38
 80041ce:	e76a      	b.n	80040a6 <_dtoa_r+0x116>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e7b2      	b.n	800413a <_dtoa_r+0x1aa>
 80041d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80041d6:	e7b1      	b.n	800413c <_dtoa_r+0x1ac>
 80041d8:	9b04      	ldr	r3, [sp, #16]
 80041da:	9a00      	ldr	r2, [sp, #0]
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	4253      	negs	r3, r2
 80041e2:	9307      	str	r3, [sp, #28]
 80041e4:	2300      	movs	r3, #0
 80041e6:	930a      	str	r3, [sp, #40]	; 0x28
 80041e8:	e7bf      	b.n	800416a <_dtoa_r+0x1da>
 80041ea:	2300      	movs	r3, #0
 80041ec:	9308      	str	r3, [sp, #32]
 80041ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	dc55      	bgt.n	80042a0 <_dtoa_r+0x310>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80041fa:	461a      	mov	r2, r3
 80041fc:	9209      	str	r2, [sp, #36]	; 0x24
 80041fe:	e00c      	b.n	800421a <_dtoa_r+0x28a>
 8004200:	2301      	movs	r3, #1
 8004202:	e7f3      	b.n	80041ec <_dtoa_r+0x25c>
 8004204:	2300      	movs	r3, #0
 8004206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004208:	9308      	str	r3, [sp, #32]
 800420a:	9b00      	ldr	r3, [sp, #0]
 800420c:	4413      	add	r3, r2
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	3301      	adds	r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	9303      	str	r3, [sp, #12]
 8004216:	bfb8      	it	lt
 8004218:	2301      	movlt	r3, #1
 800421a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800421c:	2200      	movs	r2, #0
 800421e:	6042      	str	r2, [r0, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	f102 0614 	add.w	r6, r2, #20
 8004226:	429e      	cmp	r6, r3
 8004228:	6841      	ldr	r1, [r0, #4]
 800422a:	d93d      	bls.n	80042a8 <_dtoa_r+0x318>
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff fa43 	bl	80036b8 <_Balloc>
 8004232:	9001      	str	r0, [sp, #4]
 8004234:	2800      	cmp	r0, #0
 8004236:	d13b      	bne.n	80042b0 <_dtoa_r+0x320>
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <_dtoa_r+0x2f0>)
 800423a:	4602      	mov	r2, r0
 800423c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004240:	e6c0      	b.n	8003fc4 <_dtoa_r+0x34>
 8004242:	2301      	movs	r3, #1
 8004244:	e7df      	b.n	8004206 <_dtoa_r+0x276>
 8004246:	bf00      	nop
 8004248:	636f4361 	.word	0x636f4361
 800424c:	3fd287a7 	.word	0x3fd287a7
 8004250:	8b60c8b3 	.word	0x8b60c8b3
 8004254:	3fc68a28 	.word	0x3fc68a28
 8004258:	509f79fb 	.word	0x509f79fb
 800425c:	3fd34413 	.word	0x3fd34413
 8004260:	08005a28 	.word	0x08005a28
 8004264:	08005bf7 	.word	0x08005bf7
 8004268:	7ff00000 	.word	0x7ff00000
 800426c:	08005bf1 	.word	0x08005bf1
 8004270:	08005be8 	.word	0x08005be8
 8004274:	08005bf6 	.word	0x08005bf6
 8004278:	3ff80000 	.word	0x3ff80000
 800427c:	08005ad8 	.word	0x08005ad8
 8004280:	08005a9b 	.word	0x08005a9b
 8004284:	2501      	movs	r5, #1
 8004286:	2300      	movs	r3, #0
 8004288:	9306      	str	r3, [sp, #24]
 800428a:	9508      	str	r5, [sp, #32]
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	2312      	movs	r3, #18
 8004298:	e7b0      	b.n	80041fc <_dtoa_r+0x26c>
 800429a:	2301      	movs	r3, #1
 800429c:	9308      	str	r3, [sp, #32]
 800429e:	e7f5      	b.n	800428c <_dtoa_r+0x2fc>
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042a6:	e7b8      	b.n	800421a <_dtoa_r+0x28a>
 80042a8:	3101      	adds	r1, #1
 80042aa:	6041      	str	r1, [r0, #4]
 80042ac:	0052      	lsls	r2, r2, #1
 80042ae:	e7b8      	b.n	8004222 <_dtoa_r+0x292>
 80042b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b2:	9a01      	ldr	r2, [sp, #4]
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	2b0e      	cmp	r3, #14
 80042ba:	f200 809d 	bhi.w	80043f8 <_dtoa_r+0x468>
 80042be:	2d00      	cmp	r5, #0
 80042c0:	f000 809a 	beq.w	80043f8 <_dtoa_r+0x468>
 80042c4:	9b00      	ldr	r3, [sp, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dd32      	ble.n	8004330 <_dtoa_r+0x3a0>
 80042ca:	4ab7      	ldr	r2, [pc, #732]	; (80045a8 <_dtoa_r+0x618>)
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	05d8      	lsls	r0, r3, #23
 80042dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80042e0:	d516      	bpl.n	8004310 <_dtoa_r+0x380>
 80042e2:	4bb2      	ldr	r3, [pc, #712]	; (80045ac <_dtoa_r+0x61c>)
 80042e4:	ec51 0b19 	vmov	r0, r1, d9
 80042e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042ec:	f7fc faae 	bl	800084c <__aeabi_ddiv>
 80042f0:	f007 070f 	and.w	r7, r7, #15
 80042f4:	4682      	mov	sl, r0
 80042f6:	468b      	mov	fp, r1
 80042f8:	2503      	movs	r5, #3
 80042fa:	4eac      	ldr	r6, [pc, #688]	; (80045ac <_dtoa_r+0x61c>)
 80042fc:	b957      	cbnz	r7, 8004314 <_dtoa_r+0x384>
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	4650      	mov	r0, sl
 8004304:	4659      	mov	r1, fp
 8004306:	f7fc faa1 	bl	800084c <__aeabi_ddiv>
 800430a:	4682      	mov	sl, r0
 800430c:	468b      	mov	fp, r1
 800430e:	e028      	b.n	8004362 <_dtoa_r+0x3d2>
 8004310:	2502      	movs	r5, #2
 8004312:	e7f2      	b.n	80042fa <_dtoa_r+0x36a>
 8004314:	07f9      	lsls	r1, r7, #31
 8004316:	d508      	bpl.n	800432a <_dtoa_r+0x39a>
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004320:	f7fc f96a 	bl	80005f8 <__aeabi_dmul>
 8004324:	3501      	adds	r5, #1
 8004326:	4680      	mov	r8, r0
 8004328:	4689      	mov	r9, r1
 800432a:	107f      	asrs	r7, r7, #1
 800432c:	3608      	adds	r6, #8
 800432e:	e7e5      	b.n	80042fc <_dtoa_r+0x36c>
 8004330:	f000 809b 	beq.w	800446a <_dtoa_r+0x4da>
 8004334:	9b00      	ldr	r3, [sp, #0]
 8004336:	4f9d      	ldr	r7, [pc, #628]	; (80045ac <_dtoa_r+0x61c>)
 8004338:	425e      	negs	r6, r3
 800433a:	4b9b      	ldr	r3, [pc, #620]	; (80045a8 <_dtoa_r+0x618>)
 800433c:	f006 020f 	and.w	r2, r6, #15
 8004340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	ec51 0b19 	vmov	r0, r1, d9
 800434c:	f7fc f954 	bl	80005f8 <__aeabi_dmul>
 8004350:	1136      	asrs	r6, r6, #4
 8004352:	4682      	mov	sl, r0
 8004354:	468b      	mov	fp, r1
 8004356:	2300      	movs	r3, #0
 8004358:	2502      	movs	r5, #2
 800435a:	2e00      	cmp	r6, #0
 800435c:	d17a      	bne.n	8004454 <_dtoa_r+0x4c4>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1d3      	bne.n	800430a <_dtoa_r+0x37a>
 8004362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8082 	beq.w	800446e <_dtoa_r+0x4de>
 800436a:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <_dtoa_r+0x620>)
 800436c:	2200      	movs	r2, #0
 800436e:	4650      	mov	r0, sl
 8004370:	4659      	mov	r1, fp
 8004372:	f7fc fbb3 	bl	8000adc <__aeabi_dcmplt>
 8004376:	2800      	cmp	r0, #0
 8004378:	d079      	beq.n	800446e <_dtoa_r+0x4de>
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d076      	beq.n	800446e <_dtoa_r+0x4de>
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	dd36      	ble.n	80043f4 <_dtoa_r+0x464>
 8004386:	9b00      	ldr	r3, [sp, #0]
 8004388:	4650      	mov	r0, sl
 800438a:	4659      	mov	r1, fp
 800438c:	1e5f      	subs	r7, r3, #1
 800438e:	2200      	movs	r2, #0
 8004390:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <_dtoa_r+0x624>)
 8004392:	f7fc f931 	bl	80005f8 <__aeabi_dmul>
 8004396:	9e02      	ldr	r6, [sp, #8]
 8004398:	4682      	mov	sl, r0
 800439a:	468b      	mov	fp, r1
 800439c:	3501      	adds	r5, #1
 800439e:	4628      	mov	r0, r5
 80043a0:	f7fc f8c0 	bl	8000524 <__aeabi_i2d>
 80043a4:	4652      	mov	r2, sl
 80043a6:	465b      	mov	r3, fp
 80043a8:	f7fc f926 	bl	80005f8 <__aeabi_dmul>
 80043ac:	4b82      	ldr	r3, [pc, #520]	; (80045b8 <_dtoa_r+0x628>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	f7fb ff6c 	bl	800028c <__adddf3>
 80043b4:	46d0      	mov	r8, sl
 80043b6:	46d9      	mov	r9, fp
 80043b8:	4682      	mov	sl, r0
 80043ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80043be:	2e00      	cmp	r6, #0
 80043c0:	d158      	bne.n	8004474 <_dtoa_r+0x4e4>
 80043c2:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <_dtoa_r+0x62c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	4640      	mov	r0, r8
 80043c8:	4649      	mov	r1, r9
 80043ca:	f7fb ff5d 	bl	8000288 <__aeabi_dsub>
 80043ce:	4652      	mov	r2, sl
 80043d0:	465b      	mov	r3, fp
 80043d2:	4680      	mov	r8, r0
 80043d4:	4689      	mov	r9, r1
 80043d6:	f7fc fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 80043da:	2800      	cmp	r0, #0
 80043dc:	f040 8295 	bne.w	800490a <_dtoa_r+0x97a>
 80043e0:	4652      	mov	r2, sl
 80043e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80043e6:	4640      	mov	r0, r8
 80043e8:	4649      	mov	r1, r9
 80043ea:	f7fc fb77 	bl	8000adc <__aeabi_dcmplt>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f040 8289 	bne.w	8004906 <_dtoa_r+0x976>
 80043f4:	ec5b ab19 	vmov	sl, fp, d9
 80043f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f2c0 8148 	blt.w	8004690 <_dtoa_r+0x700>
 8004400:	9a00      	ldr	r2, [sp, #0]
 8004402:	2a0e      	cmp	r2, #14
 8004404:	f300 8144 	bgt.w	8004690 <_dtoa_r+0x700>
 8004408:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <_dtoa_r+0x618>)
 800440a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800440e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	f280 80d5 	bge.w	80045c4 <_dtoa_r+0x634>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f300 80d1 	bgt.w	80045c4 <_dtoa_r+0x634>
 8004422:	f040 826f 	bne.w	8004904 <_dtoa_r+0x974>
 8004426:	4b65      	ldr	r3, [pc, #404]	; (80045bc <_dtoa_r+0x62c>)
 8004428:	2200      	movs	r2, #0
 800442a:	4640      	mov	r0, r8
 800442c:	4649      	mov	r1, r9
 800442e:	f7fc f8e3 	bl	80005f8 <__aeabi_dmul>
 8004432:	4652      	mov	r2, sl
 8004434:	465b      	mov	r3, fp
 8004436:	f7fc fb65 	bl	8000b04 <__aeabi_dcmpge>
 800443a:	9e03      	ldr	r6, [sp, #12]
 800443c:	4637      	mov	r7, r6
 800443e:	2800      	cmp	r0, #0
 8004440:	f040 8245 	bne.w	80048ce <_dtoa_r+0x93e>
 8004444:	9d01      	ldr	r5, [sp, #4]
 8004446:	2331      	movs	r3, #49	; 0x31
 8004448:	f805 3b01 	strb.w	r3, [r5], #1
 800444c:	9b00      	ldr	r3, [sp, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	e240      	b.n	80048d6 <_dtoa_r+0x946>
 8004454:	07f2      	lsls	r2, r6, #31
 8004456:	d505      	bpl.n	8004464 <_dtoa_r+0x4d4>
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	f7fc f8cc 	bl	80005f8 <__aeabi_dmul>
 8004460:	3501      	adds	r5, #1
 8004462:	2301      	movs	r3, #1
 8004464:	1076      	asrs	r6, r6, #1
 8004466:	3708      	adds	r7, #8
 8004468:	e777      	b.n	800435a <_dtoa_r+0x3ca>
 800446a:	2502      	movs	r5, #2
 800446c:	e779      	b.n	8004362 <_dtoa_r+0x3d2>
 800446e:	9f00      	ldr	r7, [sp, #0]
 8004470:	9e03      	ldr	r6, [sp, #12]
 8004472:	e794      	b.n	800439e <_dtoa_r+0x40e>
 8004474:	9901      	ldr	r1, [sp, #4]
 8004476:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <_dtoa_r+0x618>)
 8004478:	4431      	add	r1, r6
 800447a:	910d      	str	r1, [sp, #52]	; 0x34
 800447c:	9908      	ldr	r1, [sp, #32]
 800447e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004486:	2900      	cmp	r1, #0
 8004488:	d043      	beq.n	8004512 <_dtoa_r+0x582>
 800448a:	494d      	ldr	r1, [pc, #308]	; (80045c0 <_dtoa_r+0x630>)
 800448c:	2000      	movs	r0, #0
 800448e:	f7fc f9dd 	bl	800084c <__aeabi_ddiv>
 8004492:	4652      	mov	r2, sl
 8004494:	465b      	mov	r3, fp
 8004496:	f7fb fef7 	bl	8000288 <__aeabi_dsub>
 800449a:	9d01      	ldr	r5, [sp, #4]
 800449c:	4682      	mov	sl, r0
 800449e:	468b      	mov	fp, r1
 80044a0:	4649      	mov	r1, r9
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7fc fb42 	bl	8000b2c <__aeabi_d2iz>
 80044a8:	4606      	mov	r6, r0
 80044aa:	f7fc f83b 	bl	8000524 <__aeabi_i2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4640      	mov	r0, r8
 80044b4:	4649      	mov	r1, r9
 80044b6:	f7fb fee7 	bl	8000288 <__aeabi_dsub>
 80044ba:	3630      	adds	r6, #48	; 0x30
 80044bc:	f805 6b01 	strb.w	r6, [r5], #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	465b      	mov	r3, fp
 80044c4:	4680      	mov	r8, r0
 80044c6:	4689      	mov	r9, r1
 80044c8:	f7fc fb08 	bl	8000adc <__aeabi_dcmplt>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d163      	bne.n	8004598 <_dtoa_r+0x608>
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	4936      	ldr	r1, [pc, #216]	; (80045b0 <_dtoa_r+0x620>)
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fb fed6 	bl	8000288 <__aeabi_dsub>
 80044dc:	4652      	mov	r2, sl
 80044de:	465b      	mov	r3, fp
 80044e0:	f7fc fafc 	bl	8000adc <__aeabi_dcmplt>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	f040 80b5 	bne.w	8004654 <_dtoa_r+0x6c4>
 80044ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ec:	429d      	cmp	r5, r3
 80044ee:	d081      	beq.n	80043f4 <_dtoa_r+0x464>
 80044f0:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <_dtoa_r+0x624>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	4650      	mov	r0, sl
 80044f6:	4659      	mov	r1, fp
 80044f8:	f7fc f87e 	bl	80005f8 <__aeabi_dmul>
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <_dtoa_r+0x624>)
 80044fe:	4682      	mov	sl, r0
 8004500:	468b      	mov	fp, r1
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	2200      	movs	r2, #0
 8004508:	f7fc f876 	bl	80005f8 <__aeabi_dmul>
 800450c:	4680      	mov	r8, r0
 800450e:	4689      	mov	r9, r1
 8004510:	e7c6      	b.n	80044a0 <_dtoa_r+0x510>
 8004512:	4650      	mov	r0, sl
 8004514:	4659      	mov	r1, fp
 8004516:	f7fc f86f 	bl	80005f8 <__aeabi_dmul>
 800451a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800451c:	9d01      	ldr	r5, [sp, #4]
 800451e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004520:	4682      	mov	sl, r0
 8004522:	468b      	mov	fp, r1
 8004524:	4649      	mov	r1, r9
 8004526:	4640      	mov	r0, r8
 8004528:	f7fc fb00 	bl	8000b2c <__aeabi_d2iz>
 800452c:	4606      	mov	r6, r0
 800452e:	f7fb fff9 	bl	8000524 <__aeabi_i2d>
 8004532:	3630      	adds	r6, #48	; 0x30
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4640      	mov	r0, r8
 800453a:	4649      	mov	r1, r9
 800453c:	f7fb fea4 	bl	8000288 <__aeabi_dsub>
 8004540:	f805 6b01 	strb.w	r6, [r5], #1
 8004544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004546:	429d      	cmp	r5, r3
 8004548:	4680      	mov	r8, r0
 800454a:	4689      	mov	r9, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	d124      	bne.n	800459c <_dtoa_r+0x60c>
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <_dtoa_r+0x630>)
 8004554:	4650      	mov	r0, sl
 8004556:	4659      	mov	r1, fp
 8004558:	f7fb fe98 	bl	800028c <__adddf3>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4640      	mov	r0, r8
 8004562:	4649      	mov	r1, r9
 8004564:	f7fc fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8004568:	2800      	cmp	r0, #0
 800456a:	d173      	bne.n	8004654 <_dtoa_r+0x6c4>
 800456c:	4652      	mov	r2, sl
 800456e:	465b      	mov	r3, fp
 8004570:	4913      	ldr	r1, [pc, #76]	; (80045c0 <_dtoa_r+0x630>)
 8004572:	2000      	movs	r0, #0
 8004574:	f7fb fe88 	bl	8000288 <__aeabi_dsub>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	f7fc faac 	bl	8000adc <__aeabi_dcmplt>
 8004584:	2800      	cmp	r0, #0
 8004586:	f43f af35 	beq.w	80043f4 <_dtoa_r+0x464>
 800458a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800458c:	1e6b      	subs	r3, r5, #1
 800458e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004590:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d0f8      	beq.n	800458a <_dtoa_r+0x5fa>
 8004598:	9700      	str	r7, [sp, #0]
 800459a:	e049      	b.n	8004630 <_dtoa_r+0x6a0>
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <_dtoa_r+0x624>)
 800459e:	f7fc f82b 	bl	80005f8 <__aeabi_dmul>
 80045a2:	4680      	mov	r8, r0
 80045a4:	4689      	mov	r9, r1
 80045a6:	e7bd      	b.n	8004524 <_dtoa_r+0x594>
 80045a8:	08005ad8 	.word	0x08005ad8
 80045ac:	08005ab0 	.word	0x08005ab0
 80045b0:	3ff00000 	.word	0x3ff00000
 80045b4:	40240000 	.word	0x40240000
 80045b8:	401c0000 	.word	0x401c0000
 80045bc:	40140000 	.word	0x40140000
 80045c0:	3fe00000 	.word	0x3fe00000
 80045c4:	9d01      	ldr	r5, [sp, #4]
 80045c6:	4656      	mov	r6, sl
 80045c8:	465f      	mov	r7, fp
 80045ca:	4642      	mov	r2, r8
 80045cc:	464b      	mov	r3, r9
 80045ce:	4630      	mov	r0, r6
 80045d0:	4639      	mov	r1, r7
 80045d2:	f7fc f93b 	bl	800084c <__aeabi_ddiv>
 80045d6:	f7fc faa9 	bl	8000b2c <__aeabi_d2iz>
 80045da:	4682      	mov	sl, r0
 80045dc:	f7fb ffa2 	bl	8000524 <__aeabi_i2d>
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	f7fc f808 	bl	80005f8 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4630      	mov	r0, r6
 80045ee:	4639      	mov	r1, r7
 80045f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80045f4:	f7fb fe48 	bl	8000288 <__aeabi_dsub>
 80045f8:	f805 6b01 	strb.w	r6, [r5], #1
 80045fc:	9e01      	ldr	r6, [sp, #4]
 80045fe:	9f03      	ldr	r7, [sp, #12]
 8004600:	1bae      	subs	r6, r5, r6
 8004602:	42b7      	cmp	r7, r6
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	d135      	bne.n	8004676 <_dtoa_r+0x6e6>
 800460a:	f7fb fe3f 	bl	800028c <__adddf3>
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
 8004616:	f7fc fa7f 	bl	8000b18 <__aeabi_dcmpgt>
 800461a:	b9d0      	cbnz	r0, 8004652 <_dtoa_r+0x6c2>
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fc fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8004628:	b110      	cbz	r0, 8004630 <_dtoa_r+0x6a0>
 800462a:	f01a 0f01 	tst.w	sl, #1
 800462e:	d110      	bne.n	8004652 <_dtoa_r+0x6c2>
 8004630:	4620      	mov	r0, r4
 8004632:	ee18 1a10 	vmov	r1, s16
 8004636:	f7ff f87f 	bl	8003738 <_Bfree>
 800463a:	2300      	movs	r3, #0
 800463c:	9800      	ldr	r0, [sp, #0]
 800463e:	702b      	strb	r3, [r5, #0]
 8004640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004642:	3001      	adds	r0, #1
 8004644:	6018      	str	r0, [r3, #0]
 8004646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004648:	2b00      	cmp	r3, #0
 800464a:	f43f acf1 	beq.w	8004030 <_dtoa_r+0xa0>
 800464e:	601d      	str	r5, [r3, #0]
 8004650:	e4ee      	b.n	8004030 <_dtoa_r+0xa0>
 8004652:	9f00      	ldr	r7, [sp, #0]
 8004654:	462b      	mov	r3, r5
 8004656:	461d      	mov	r5, r3
 8004658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800465c:	2a39      	cmp	r2, #57	; 0x39
 800465e:	d106      	bne.n	800466e <_dtoa_r+0x6de>
 8004660:	9a01      	ldr	r2, [sp, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d1f7      	bne.n	8004656 <_dtoa_r+0x6c6>
 8004666:	9901      	ldr	r1, [sp, #4]
 8004668:	2230      	movs	r2, #48	; 0x30
 800466a:	3701      	adds	r7, #1
 800466c:	700a      	strb	r2, [r1, #0]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	3201      	adds	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e790      	b.n	8004598 <_dtoa_r+0x608>
 8004676:	4ba6      	ldr	r3, [pc, #664]	; (8004910 <_dtoa_r+0x980>)
 8004678:	2200      	movs	r2, #0
 800467a:	f7fb ffbd 	bl	80005f8 <__aeabi_dmul>
 800467e:	2200      	movs	r2, #0
 8004680:	2300      	movs	r3, #0
 8004682:	4606      	mov	r6, r0
 8004684:	460f      	mov	r7, r1
 8004686:	f7fc fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800468a:	2800      	cmp	r0, #0
 800468c:	d09d      	beq.n	80045ca <_dtoa_r+0x63a>
 800468e:	e7cf      	b.n	8004630 <_dtoa_r+0x6a0>
 8004690:	9a08      	ldr	r2, [sp, #32]
 8004692:	2a00      	cmp	r2, #0
 8004694:	f000 80d7 	beq.w	8004846 <_dtoa_r+0x8b6>
 8004698:	9a06      	ldr	r2, [sp, #24]
 800469a:	2a01      	cmp	r2, #1
 800469c:	f300 80ba 	bgt.w	8004814 <_dtoa_r+0x884>
 80046a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046a2:	2a00      	cmp	r2, #0
 80046a4:	f000 80b2 	beq.w	800480c <_dtoa_r+0x87c>
 80046a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046ac:	9e07      	ldr	r6, [sp, #28]
 80046ae:	9d04      	ldr	r5, [sp, #16]
 80046b0:	9a04      	ldr	r2, [sp, #16]
 80046b2:	441a      	add	r2, r3
 80046b4:	9204      	str	r2, [sp, #16]
 80046b6:	9a05      	ldr	r2, [sp, #20]
 80046b8:	2101      	movs	r1, #1
 80046ba:	441a      	add	r2, r3
 80046bc:	4620      	mov	r0, r4
 80046be:	9205      	str	r2, [sp, #20]
 80046c0:	f7ff f8f2 	bl	80038a8 <__i2b>
 80046c4:	4607      	mov	r7, r0
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	dd0c      	ble.n	80046e4 <_dtoa_r+0x754>
 80046ca:	9b05      	ldr	r3, [sp, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dd09      	ble.n	80046e4 <_dtoa_r+0x754>
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	9a04      	ldr	r2, [sp, #16]
 80046d4:	bfa8      	it	ge
 80046d6:	462b      	movge	r3, r5
 80046d8:	1ad2      	subs	r2, r2, r3
 80046da:	9204      	str	r2, [sp, #16]
 80046dc:	9a05      	ldr	r2, [sp, #20]
 80046de:	1aed      	subs	r5, r5, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	b31b      	cbz	r3, 8004730 <_dtoa_r+0x7a0>
 80046e8:	9b08      	ldr	r3, [sp, #32]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80af 	beq.w	800484e <_dtoa_r+0x8be>
 80046f0:	2e00      	cmp	r6, #0
 80046f2:	dd13      	ble.n	800471c <_dtoa_r+0x78c>
 80046f4:	4639      	mov	r1, r7
 80046f6:	4632      	mov	r2, r6
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff f995 	bl	8003a28 <__pow5mult>
 80046fe:	ee18 2a10 	vmov	r2, s16
 8004702:	4601      	mov	r1, r0
 8004704:	4607      	mov	r7, r0
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff f8e4 	bl	80038d4 <__multiply>
 800470c:	ee18 1a10 	vmov	r1, s16
 8004710:	4680      	mov	r8, r0
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff f810 	bl	8003738 <_Bfree>
 8004718:	ee08 8a10 	vmov	s16, r8
 800471c:	9b07      	ldr	r3, [sp, #28]
 800471e:	1b9a      	subs	r2, r3, r6
 8004720:	d006      	beq.n	8004730 <_dtoa_r+0x7a0>
 8004722:	ee18 1a10 	vmov	r1, s16
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff f97e 	bl	8003a28 <__pow5mult>
 800472c:	ee08 0a10 	vmov	s16, r0
 8004730:	2101      	movs	r1, #1
 8004732:	4620      	mov	r0, r4
 8004734:	f7ff f8b8 	bl	80038a8 <__i2b>
 8004738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	4606      	mov	r6, r0
 800473e:	f340 8088 	ble.w	8004852 <_dtoa_r+0x8c2>
 8004742:	461a      	mov	r2, r3
 8004744:	4601      	mov	r1, r0
 8004746:	4620      	mov	r0, r4
 8004748:	f7ff f96e 	bl	8003a28 <__pow5mult>
 800474c:	9b06      	ldr	r3, [sp, #24]
 800474e:	2b01      	cmp	r3, #1
 8004750:	4606      	mov	r6, r0
 8004752:	f340 8081 	ble.w	8004858 <_dtoa_r+0x8c8>
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	6933      	ldr	r3, [r6, #16]
 800475c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004760:	6918      	ldr	r0, [r3, #16]
 8004762:	f7ff f851 	bl	8003808 <__hi0bits>
 8004766:	f1c0 0020 	rsb	r0, r0, #32
 800476a:	9b05      	ldr	r3, [sp, #20]
 800476c:	4418      	add	r0, r3
 800476e:	f010 001f 	ands.w	r0, r0, #31
 8004772:	f000 8092 	beq.w	800489a <_dtoa_r+0x90a>
 8004776:	f1c0 0320 	rsb	r3, r0, #32
 800477a:	2b04      	cmp	r3, #4
 800477c:	f340 808a 	ble.w	8004894 <_dtoa_r+0x904>
 8004780:	f1c0 001c 	rsb	r0, r0, #28
 8004784:	9b04      	ldr	r3, [sp, #16]
 8004786:	4403      	add	r3, r0
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	9b05      	ldr	r3, [sp, #20]
 800478c:	4403      	add	r3, r0
 800478e:	4405      	add	r5, r0
 8004790:	9305      	str	r3, [sp, #20]
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dd07      	ble.n	80047a8 <_dtoa_r+0x818>
 8004798:	ee18 1a10 	vmov	r1, s16
 800479c:	461a      	mov	r2, r3
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff f99c 	bl	8003adc <__lshift>
 80047a4:	ee08 0a10 	vmov	s16, r0
 80047a8:	9b05      	ldr	r3, [sp, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dd05      	ble.n	80047ba <_dtoa_r+0x82a>
 80047ae:	4631      	mov	r1, r6
 80047b0:	461a      	mov	r2, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7ff f992 	bl	8003adc <__lshift>
 80047b8:	4606      	mov	r6, r0
 80047ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d06e      	beq.n	800489e <_dtoa_r+0x90e>
 80047c0:	ee18 0a10 	vmov	r0, s16
 80047c4:	4631      	mov	r1, r6
 80047c6:	f7ff f9f9 	bl	8003bbc <__mcmp>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	da67      	bge.n	800489e <_dtoa_r+0x90e>
 80047ce:	9b00      	ldr	r3, [sp, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	ee18 1a10 	vmov	r1, s16
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	220a      	movs	r2, #10
 80047da:	2300      	movs	r3, #0
 80047dc:	4620      	mov	r0, r4
 80047de:	f7fe ffcd 	bl	800377c <__multadd>
 80047e2:	9b08      	ldr	r3, [sp, #32]
 80047e4:	ee08 0a10 	vmov	s16, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 81b1 	beq.w	8004b50 <_dtoa_r+0xbc0>
 80047ee:	2300      	movs	r3, #0
 80047f0:	4639      	mov	r1, r7
 80047f2:	220a      	movs	r2, #10
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7fe ffc1 	bl	800377c <__multadd>
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	4607      	mov	r7, r0
 8004800:	f300 808e 	bgt.w	8004920 <_dtoa_r+0x990>
 8004804:	9b06      	ldr	r3, [sp, #24]
 8004806:	2b02      	cmp	r3, #2
 8004808:	dc51      	bgt.n	80048ae <_dtoa_r+0x91e>
 800480a:	e089      	b.n	8004920 <_dtoa_r+0x990>
 800480c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800480e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004812:	e74b      	b.n	80046ac <_dtoa_r+0x71c>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	1e5e      	subs	r6, r3, #1
 8004818:	9b07      	ldr	r3, [sp, #28]
 800481a:	42b3      	cmp	r3, r6
 800481c:	bfbf      	itttt	lt
 800481e:	9b07      	ldrlt	r3, [sp, #28]
 8004820:	9607      	strlt	r6, [sp, #28]
 8004822:	1af2      	sublt	r2, r6, r3
 8004824:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004826:	bfb6      	itet	lt
 8004828:	189b      	addlt	r3, r3, r2
 800482a:	1b9e      	subge	r6, r3, r6
 800482c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	bfb8      	it	lt
 8004832:	2600      	movlt	r6, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	bfb7      	itett	lt
 8004838:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800483c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004840:	1a9d      	sublt	r5, r3, r2
 8004842:	2300      	movlt	r3, #0
 8004844:	e734      	b.n	80046b0 <_dtoa_r+0x720>
 8004846:	9e07      	ldr	r6, [sp, #28]
 8004848:	9d04      	ldr	r5, [sp, #16]
 800484a:	9f08      	ldr	r7, [sp, #32]
 800484c:	e73b      	b.n	80046c6 <_dtoa_r+0x736>
 800484e:	9a07      	ldr	r2, [sp, #28]
 8004850:	e767      	b.n	8004722 <_dtoa_r+0x792>
 8004852:	9b06      	ldr	r3, [sp, #24]
 8004854:	2b01      	cmp	r3, #1
 8004856:	dc18      	bgt.n	800488a <_dtoa_r+0x8fa>
 8004858:	f1ba 0f00 	cmp.w	sl, #0
 800485c:	d115      	bne.n	800488a <_dtoa_r+0x8fa>
 800485e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004862:	b993      	cbnz	r3, 800488a <_dtoa_r+0x8fa>
 8004864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004868:	0d1b      	lsrs	r3, r3, #20
 800486a:	051b      	lsls	r3, r3, #20
 800486c:	b183      	cbz	r3, 8004890 <_dtoa_r+0x900>
 800486e:	9b04      	ldr	r3, [sp, #16]
 8004870:	3301      	adds	r3, #1
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	9b05      	ldr	r3, [sp, #20]
 8004876:	3301      	adds	r3, #1
 8004878:	9305      	str	r3, [sp, #20]
 800487a:	f04f 0801 	mov.w	r8, #1
 800487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f af6a 	bne.w	800475a <_dtoa_r+0x7ca>
 8004886:	2001      	movs	r0, #1
 8004888:	e76f      	b.n	800476a <_dtoa_r+0x7da>
 800488a:	f04f 0800 	mov.w	r8, #0
 800488e:	e7f6      	b.n	800487e <_dtoa_r+0x8ee>
 8004890:	4698      	mov	r8, r3
 8004892:	e7f4      	b.n	800487e <_dtoa_r+0x8ee>
 8004894:	f43f af7d 	beq.w	8004792 <_dtoa_r+0x802>
 8004898:	4618      	mov	r0, r3
 800489a:	301c      	adds	r0, #28
 800489c:	e772      	b.n	8004784 <_dtoa_r+0x7f4>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dc37      	bgt.n	8004914 <_dtoa_r+0x984>
 80048a4:	9b06      	ldr	r3, [sp, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	dd34      	ble.n	8004914 <_dtoa_r+0x984>
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	9302      	str	r3, [sp, #8]
 80048ae:	9b02      	ldr	r3, [sp, #8]
 80048b0:	b96b      	cbnz	r3, 80048ce <_dtoa_r+0x93e>
 80048b2:	4631      	mov	r1, r6
 80048b4:	2205      	movs	r2, #5
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7fe ff60 	bl	800377c <__multadd>
 80048bc:	4601      	mov	r1, r0
 80048be:	4606      	mov	r6, r0
 80048c0:	ee18 0a10 	vmov	r0, s16
 80048c4:	f7ff f97a 	bl	8003bbc <__mcmp>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f73f adbb 	bgt.w	8004444 <_dtoa_r+0x4b4>
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	9d01      	ldr	r5, [sp, #4]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	4631      	mov	r1, r6
 80048dc:	4620      	mov	r0, r4
 80048de:	f7fe ff2b 	bl	8003738 <_Bfree>
 80048e2:	2f00      	cmp	r7, #0
 80048e4:	f43f aea4 	beq.w	8004630 <_dtoa_r+0x6a0>
 80048e8:	f1b8 0f00 	cmp.w	r8, #0
 80048ec:	d005      	beq.n	80048fa <_dtoa_r+0x96a>
 80048ee:	45b8      	cmp	r8, r7
 80048f0:	d003      	beq.n	80048fa <_dtoa_r+0x96a>
 80048f2:	4641      	mov	r1, r8
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7fe ff1f 	bl	8003738 <_Bfree>
 80048fa:	4639      	mov	r1, r7
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7fe ff1b 	bl	8003738 <_Bfree>
 8004902:	e695      	b.n	8004630 <_dtoa_r+0x6a0>
 8004904:	2600      	movs	r6, #0
 8004906:	4637      	mov	r7, r6
 8004908:	e7e1      	b.n	80048ce <_dtoa_r+0x93e>
 800490a:	9700      	str	r7, [sp, #0]
 800490c:	4637      	mov	r7, r6
 800490e:	e599      	b.n	8004444 <_dtoa_r+0x4b4>
 8004910:	40240000 	.word	0x40240000
 8004914:	9b08      	ldr	r3, [sp, #32]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80ca 	beq.w	8004ab0 <_dtoa_r+0xb20>
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	9302      	str	r3, [sp, #8]
 8004920:	2d00      	cmp	r5, #0
 8004922:	dd05      	ble.n	8004930 <_dtoa_r+0x9a0>
 8004924:	4639      	mov	r1, r7
 8004926:	462a      	mov	r2, r5
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff f8d7 	bl	8003adc <__lshift>
 800492e:	4607      	mov	r7, r0
 8004930:	f1b8 0f00 	cmp.w	r8, #0
 8004934:	d05b      	beq.n	80049ee <_dtoa_r+0xa5e>
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4620      	mov	r0, r4
 800493a:	f7fe febd 	bl	80036b8 <_Balloc>
 800493e:	4605      	mov	r5, r0
 8004940:	b928      	cbnz	r0, 800494e <_dtoa_r+0x9be>
 8004942:	4b87      	ldr	r3, [pc, #540]	; (8004b60 <_dtoa_r+0xbd0>)
 8004944:	4602      	mov	r2, r0
 8004946:	f240 21ea 	movw	r1, #746	; 0x2ea
 800494a:	f7ff bb3b 	b.w	8003fc4 <_dtoa_r+0x34>
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	3202      	adds	r2, #2
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	f107 010c 	add.w	r1, r7, #12
 8004958:	300c      	adds	r0, #12
 800495a:	f000 f91c 	bl	8004b96 <memcpy>
 800495e:	2201      	movs	r2, #1
 8004960:	4629      	mov	r1, r5
 8004962:	4620      	mov	r0, r4
 8004964:	f7ff f8ba 	bl	8003adc <__lshift>
 8004968:	9b01      	ldr	r3, [sp, #4]
 800496a:	f103 0901 	add.w	r9, r3, #1
 800496e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004972:	4413      	add	r3, r2
 8004974:	9305      	str	r3, [sp, #20]
 8004976:	f00a 0301 	and.w	r3, sl, #1
 800497a:	46b8      	mov	r8, r7
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	4607      	mov	r7, r0
 8004980:	4631      	mov	r1, r6
 8004982:	ee18 0a10 	vmov	r0, s16
 8004986:	f7ff fa75 	bl	8003e74 <quorem>
 800498a:	4641      	mov	r1, r8
 800498c:	9002      	str	r0, [sp, #8]
 800498e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004992:	ee18 0a10 	vmov	r0, s16
 8004996:	f7ff f911 	bl	8003bbc <__mcmp>
 800499a:	463a      	mov	r2, r7
 800499c:	9003      	str	r0, [sp, #12]
 800499e:	4631      	mov	r1, r6
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff f927 	bl	8003bf4 <__mdiff>
 80049a6:	68c2      	ldr	r2, [r0, #12]
 80049a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80049ac:	4605      	mov	r5, r0
 80049ae:	bb02      	cbnz	r2, 80049f2 <_dtoa_r+0xa62>
 80049b0:	4601      	mov	r1, r0
 80049b2:	ee18 0a10 	vmov	r0, s16
 80049b6:	f7ff f901 	bl	8003bbc <__mcmp>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4629      	mov	r1, r5
 80049be:	4620      	mov	r0, r4
 80049c0:	9207      	str	r2, [sp, #28]
 80049c2:	f7fe feb9 	bl	8003738 <_Bfree>
 80049c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80049ca:	ea43 0102 	orr.w	r1, r3, r2
 80049ce:	9b04      	ldr	r3, [sp, #16]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	464d      	mov	r5, r9
 80049d4:	d10f      	bne.n	80049f6 <_dtoa_r+0xa66>
 80049d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80049da:	d02a      	beq.n	8004a32 <_dtoa_r+0xaa2>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd02      	ble.n	80049e8 <_dtoa_r+0xa58>
 80049e2:	9b02      	ldr	r3, [sp, #8]
 80049e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80049e8:	f88b a000 	strb.w	sl, [fp]
 80049ec:	e775      	b.n	80048da <_dtoa_r+0x94a>
 80049ee:	4638      	mov	r0, r7
 80049f0:	e7ba      	b.n	8004968 <_dtoa_r+0x9d8>
 80049f2:	2201      	movs	r2, #1
 80049f4:	e7e2      	b.n	80049bc <_dtoa_r+0xa2c>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db04      	blt.n	8004a06 <_dtoa_r+0xa76>
 80049fc:	9906      	ldr	r1, [sp, #24]
 80049fe:	430b      	orrs	r3, r1
 8004a00:	9904      	ldr	r1, [sp, #16]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	d122      	bne.n	8004a4c <_dtoa_r+0xabc>
 8004a06:	2a00      	cmp	r2, #0
 8004a08:	ddee      	ble.n	80049e8 <_dtoa_r+0xa58>
 8004a0a:	ee18 1a10 	vmov	r1, s16
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff f863 	bl	8003adc <__lshift>
 8004a16:	4631      	mov	r1, r6
 8004a18:	ee08 0a10 	vmov	s16, r0
 8004a1c:	f7ff f8ce 	bl	8003bbc <__mcmp>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	dc03      	bgt.n	8004a2c <_dtoa_r+0xa9c>
 8004a24:	d1e0      	bne.n	80049e8 <_dtoa_r+0xa58>
 8004a26:	f01a 0f01 	tst.w	sl, #1
 8004a2a:	d0dd      	beq.n	80049e8 <_dtoa_r+0xa58>
 8004a2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004a30:	d1d7      	bne.n	80049e2 <_dtoa_r+0xa52>
 8004a32:	2339      	movs	r3, #57	; 0x39
 8004a34:	f88b 3000 	strb.w	r3, [fp]
 8004a38:	462b      	mov	r3, r5
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a42:	2a39      	cmp	r2, #57	; 0x39
 8004a44:	d071      	beq.n	8004b2a <_dtoa_r+0xb9a>
 8004a46:	3201      	adds	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e746      	b.n	80048da <_dtoa_r+0x94a>
 8004a4c:	2a00      	cmp	r2, #0
 8004a4e:	dd07      	ble.n	8004a60 <_dtoa_r+0xad0>
 8004a50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004a54:	d0ed      	beq.n	8004a32 <_dtoa_r+0xaa2>
 8004a56:	f10a 0301 	add.w	r3, sl, #1
 8004a5a:	f88b 3000 	strb.w	r3, [fp]
 8004a5e:	e73c      	b.n	80048da <_dtoa_r+0x94a>
 8004a60:	9b05      	ldr	r3, [sp, #20]
 8004a62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004a66:	4599      	cmp	r9, r3
 8004a68:	d047      	beq.n	8004afa <_dtoa_r+0xb6a>
 8004a6a:	ee18 1a10 	vmov	r1, s16
 8004a6e:	2300      	movs	r3, #0
 8004a70:	220a      	movs	r2, #10
 8004a72:	4620      	mov	r0, r4
 8004a74:	f7fe fe82 	bl	800377c <__multadd>
 8004a78:	45b8      	cmp	r8, r7
 8004a7a:	ee08 0a10 	vmov	s16, r0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	f04f 020a 	mov.w	r2, #10
 8004a86:	4641      	mov	r1, r8
 8004a88:	4620      	mov	r0, r4
 8004a8a:	d106      	bne.n	8004a9a <_dtoa_r+0xb0a>
 8004a8c:	f7fe fe76 	bl	800377c <__multadd>
 8004a90:	4680      	mov	r8, r0
 8004a92:	4607      	mov	r7, r0
 8004a94:	f109 0901 	add.w	r9, r9, #1
 8004a98:	e772      	b.n	8004980 <_dtoa_r+0x9f0>
 8004a9a:	f7fe fe6f 	bl	800377c <__multadd>
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	4680      	mov	r8, r0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	220a      	movs	r2, #10
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fe fe68 	bl	800377c <__multadd>
 8004aac:	4607      	mov	r7, r0
 8004aae:	e7f1      	b.n	8004a94 <_dtoa_r+0xb04>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	9d01      	ldr	r5, [sp, #4]
 8004ab6:	ee18 0a10 	vmov	r0, s16
 8004aba:	4631      	mov	r1, r6
 8004abc:	f7ff f9da 	bl	8003e74 <quorem>
 8004ac0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	f805 ab01 	strb.w	sl, [r5], #1
 8004aca:	1aea      	subs	r2, r5, r3
 8004acc:	9b02      	ldr	r3, [sp, #8]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	dd09      	ble.n	8004ae6 <_dtoa_r+0xb56>
 8004ad2:	ee18 1a10 	vmov	r1, s16
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	220a      	movs	r2, #10
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7fe fe4e 	bl	800377c <__multadd>
 8004ae0:	ee08 0a10 	vmov	s16, r0
 8004ae4:	e7e7      	b.n	8004ab6 <_dtoa_r+0xb26>
 8004ae6:	9b02      	ldr	r3, [sp, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfc8      	it	gt
 8004aec:	461d      	movgt	r5, r3
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	bfd8      	it	le
 8004af2:	2501      	movle	r5, #1
 8004af4:	441d      	add	r5, r3
 8004af6:	f04f 0800 	mov.w	r8, #0
 8004afa:	ee18 1a10 	vmov	r1, s16
 8004afe:	2201      	movs	r2, #1
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7fe ffeb 	bl	8003adc <__lshift>
 8004b06:	4631      	mov	r1, r6
 8004b08:	ee08 0a10 	vmov	s16, r0
 8004b0c:	f7ff f856 	bl	8003bbc <__mcmp>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	dc91      	bgt.n	8004a38 <_dtoa_r+0xaa8>
 8004b14:	d102      	bne.n	8004b1c <_dtoa_r+0xb8c>
 8004b16:	f01a 0f01 	tst.w	sl, #1
 8004b1a:	d18d      	bne.n	8004a38 <_dtoa_r+0xaa8>
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	461d      	mov	r5, r3
 8004b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b24:	2a30      	cmp	r2, #48	; 0x30
 8004b26:	d0fa      	beq.n	8004b1e <_dtoa_r+0xb8e>
 8004b28:	e6d7      	b.n	80048da <_dtoa_r+0x94a>
 8004b2a:	9a01      	ldr	r2, [sp, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d184      	bne.n	8004a3a <_dtoa_r+0xaaa>
 8004b30:	9b00      	ldr	r3, [sp, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2331      	movs	r3, #49	; 0x31
 8004b38:	7013      	strb	r3, [r2, #0]
 8004b3a:	e6ce      	b.n	80048da <_dtoa_r+0x94a>
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <_dtoa_r+0xbd4>)
 8004b3e:	f7ff ba95 	b.w	800406c <_dtoa_r+0xdc>
 8004b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f47f aa6e 	bne.w	8004026 <_dtoa_r+0x96>
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <_dtoa_r+0xbd8>)
 8004b4c:	f7ff ba8e 	b.w	800406c <_dtoa_r+0xdc>
 8004b50:	9b02      	ldr	r3, [sp, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dcae      	bgt.n	8004ab4 <_dtoa_r+0xb24>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f73f aea8 	bgt.w	80048ae <_dtoa_r+0x91e>
 8004b5e:	e7a9      	b.n	8004ab4 <_dtoa_r+0xb24>
 8004b60:	08005a9b 	.word	0x08005a9b
 8004b64:	08005bf5 	.word	0x08005bf5
 8004b68:	08005be8 	.word	0x08005be8

08004b6c <fiprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	b503      	push	{r0, r1, lr}
 8004b70:	4601      	mov	r1, r0
 8004b72:	ab03      	add	r3, sp, #12
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <fiprintf+0x20>)
 8004b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	f000 f841 	bl	8004c04 <_vfiprintf_r>
 8004b82:	b002      	add	sp, #8
 8004b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b88:	b003      	add	sp, #12
 8004b8a:	4770      	bx	lr
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <__retarget_lock_init_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_acquire_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <__retarget_lock_release_recursive>:
 8004b94:	4770      	bx	lr

08004b96 <memcpy>:
 8004b96:	440a      	add	r2, r1
 8004b98:	4291      	cmp	r1, r2
 8004b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b9e:	d100      	bne.n	8004ba2 <memcpy+0xc>
 8004ba0:	4770      	bx	lr
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bac:	4291      	cmp	r1, r2
 8004bae:	d1f9      	bne.n	8004ba4 <memcpy+0xe>
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__sfputc_r>:
 8004bb2:	6893      	ldr	r3, [r2, #8]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	b410      	push	{r4}
 8004bba:	6093      	str	r3, [r2, #8]
 8004bbc:	da08      	bge.n	8004bd0 <__sfputc_r+0x1e>
 8004bbe:	6994      	ldr	r4, [r2, #24]
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	db01      	blt.n	8004bc8 <__sfputc_r+0x16>
 8004bc4:	290a      	cmp	r1, #10
 8004bc6:	d103      	bne.n	8004bd0 <__sfputc_r+0x1e>
 8004bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bcc:	f000 bade 	b.w	800518c <__swbuf_r>
 8004bd0:	6813      	ldr	r3, [r2, #0]
 8004bd2:	1c58      	adds	r0, r3, #1
 8004bd4:	6010      	str	r0, [r2, #0]
 8004bd6:	7019      	strb	r1, [r3, #0]
 8004bd8:	4608      	mov	r0, r1
 8004bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <__sfputs_r>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	4606      	mov	r6, r0
 8004be4:	460f      	mov	r7, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	18d5      	adds	r5, r2, r3
 8004bea:	42ac      	cmp	r4, r5
 8004bec:	d101      	bne.n	8004bf2 <__sfputs_r+0x12>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e007      	b.n	8004c02 <__sfputs_r+0x22>
 8004bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf6:	463a      	mov	r2, r7
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff ffda 	bl	8004bb2 <__sfputc_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d1f3      	bne.n	8004bea <__sfputs_r+0xa>
 8004c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c04 <_vfiprintf_r>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	460d      	mov	r5, r1
 8004c0a:	b09d      	sub	sp, #116	; 0x74
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	4698      	mov	r8, r3
 8004c10:	4606      	mov	r6, r0
 8004c12:	b118      	cbz	r0, 8004c1c <_vfiprintf_r+0x18>
 8004c14:	6983      	ldr	r3, [r0, #24]
 8004c16:	b90b      	cbnz	r3, 8004c1c <_vfiprintf_r+0x18>
 8004c18:	f000 fc9a 	bl	8005550 <__sinit>
 8004c1c:	4b89      	ldr	r3, [pc, #548]	; (8004e44 <_vfiprintf_r+0x240>)
 8004c1e:	429d      	cmp	r5, r3
 8004c20:	d11b      	bne.n	8004c5a <_vfiprintf_r+0x56>
 8004c22:	6875      	ldr	r5, [r6, #4]
 8004c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c26:	07d9      	lsls	r1, r3, #31
 8004c28:	d405      	bmi.n	8004c36 <_vfiprintf_r+0x32>
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	059a      	lsls	r2, r3, #22
 8004c2e:	d402      	bmi.n	8004c36 <_vfiprintf_r+0x32>
 8004c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c32:	f7ff ffae 	bl	8004b92 <__retarget_lock_acquire_recursive>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	071b      	lsls	r3, r3, #28
 8004c3a:	d501      	bpl.n	8004c40 <_vfiprintf_r+0x3c>
 8004c3c:	692b      	ldr	r3, [r5, #16]
 8004c3e:	b9eb      	cbnz	r3, 8004c7c <_vfiprintf_r+0x78>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f000 faf4 	bl	8005230 <__swsetup_r>
 8004c48:	b1c0      	cbz	r0, 8004c7c <_vfiprintf_r+0x78>
 8004c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c4c:	07dc      	lsls	r4, r3, #31
 8004c4e:	d50e      	bpl.n	8004c6e <_vfiprintf_r+0x6a>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b01d      	add	sp, #116	; 0x74
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <_vfiprintf_r+0x244>)
 8004c5c:	429d      	cmp	r5, r3
 8004c5e:	d101      	bne.n	8004c64 <_vfiprintf_r+0x60>
 8004c60:	68b5      	ldr	r5, [r6, #8]
 8004c62:	e7df      	b.n	8004c24 <_vfiprintf_r+0x20>
 8004c64:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <_vfiprintf_r+0x248>)
 8004c66:	429d      	cmp	r5, r3
 8004c68:	bf08      	it	eq
 8004c6a:	68f5      	ldreq	r5, [r6, #12]
 8004c6c:	e7da      	b.n	8004c24 <_vfiprintf_r+0x20>
 8004c6e:	89ab      	ldrh	r3, [r5, #12]
 8004c70:	0598      	lsls	r0, r3, #22
 8004c72:	d4ed      	bmi.n	8004c50 <_vfiprintf_r+0x4c>
 8004c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c76:	f7ff ff8d 	bl	8004b94 <__retarget_lock_release_recursive>
 8004c7a:	e7e9      	b.n	8004c50 <_vfiprintf_r+0x4c>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c80:	2320      	movs	r3, #32
 8004c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c8a:	2330      	movs	r3, #48	; 0x30
 8004c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e50 <_vfiprintf_r+0x24c>
 8004c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c94:	f04f 0901 	mov.w	r9, #1
 8004c98:	4623      	mov	r3, r4
 8004c9a:	469a      	mov	sl, r3
 8004c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ca0:	b10a      	cbz	r2, 8004ca6 <_vfiprintf_r+0xa2>
 8004ca2:	2a25      	cmp	r2, #37	; 0x25
 8004ca4:	d1f9      	bne.n	8004c9a <_vfiprintf_r+0x96>
 8004ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8004caa:	d00b      	beq.n	8004cc4 <_vfiprintf_r+0xc0>
 8004cac:	465b      	mov	r3, fp
 8004cae:	4622      	mov	r2, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f7ff ff94 	bl	8004be0 <__sfputs_r>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f000 80aa 	beq.w	8004e12 <_vfiprintf_r+0x20e>
 8004cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cc0:	445a      	add	r2, fp
 8004cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a2 	beq.w	8004e12 <_vfiprintf_r+0x20e>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd8:	f10a 0a01 	add.w	sl, sl, #1
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	9307      	str	r3, [sp, #28]
 8004ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce6:	4654      	mov	r4, sl
 8004ce8:	2205      	movs	r2, #5
 8004cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cee:	4858      	ldr	r0, [pc, #352]	; (8004e50 <_vfiprintf_r+0x24c>)
 8004cf0:	f7fb fa76 	bl	80001e0 <memchr>
 8004cf4:	9a04      	ldr	r2, [sp, #16]
 8004cf6:	b9d8      	cbnz	r0, 8004d30 <_vfiprintf_r+0x12c>
 8004cf8:	06d1      	lsls	r1, r2, #27
 8004cfa:	bf44      	itt	mi
 8004cfc:	2320      	movmi	r3, #32
 8004cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d02:	0713      	lsls	r3, r2, #28
 8004d04:	bf44      	itt	mi
 8004d06:	232b      	movmi	r3, #43	; 0x2b
 8004d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d10:	2b2a      	cmp	r3, #42	; 0x2a
 8004d12:	d015      	beq.n	8004d40 <_vfiprintf_r+0x13c>
 8004d14:	9a07      	ldr	r2, [sp, #28]
 8004d16:	4654      	mov	r4, sl
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f04f 0c0a 	mov.w	ip, #10
 8004d1e:	4621      	mov	r1, r4
 8004d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d24:	3b30      	subs	r3, #48	; 0x30
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d94e      	bls.n	8004dc8 <_vfiprintf_r+0x1c4>
 8004d2a:	b1b0      	cbz	r0, 8004d5a <_vfiprintf_r+0x156>
 8004d2c:	9207      	str	r2, [sp, #28]
 8004d2e:	e014      	b.n	8004d5a <_vfiprintf_r+0x156>
 8004d30:	eba0 0308 	sub.w	r3, r0, r8
 8004d34:	fa09 f303 	lsl.w	r3, r9, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	46a2      	mov	sl, r4
 8004d3e:	e7d2      	b.n	8004ce6 <_vfiprintf_r+0xe2>
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	1d19      	adds	r1, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	9103      	str	r1, [sp, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfbb      	ittet	lt
 8004d4c:	425b      	neglt	r3, r3
 8004d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d52:	9307      	strge	r3, [sp, #28]
 8004d54:	9307      	strlt	r3, [sp, #28]
 8004d56:	bfb8      	it	lt
 8004d58:	9204      	strlt	r2, [sp, #16]
 8004d5a:	7823      	ldrb	r3, [r4, #0]
 8004d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5e:	d10c      	bne.n	8004d7a <_vfiprintf_r+0x176>
 8004d60:	7863      	ldrb	r3, [r4, #1]
 8004d62:	2b2a      	cmp	r3, #42	; 0x2a
 8004d64:	d135      	bne.n	8004dd2 <_vfiprintf_r+0x1ce>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	1d1a      	adds	r2, r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	9203      	str	r2, [sp, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfb8      	it	lt
 8004d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d76:	3402      	adds	r4, #2
 8004d78:	9305      	str	r3, [sp, #20]
 8004d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e60 <_vfiprintf_r+0x25c>
 8004d7e:	7821      	ldrb	r1, [r4, #0]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4650      	mov	r0, sl
 8004d84:	f7fb fa2c 	bl	80001e0 <memchr>
 8004d88:	b140      	cbz	r0, 8004d9c <_vfiprintf_r+0x198>
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	eba0 000a 	sub.w	r0, r0, sl
 8004d90:	fa03 f000 	lsl.w	r0, r3, r0
 8004d94:	9b04      	ldr	r3, [sp, #16]
 8004d96:	4303      	orrs	r3, r0
 8004d98:	3401      	adds	r4, #1
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da0:	482c      	ldr	r0, [pc, #176]	; (8004e54 <_vfiprintf_r+0x250>)
 8004da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da6:	2206      	movs	r2, #6
 8004da8:	f7fb fa1a 	bl	80001e0 <memchr>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d03f      	beq.n	8004e30 <_vfiprintf_r+0x22c>
 8004db0:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <_vfiprintf_r+0x254>)
 8004db2:	bb1b      	cbnz	r3, 8004dfc <_vfiprintf_r+0x1f8>
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	3307      	adds	r3, #7
 8004db8:	f023 0307 	bic.w	r3, r3, #7
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc2:	443b      	add	r3, r7
 8004dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc6:	e767      	b.n	8004c98 <_vfiprintf_r+0x94>
 8004dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dcc:	460c      	mov	r4, r1
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e7a5      	b.n	8004d1e <_vfiprintf_r+0x11a>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	3401      	adds	r4, #1
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f04f 0c0a 	mov.w	ip, #10
 8004dde:	4620      	mov	r0, r4
 8004de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de4:	3a30      	subs	r2, #48	; 0x30
 8004de6:	2a09      	cmp	r2, #9
 8004de8:	d903      	bls.n	8004df2 <_vfiprintf_r+0x1ee>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0c5      	beq.n	8004d7a <_vfiprintf_r+0x176>
 8004dee:	9105      	str	r1, [sp, #20]
 8004df0:	e7c3      	b.n	8004d7a <_vfiprintf_r+0x176>
 8004df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df6:	4604      	mov	r4, r0
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e7f0      	b.n	8004dde <_vfiprintf_r+0x1da>
 8004dfc:	ab03      	add	r3, sp, #12
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	462a      	mov	r2, r5
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <_vfiprintf_r+0x258>)
 8004e04:	a904      	add	r1, sp, #16
 8004e06:	4630      	mov	r0, r6
 8004e08:	f3af 8000 	nop.w
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	1c78      	adds	r0, r7, #1
 8004e10:	d1d6      	bne.n	8004dc0 <_vfiprintf_r+0x1bc>
 8004e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e14:	07d9      	lsls	r1, r3, #31
 8004e16:	d405      	bmi.n	8004e24 <_vfiprintf_r+0x220>
 8004e18:	89ab      	ldrh	r3, [r5, #12]
 8004e1a:	059a      	lsls	r2, r3, #22
 8004e1c:	d402      	bmi.n	8004e24 <_vfiprintf_r+0x220>
 8004e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e20:	f7ff feb8 	bl	8004b94 <__retarget_lock_release_recursive>
 8004e24:	89ab      	ldrh	r3, [r5, #12]
 8004e26:	065b      	lsls	r3, r3, #25
 8004e28:	f53f af12 	bmi.w	8004c50 <_vfiprintf_r+0x4c>
 8004e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2e:	e711      	b.n	8004c54 <_vfiprintf_r+0x50>
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <_vfiprintf_r+0x258>)
 8004e38:	a904      	add	r1, sp, #16
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f000 f880 	bl	8004f40 <_printf_i>
 8004e40:	e7e4      	b.n	8004e0c <_vfiprintf_r+0x208>
 8004e42:	bf00      	nop
 8004e44:	08005ca8 	.word	0x08005ca8
 8004e48:	08005cc8 	.word	0x08005cc8
 8004e4c:	08005c88 	.word	0x08005c88
 8004e50:	08005c52 	.word	0x08005c52
 8004e54:	08005c5c 	.word	0x08005c5c
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	08004be1 	.word	0x08004be1
 8004e60:	08005c58 	.word	0x08005c58

08004e64 <_printf_common>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	4616      	mov	r6, r2
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	688a      	ldr	r2, [r1, #8]
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bfb8      	it	lt
 8004e78:	4613      	movlt	r3, r2
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e80:	4607      	mov	r7, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b10a      	cbz	r2, 8004e8a <_printf_common+0x26>
 8004e86:	3301      	adds	r3, #1
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	0699      	lsls	r1, r3, #26
 8004e8e:	bf42      	ittt	mi
 8004e90:	6833      	ldrmi	r3, [r6, #0]
 8004e92:	3302      	addmi	r3, #2
 8004e94:	6033      	strmi	r3, [r6, #0]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d106      	bne.n	8004eac <_printf_common+0x48>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	6832      	ldr	r2, [r6, #0]
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dc26      	bgt.n	8004efa <_printf_common+0x96>
 8004eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb0:	1e13      	subs	r3, r2, #0
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	0692      	lsls	r2, r2, #26
 8004eba:	d42b      	bmi.n	8004f14 <_printf_common+0xb0>
 8004ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d01e      	beq.n	8004f08 <_printf_common+0xa4>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	68e5      	ldr	r5, [r4, #12]
 8004ece:	6832      	ldr	r2, [r6, #0]
 8004ed0:	f003 0306 	and.w	r3, r3, #6
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	bf08      	it	eq
 8004ed8:	1aad      	subeq	r5, r5, r2
 8004eda:	68a3      	ldr	r3, [r4, #8]
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	bf0c      	ite	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	2500      	movne	r5, #0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bfc4      	itt	gt
 8004eea:	1a9b      	subgt	r3, r3, r2
 8004eec:	18ed      	addgt	r5, r5, r3
 8004eee:	2600      	movs	r6, #0
 8004ef0:	341a      	adds	r4, #26
 8004ef2:	42b5      	cmp	r5, r6
 8004ef4:	d11a      	bne.n	8004f2c <_printf_common+0xc8>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e008      	b.n	8004f0c <_printf_common+0xa8>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4649      	mov	r1, r9
 8004f00:	4638      	mov	r0, r7
 8004f02:	47c0      	blx	r8
 8004f04:	3001      	adds	r0, #1
 8004f06:	d103      	bne.n	8004f10 <_printf_common+0xac>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	3501      	adds	r5, #1
 8004f12:	e7c6      	b.n	8004ea2 <_printf_common+0x3e>
 8004f14:	18e1      	adds	r1, r4, r3
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	2030      	movs	r0, #48	; 0x30
 8004f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f1e:	4422      	add	r2, r4
 8004f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f28:	3302      	adds	r3, #2
 8004f2a:	e7c7      	b.n	8004ebc <_printf_common+0x58>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d0e6      	beq.n	8004f08 <_printf_common+0xa4>
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7d9      	b.n	8004ef2 <_printf_common+0x8e>
	...

08004f40 <_printf_i>:
 8004f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	7e0f      	ldrb	r7, [r1, #24]
 8004f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f48:	2f78      	cmp	r7, #120	; 0x78
 8004f4a:	4691      	mov	r9, r2
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	469a      	mov	sl, r3
 8004f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f56:	d807      	bhi.n	8004f68 <_printf_i+0x28>
 8004f58:	2f62      	cmp	r7, #98	; 0x62
 8004f5a:	d80a      	bhi.n	8004f72 <_printf_i+0x32>
 8004f5c:	2f00      	cmp	r7, #0
 8004f5e:	f000 80d8 	beq.w	8005112 <_printf_i+0x1d2>
 8004f62:	2f58      	cmp	r7, #88	; 0x58
 8004f64:	f000 80a3 	beq.w	80050ae <_printf_i+0x16e>
 8004f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f70:	e03a      	b.n	8004fe8 <_printf_i+0xa8>
 8004f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f76:	2b15      	cmp	r3, #21
 8004f78:	d8f6      	bhi.n	8004f68 <_printf_i+0x28>
 8004f7a:	a101      	add	r1, pc, #4	; (adr r1, 8004f80 <_printf_i+0x40>)
 8004f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004f69 	.word	0x08004f69
 8004f8c:	08004f69 	.word	0x08004f69
 8004f90:	08004f69 	.word	0x08004f69
 8004f94:	08004f69 	.word	0x08004f69
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004f69 	.word	0x08004f69
 8004fa0:	08004f69 	.word	0x08004f69
 8004fa4:	08004f69 	.word	0x08004f69
 8004fa8:	08004f69 	.word	0x08004f69
 8004fac:	080050f9 	.word	0x080050f9
 8004fb0:	0800501d 	.word	0x0800501d
 8004fb4:	080050db 	.word	0x080050db
 8004fb8:	08004f69 	.word	0x08004f69
 8004fbc:	08004f69 	.word	0x08004f69
 8004fc0:	0800511b 	.word	0x0800511b
 8004fc4:	08004f69 	.word	0x08004f69
 8004fc8:	0800501d 	.word	0x0800501d
 8004fcc:	08004f69 	.word	0x08004f69
 8004fd0:	08004f69 	.word	0x08004f69
 8004fd4:	080050e3 	.word	0x080050e3
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	1d1a      	adds	r2, r3, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0a3      	b.n	8005134 <_printf_i+0x1f4>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	6829      	ldr	r1, [r5, #0]
 8004ff0:	0606      	lsls	r6, r0, #24
 8004ff2:	f101 0304 	add.w	r3, r1, #4
 8004ff6:	d50a      	bpl.n	800500e <_printf_i+0xce>
 8004ff8:	680e      	ldr	r6, [r1, #0]
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	2e00      	cmp	r6, #0
 8004ffe:	da03      	bge.n	8005008 <_printf_i+0xc8>
 8005000:	232d      	movs	r3, #45	; 0x2d
 8005002:	4276      	negs	r6, r6
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005008:	485e      	ldr	r0, [pc, #376]	; (8005184 <_printf_i+0x244>)
 800500a:	230a      	movs	r3, #10
 800500c:	e019      	b.n	8005042 <_printf_i+0x102>
 800500e:	680e      	ldr	r6, [r1, #0]
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005016:	bf18      	it	ne
 8005018:	b236      	sxthne	r6, r6
 800501a:	e7ef      	b.n	8004ffc <_printf_i+0xbc>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	6820      	ldr	r0, [r4, #0]
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	6029      	str	r1, [r5, #0]
 8005024:	0601      	lsls	r1, r0, #24
 8005026:	d501      	bpl.n	800502c <_printf_i+0xec>
 8005028:	681e      	ldr	r6, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0xf2>
 800502c:	0646      	lsls	r6, r0, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0xe8>
 8005030:	881e      	ldrh	r6, [r3, #0]
 8005032:	4854      	ldr	r0, [pc, #336]	; (8005184 <_printf_i+0x244>)
 8005034:	2f6f      	cmp	r7, #111	; 0x6f
 8005036:	bf0c      	ite	eq
 8005038:	2308      	moveq	r3, #8
 800503a:	230a      	movne	r3, #10
 800503c:	2100      	movs	r1, #0
 800503e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005042:	6865      	ldr	r5, [r4, #4]
 8005044:	60a5      	str	r5, [r4, #8]
 8005046:	2d00      	cmp	r5, #0
 8005048:	bfa2      	ittt	ge
 800504a:	6821      	ldrge	r1, [r4, #0]
 800504c:	f021 0104 	bicge.w	r1, r1, #4
 8005050:	6021      	strge	r1, [r4, #0]
 8005052:	b90e      	cbnz	r6, 8005058 <_printf_i+0x118>
 8005054:	2d00      	cmp	r5, #0
 8005056:	d04d      	beq.n	80050f4 <_printf_i+0x1b4>
 8005058:	4615      	mov	r5, r2
 800505a:	fbb6 f1f3 	udiv	r1, r6, r3
 800505e:	fb03 6711 	mls	r7, r3, r1, r6
 8005062:	5dc7      	ldrb	r7, [r0, r7]
 8005064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005068:	4637      	mov	r7, r6
 800506a:	42bb      	cmp	r3, r7
 800506c:	460e      	mov	r6, r1
 800506e:	d9f4      	bls.n	800505a <_printf_i+0x11a>
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10b      	bne.n	800508c <_printf_i+0x14c>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07de      	lsls	r6, r3, #31
 8005078:	d508      	bpl.n	800508c <_printf_i+0x14c>
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	6861      	ldr	r1, [r4, #4]
 800507e:	4299      	cmp	r1, r3
 8005080:	bfde      	ittt	le
 8005082:	2330      	movle	r3, #48	; 0x30
 8005084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800508c:	1b52      	subs	r2, r2, r5
 800508e:	6122      	str	r2, [r4, #16]
 8005090:	f8cd a000 	str.w	sl, [sp]
 8005094:	464b      	mov	r3, r9
 8005096:	aa03      	add	r2, sp, #12
 8005098:	4621      	mov	r1, r4
 800509a:	4640      	mov	r0, r8
 800509c:	f7ff fee2 	bl	8004e64 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d14c      	bne.n	800513e <_printf_i+0x1fe>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	b004      	add	sp, #16
 80050aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ae:	4835      	ldr	r0, [pc, #212]	; (8005184 <_printf_i+0x244>)
 80050b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050b4:	6829      	ldr	r1, [r5, #0]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050bc:	6029      	str	r1, [r5, #0]
 80050be:	061d      	lsls	r5, r3, #24
 80050c0:	d514      	bpl.n	80050ec <_printf_i+0x1ac>
 80050c2:	07df      	lsls	r7, r3, #31
 80050c4:	bf44      	itt	mi
 80050c6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ca:	6023      	strmi	r3, [r4, #0]
 80050cc:	b91e      	cbnz	r6, 80050d6 <_printf_i+0x196>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	f023 0320 	bic.w	r3, r3, #32
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	2310      	movs	r3, #16
 80050d8:	e7b0      	b.n	800503c <_printf_i+0xfc>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f043 0320 	orr.w	r3, r3, #32
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	2378      	movs	r3, #120	; 0x78
 80050e4:	4828      	ldr	r0, [pc, #160]	; (8005188 <_printf_i+0x248>)
 80050e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ea:	e7e3      	b.n	80050b4 <_printf_i+0x174>
 80050ec:	0659      	lsls	r1, r3, #25
 80050ee:	bf48      	it	mi
 80050f0:	b2b6      	uxthmi	r6, r6
 80050f2:	e7e6      	b.n	80050c2 <_printf_i+0x182>
 80050f4:	4615      	mov	r5, r2
 80050f6:	e7bb      	b.n	8005070 <_printf_i+0x130>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	6826      	ldr	r6, [r4, #0]
 80050fc:	6961      	ldr	r1, [r4, #20]
 80050fe:	1d18      	adds	r0, r3, #4
 8005100:	6028      	str	r0, [r5, #0]
 8005102:	0635      	lsls	r5, r6, #24
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	d501      	bpl.n	800510c <_printf_i+0x1cc>
 8005108:	6019      	str	r1, [r3, #0]
 800510a:	e002      	b.n	8005112 <_printf_i+0x1d2>
 800510c:	0670      	lsls	r0, r6, #25
 800510e:	d5fb      	bpl.n	8005108 <_printf_i+0x1c8>
 8005110:	8019      	strh	r1, [r3, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	4615      	mov	r5, r2
 8005118:	e7ba      	b.n	8005090 <_printf_i+0x150>
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	602a      	str	r2, [r5, #0]
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	6862      	ldr	r2, [r4, #4]
 8005124:	2100      	movs	r1, #0
 8005126:	4628      	mov	r0, r5
 8005128:	f7fb f85a 	bl	80001e0 <memchr>
 800512c:	b108      	cbz	r0, 8005132 <_printf_i+0x1f2>
 800512e:	1b40      	subs	r0, r0, r5
 8005130:	6060      	str	r0, [r4, #4]
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	2300      	movs	r3, #0
 8005138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513c:	e7a8      	b.n	8005090 <_printf_i+0x150>
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	462a      	mov	r2, r5
 8005142:	4649      	mov	r1, r9
 8005144:	4640      	mov	r0, r8
 8005146:	47d0      	blx	sl
 8005148:	3001      	adds	r0, #1
 800514a:	d0ab      	beq.n	80050a4 <_printf_i+0x164>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	079b      	lsls	r3, r3, #30
 8005150:	d413      	bmi.n	800517a <_printf_i+0x23a>
 8005152:	68e0      	ldr	r0, [r4, #12]
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	4298      	cmp	r0, r3
 8005158:	bfb8      	it	lt
 800515a:	4618      	movlt	r0, r3
 800515c:	e7a4      	b.n	80050a8 <_printf_i+0x168>
 800515e:	2301      	movs	r3, #1
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	47d0      	blx	sl
 8005168:	3001      	adds	r0, #1
 800516a:	d09b      	beq.n	80050a4 <_printf_i+0x164>
 800516c:	3501      	adds	r5, #1
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	9903      	ldr	r1, [sp, #12]
 8005172:	1a5b      	subs	r3, r3, r1
 8005174:	42ab      	cmp	r3, r5
 8005176:	dcf2      	bgt.n	800515e <_printf_i+0x21e>
 8005178:	e7eb      	b.n	8005152 <_printf_i+0x212>
 800517a:	2500      	movs	r5, #0
 800517c:	f104 0619 	add.w	r6, r4, #25
 8005180:	e7f5      	b.n	800516e <_printf_i+0x22e>
 8005182:	bf00      	nop
 8005184:	08005c63 	.word	0x08005c63
 8005188:	08005c74 	.word	0x08005c74

0800518c <__swbuf_r>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	460e      	mov	r6, r1
 8005190:	4614      	mov	r4, r2
 8005192:	4605      	mov	r5, r0
 8005194:	b118      	cbz	r0, 800519e <__swbuf_r+0x12>
 8005196:	6983      	ldr	r3, [r0, #24]
 8005198:	b90b      	cbnz	r3, 800519e <__swbuf_r+0x12>
 800519a:	f000 f9d9 	bl	8005550 <__sinit>
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <__swbuf_r+0x98>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d12b      	bne.n	80051fc <__swbuf_r+0x70>
 80051a4:	686c      	ldr	r4, [r5, #4]
 80051a6:	69a3      	ldr	r3, [r4, #24]
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	d52f      	bpl.n	8005210 <__swbuf_r+0x84>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	b36b      	cbz	r3, 8005210 <__swbuf_r+0x84>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	1ac0      	subs	r0, r0, r3
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	b2f6      	uxtb	r6, r6
 80051be:	4283      	cmp	r3, r0
 80051c0:	4637      	mov	r7, r6
 80051c2:	dc04      	bgt.n	80051ce <__swbuf_r+0x42>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f92e 	bl	8005428 <_fflush_r>
 80051cc:	bb30      	cbnz	r0, 800521c <__swbuf_r+0x90>
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	701e      	strb	r6, [r3, #0]
 80051dc:	6963      	ldr	r3, [r4, #20]
 80051de:	3001      	adds	r0, #1
 80051e0:	4283      	cmp	r3, r0
 80051e2:	d004      	beq.n	80051ee <__swbuf_r+0x62>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	07db      	lsls	r3, r3, #31
 80051e8:	d506      	bpl.n	80051f8 <__swbuf_r+0x6c>
 80051ea:	2e0a      	cmp	r6, #10
 80051ec:	d104      	bne.n	80051f8 <__swbuf_r+0x6c>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f919 	bl	8005428 <_fflush_r>
 80051f6:	b988      	cbnz	r0, 800521c <__swbuf_r+0x90>
 80051f8:	4638      	mov	r0, r7
 80051fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <__swbuf_r+0x9c>)
 80051fe:	429c      	cmp	r4, r3
 8005200:	d101      	bne.n	8005206 <__swbuf_r+0x7a>
 8005202:	68ac      	ldr	r4, [r5, #8]
 8005204:	e7cf      	b.n	80051a6 <__swbuf_r+0x1a>
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <__swbuf_r+0xa0>)
 8005208:	429c      	cmp	r4, r3
 800520a:	bf08      	it	eq
 800520c:	68ec      	ldreq	r4, [r5, #12]
 800520e:	e7ca      	b.n	80051a6 <__swbuf_r+0x1a>
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f80c 	bl	8005230 <__swsetup_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0cb      	beq.n	80051b4 <__swbuf_r+0x28>
 800521c:	f04f 37ff 	mov.w	r7, #4294967295
 8005220:	e7ea      	b.n	80051f8 <__swbuf_r+0x6c>
 8005222:	bf00      	nop
 8005224:	08005ca8 	.word	0x08005ca8
 8005228:	08005cc8 	.word	0x08005cc8
 800522c:	08005c88 	.word	0x08005c88

08005230 <__swsetup_r>:
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <__swsetup_r+0xcc>)
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	681d      	ldr	r5, [r3, #0]
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	b125      	cbz	r5, 8005246 <__swsetup_r+0x16>
 800523c:	69ab      	ldr	r3, [r5, #24]
 800523e:	b913      	cbnz	r3, 8005246 <__swsetup_r+0x16>
 8005240:	4628      	mov	r0, r5
 8005242:	f000 f985 	bl	8005550 <__sinit>
 8005246:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <__swsetup_r+0xd0>)
 8005248:	429c      	cmp	r4, r3
 800524a:	d10f      	bne.n	800526c <__swsetup_r+0x3c>
 800524c:	686c      	ldr	r4, [r5, #4]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005254:	0719      	lsls	r1, r3, #28
 8005256:	d42c      	bmi.n	80052b2 <__swsetup_r+0x82>
 8005258:	06dd      	lsls	r5, r3, #27
 800525a:	d411      	bmi.n	8005280 <__swsetup_r+0x50>
 800525c:	2309      	movs	r3, #9
 800525e:	6033      	str	r3, [r6, #0]
 8005260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	e03e      	b.n	80052ea <__swsetup_r+0xba>
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <__swsetup_r+0xd4>)
 800526e:	429c      	cmp	r4, r3
 8005270:	d101      	bne.n	8005276 <__swsetup_r+0x46>
 8005272:	68ac      	ldr	r4, [r5, #8]
 8005274:	e7eb      	b.n	800524e <__swsetup_r+0x1e>
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <__swsetup_r+0xd8>)
 8005278:	429c      	cmp	r4, r3
 800527a:	bf08      	it	eq
 800527c:	68ec      	ldreq	r4, [r5, #12]
 800527e:	e7e6      	b.n	800524e <__swsetup_r+0x1e>
 8005280:	0758      	lsls	r0, r3, #29
 8005282:	d512      	bpl.n	80052aa <__swsetup_r+0x7a>
 8005284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005286:	b141      	cbz	r1, 800529a <__swsetup_r+0x6a>
 8005288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800528c:	4299      	cmp	r1, r3
 800528e:	d002      	beq.n	8005296 <__swsetup_r+0x66>
 8005290:	4630      	mov	r0, r6
 8005292:	f7fd ffdb 	bl	800324c <_free_r>
 8005296:	2300      	movs	r3, #0
 8005298:	6363      	str	r3, [r4, #52]	; 0x34
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	2300      	movs	r3, #0
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f043 0308 	orr.w	r3, r3, #8
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	b94b      	cbnz	r3, 80052ca <__swsetup_r+0x9a>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c0:	d003      	beq.n	80052ca <__swsetup_r+0x9a>
 80052c2:	4621      	mov	r1, r4
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 fa05 	bl	80056d4 <__smakebuf_r>
 80052ca:	89a0      	ldrh	r0, [r4, #12]
 80052cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052d0:	f010 0301 	ands.w	r3, r0, #1
 80052d4:	d00a      	beq.n	80052ec <__swsetup_r+0xbc>
 80052d6:	2300      	movs	r3, #0
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6963      	ldr	r3, [r4, #20]
 80052dc:	425b      	negs	r3, r3
 80052de:	61a3      	str	r3, [r4, #24]
 80052e0:	6923      	ldr	r3, [r4, #16]
 80052e2:	b943      	cbnz	r3, 80052f6 <__swsetup_r+0xc6>
 80052e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052e8:	d1ba      	bne.n	8005260 <__swsetup_r+0x30>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	0781      	lsls	r1, r0, #30
 80052ee:	bf58      	it	pl
 80052f0:	6963      	ldrpl	r3, [r4, #20]
 80052f2:	60a3      	str	r3, [r4, #8]
 80052f4:	e7f4      	b.n	80052e0 <__swsetup_r+0xb0>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e7f7      	b.n	80052ea <__swsetup_r+0xba>
 80052fa:	bf00      	nop
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	08005ca8 	.word	0x08005ca8
 8005304:	08005cc8 	.word	0x08005cc8
 8005308:	08005c88 	.word	0x08005c88

0800530c <abort>:
 800530c:	b508      	push	{r3, lr}
 800530e:	2006      	movs	r0, #6
 8005310:	f000 fa48 	bl	80057a4 <raise>
 8005314:	2001      	movs	r0, #1
 8005316:	f7fc fc75 	bl	8001c04 <_exit>
	...

0800531c <__sflush_r>:
 800531c:	898a      	ldrh	r2, [r1, #12]
 800531e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	4605      	mov	r5, r0
 8005324:	0710      	lsls	r0, r2, #28
 8005326:	460c      	mov	r4, r1
 8005328:	d458      	bmi.n	80053dc <__sflush_r+0xc0>
 800532a:	684b      	ldr	r3, [r1, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dc05      	bgt.n	800533c <__sflush_r+0x20>
 8005330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	dc02      	bgt.n	800533c <__sflush_r+0x20>
 8005336:	2000      	movs	r0, #0
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800533e:	2e00      	cmp	r6, #0
 8005340:	d0f9      	beq.n	8005336 <__sflush_r+0x1a>
 8005342:	2300      	movs	r3, #0
 8005344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005348:	682f      	ldr	r7, [r5, #0]
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	d032      	beq.n	80053b4 <__sflush_r+0x98>
 800534e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	075a      	lsls	r2, r3, #29
 8005354:	d505      	bpl.n	8005362 <__sflush_r+0x46>
 8005356:	6863      	ldr	r3, [r4, #4]
 8005358:	1ac0      	subs	r0, r0, r3
 800535a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800535c:	b10b      	cbz	r3, 8005362 <__sflush_r+0x46>
 800535e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	2300      	movs	r3, #0
 8005364:	4602      	mov	r2, r0
 8005366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005368:	6a21      	ldr	r1, [r4, #32]
 800536a:	4628      	mov	r0, r5
 800536c:	47b0      	blx	r6
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	d106      	bne.n	8005382 <__sflush_r+0x66>
 8005374:	6829      	ldr	r1, [r5, #0]
 8005376:	291d      	cmp	r1, #29
 8005378:	d82c      	bhi.n	80053d4 <__sflush_r+0xb8>
 800537a:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <__sflush_r+0x108>)
 800537c:	40ca      	lsrs	r2, r1
 800537e:	07d6      	lsls	r6, r2, #31
 8005380:	d528      	bpl.n	80053d4 <__sflush_r+0xb8>
 8005382:	2200      	movs	r2, #0
 8005384:	6062      	str	r2, [r4, #4]
 8005386:	04d9      	lsls	r1, r3, #19
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	d504      	bpl.n	8005398 <__sflush_r+0x7c>
 800538e:	1c42      	adds	r2, r0, #1
 8005390:	d101      	bne.n	8005396 <__sflush_r+0x7a>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b903      	cbnz	r3, 8005398 <__sflush_r+0x7c>
 8005396:	6560      	str	r0, [r4, #84]	; 0x54
 8005398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539a:	602f      	str	r7, [r5, #0]
 800539c:	2900      	cmp	r1, #0
 800539e:	d0ca      	beq.n	8005336 <__sflush_r+0x1a>
 80053a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d002      	beq.n	80053ae <__sflush_r+0x92>
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7fd ff4f 	bl	800324c <_free_r>
 80053ae:	2000      	movs	r0, #0
 80053b0:	6360      	str	r0, [r4, #52]	; 0x34
 80053b2:	e7c1      	b.n	8005338 <__sflush_r+0x1c>
 80053b4:	6a21      	ldr	r1, [r4, #32]
 80053b6:	2301      	movs	r3, #1
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b0      	blx	r6
 80053bc:	1c41      	adds	r1, r0, #1
 80053be:	d1c7      	bne.n	8005350 <__sflush_r+0x34>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0c4      	beq.n	8005350 <__sflush_r+0x34>
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d001      	beq.n	80053ce <__sflush_r+0xb2>
 80053ca:	2b16      	cmp	r3, #22
 80053cc:	d101      	bne.n	80053d2 <__sflush_r+0xb6>
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	e7b1      	b.n	8005336 <__sflush_r+0x1a>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	e7ad      	b.n	8005338 <__sflush_r+0x1c>
 80053dc:	690f      	ldr	r7, [r1, #16]
 80053de:	2f00      	cmp	r7, #0
 80053e0:	d0a9      	beq.n	8005336 <__sflush_r+0x1a>
 80053e2:	0793      	lsls	r3, r2, #30
 80053e4:	680e      	ldr	r6, [r1, #0]
 80053e6:	bf08      	it	eq
 80053e8:	694b      	ldreq	r3, [r1, #20]
 80053ea:	600f      	str	r7, [r1, #0]
 80053ec:	bf18      	it	ne
 80053ee:	2300      	movne	r3, #0
 80053f0:	eba6 0807 	sub.w	r8, r6, r7
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	f1b8 0f00 	cmp.w	r8, #0
 80053fa:	dd9c      	ble.n	8005336 <__sflush_r+0x1a>
 80053fc:	6a21      	ldr	r1, [r4, #32]
 80053fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005400:	4643      	mov	r3, r8
 8005402:	463a      	mov	r2, r7
 8005404:	4628      	mov	r0, r5
 8005406:	47b0      	blx	r6
 8005408:	2800      	cmp	r0, #0
 800540a:	dc06      	bgt.n	800541a <__sflush_r+0xfe>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	e78e      	b.n	8005338 <__sflush_r+0x1c>
 800541a:	4407      	add	r7, r0
 800541c:	eba8 0800 	sub.w	r8, r8, r0
 8005420:	e7e9      	b.n	80053f6 <__sflush_r+0xda>
 8005422:	bf00      	nop
 8005424:	20400001 	.word	0x20400001

08005428 <_fflush_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	4605      	mov	r5, r0
 800542e:	460c      	mov	r4, r1
 8005430:	b913      	cbnz	r3, 8005438 <_fflush_r+0x10>
 8005432:	2500      	movs	r5, #0
 8005434:	4628      	mov	r0, r5
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	b118      	cbz	r0, 8005442 <_fflush_r+0x1a>
 800543a:	6983      	ldr	r3, [r0, #24]
 800543c:	b90b      	cbnz	r3, 8005442 <_fflush_r+0x1a>
 800543e:	f000 f887 	bl	8005550 <__sinit>
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <_fflush_r+0x6c>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d11b      	bne.n	8005480 <_fflush_r+0x58>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <_fflush_r+0xa>
 8005452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005454:	07d0      	lsls	r0, r2, #31
 8005456:	d404      	bmi.n	8005462 <_fflush_r+0x3a>
 8005458:	0599      	lsls	r1, r3, #22
 800545a:	d402      	bmi.n	8005462 <_fflush_r+0x3a>
 800545c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545e:	f7ff fb98 	bl	8004b92 <__retarget_lock_acquire_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff ff59 	bl	800531c <__sflush_r>
 800546a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800546c:	07da      	lsls	r2, r3, #31
 800546e:	4605      	mov	r5, r0
 8005470:	d4e0      	bmi.n	8005434 <_fflush_r+0xc>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	059b      	lsls	r3, r3, #22
 8005476:	d4dd      	bmi.n	8005434 <_fflush_r+0xc>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f7ff fb8b 	bl	8004b94 <__retarget_lock_release_recursive>
 800547e:	e7d9      	b.n	8005434 <_fflush_r+0xc>
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <_fflush_r+0x70>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d101      	bne.n	800548a <_fflush_r+0x62>
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	e7df      	b.n	800544a <_fflush_r+0x22>
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <_fflush_r+0x74>)
 800548c:	429c      	cmp	r4, r3
 800548e:	bf08      	it	eq
 8005490:	68ec      	ldreq	r4, [r5, #12]
 8005492:	e7da      	b.n	800544a <_fflush_r+0x22>
 8005494:	08005ca8 	.word	0x08005ca8
 8005498:	08005cc8 	.word	0x08005cc8
 800549c:	08005c88 	.word	0x08005c88

080054a0 <std>:
 80054a0:	2300      	movs	r3, #0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	e9c0 3300 	strd	r3, r3, [r0]
 80054aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ae:	6083      	str	r3, [r0, #8]
 80054b0:	8181      	strh	r1, [r0, #12]
 80054b2:	6643      	str	r3, [r0, #100]	; 0x64
 80054b4:	81c2      	strh	r2, [r0, #14]
 80054b6:	6183      	str	r3, [r0, #24]
 80054b8:	4619      	mov	r1, r3
 80054ba:	2208      	movs	r2, #8
 80054bc:	305c      	adds	r0, #92	; 0x5c
 80054be:	f7fd febd 	bl	800323c <memset>
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <std+0x38>)
 80054c4:	6263      	str	r3, [r4, #36]	; 0x24
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <std+0x3c>)
 80054c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <std+0x40>)
 80054cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <std+0x44>)
 80054d0:	6224      	str	r4, [r4, #32]
 80054d2:	6323      	str	r3, [r4, #48]	; 0x30
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	080057dd 	.word	0x080057dd
 80054dc:	080057ff 	.word	0x080057ff
 80054e0:	08005837 	.word	0x08005837
 80054e4:	0800585b 	.word	0x0800585b

080054e8 <_cleanup_r>:
 80054e8:	4901      	ldr	r1, [pc, #4]	; (80054f0 <_cleanup_r+0x8>)
 80054ea:	f000 b8af 	b.w	800564c <_fwalk_reent>
 80054ee:	bf00      	nop
 80054f0:	08005429 	.word	0x08005429

080054f4 <__sfmoreglue>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	2268      	movs	r2, #104	; 0x68
 80054f8:	1e4d      	subs	r5, r1, #1
 80054fa:	4355      	muls	r5, r2
 80054fc:	460e      	mov	r6, r1
 80054fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005502:	f7fd ff0f 	bl	8003324 <_malloc_r>
 8005506:	4604      	mov	r4, r0
 8005508:	b140      	cbz	r0, 800551c <__sfmoreglue+0x28>
 800550a:	2100      	movs	r1, #0
 800550c:	e9c0 1600 	strd	r1, r6, [r0]
 8005510:	300c      	adds	r0, #12
 8005512:	60a0      	str	r0, [r4, #8]
 8005514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005518:	f7fd fe90 	bl	800323c <memset>
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}

08005520 <__sfp_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sfp_lock_acquire+0x8>)
 8005522:	f7ff bb36 	b.w	8004b92 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200002f5 	.word	0x200002f5

0800552c <__sfp_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__sfp_lock_release+0x8>)
 800552e:	f7ff bb31 	b.w	8004b94 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200002f5 	.word	0x200002f5

08005538 <__sinit_lock_acquire>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__sinit_lock_acquire+0x8>)
 800553a:	f7ff bb2a 	b.w	8004b92 <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	200002f6 	.word	0x200002f6

08005544 <__sinit_lock_release>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sinit_lock_release+0x8>)
 8005546:	f7ff bb25 	b.w	8004b94 <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	200002f6 	.word	0x200002f6

08005550 <__sinit>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	f7ff fff0 	bl	8005538 <__sinit_lock_acquire>
 8005558:	69a3      	ldr	r3, [r4, #24]
 800555a:	b11b      	cbz	r3, 8005564 <__sinit+0x14>
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005560:	f7ff bff0 	b.w	8005544 <__sinit_lock_release>
 8005564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005568:	6523      	str	r3, [r4, #80]	; 0x50
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <__sinit+0x68>)
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <__sinit+0x6c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	62a2      	str	r2, [r4, #40]	; 0x28
 8005572:	42a3      	cmp	r3, r4
 8005574:	bf04      	itt	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	61a3      	streq	r3, [r4, #24]
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f820 	bl	80055c0 <__sfp>
 8005580:	6060      	str	r0, [r4, #4]
 8005582:	4620      	mov	r0, r4
 8005584:	f000 f81c 	bl	80055c0 <__sfp>
 8005588:	60a0      	str	r0, [r4, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	f000 f818 	bl	80055c0 <__sfp>
 8005590:	2200      	movs	r2, #0
 8005592:	60e0      	str	r0, [r4, #12]
 8005594:	2104      	movs	r1, #4
 8005596:	6860      	ldr	r0, [r4, #4]
 8005598:	f7ff ff82 	bl	80054a0 <std>
 800559c:	68a0      	ldr	r0, [r4, #8]
 800559e:	2201      	movs	r2, #1
 80055a0:	2109      	movs	r1, #9
 80055a2:	f7ff ff7d 	bl	80054a0 <std>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	2202      	movs	r2, #2
 80055aa:	2112      	movs	r1, #18
 80055ac:	f7ff ff78 	bl	80054a0 <std>
 80055b0:	2301      	movs	r3, #1
 80055b2:	61a3      	str	r3, [r4, #24]
 80055b4:	e7d2      	b.n	800555c <__sinit+0xc>
 80055b6:	bf00      	nop
 80055b8:	08005a24 	.word	0x08005a24
 80055bc:	080054e9 	.word	0x080054e9

080055c0 <__sfp>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	4607      	mov	r7, r0
 80055c4:	f7ff ffac 	bl	8005520 <__sfp_lock_acquire>
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <__sfp+0x84>)
 80055ca:	681e      	ldr	r6, [r3, #0]
 80055cc:	69b3      	ldr	r3, [r6, #24]
 80055ce:	b913      	cbnz	r3, 80055d6 <__sfp+0x16>
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff ffbd 	bl	8005550 <__sinit>
 80055d6:	3648      	adds	r6, #72	; 0x48
 80055d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055dc:	3b01      	subs	r3, #1
 80055de:	d503      	bpl.n	80055e8 <__sfp+0x28>
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	b30b      	cbz	r3, 8005628 <__sfp+0x68>
 80055e4:	6836      	ldr	r6, [r6, #0]
 80055e6:	e7f7      	b.n	80055d8 <__sfp+0x18>
 80055e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055ec:	b9d5      	cbnz	r5, 8005624 <__sfp+0x64>
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <__sfp+0x88>)
 80055f0:	60e3      	str	r3, [r4, #12]
 80055f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055f6:	6665      	str	r5, [r4, #100]	; 0x64
 80055f8:	f7ff faca 	bl	8004b90 <__retarget_lock_init_recursive>
 80055fc:	f7ff ff96 	bl	800552c <__sfp_lock_release>
 8005600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005608:	6025      	str	r5, [r4, #0]
 800560a:	61a5      	str	r5, [r4, #24]
 800560c:	2208      	movs	r2, #8
 800560e:	4629      	mov	r1, r5
 8005610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005614:	f7fd fe12 	bl	800323c <memset>
 8005618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800561c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005620:	4620      	mov	r0, r4
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	3468      	adds	r4, #104	; 0x68
 8005626:	e7d9      	b.n	80055dc <__sfp+0x1c>
 8005628:	2104      	movs	r1, #4
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ff62 	bl	80054f4 <__sfmoreglue>
 8005630:	4604      	mov	r4, r0
 8005632:	6030      	str	r0, [r6, #0]
 8005634:	2800      	cmp	r0, #0
 8005636:	d1d5      	bne.n	80055e4 <__sfp+0x24>
 8005638:	f7ff ff78 	bl	800552c <__sfp_lock_release>
 800563c:	230c      	movs	r3, #12
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	e7ee      	b.n	8005620 <__sfp+0x60>
 8005642:	bf00      	nop
 8005644:	08005a24 	.word	0x08005a24
 8005648:	ffff0001 	.word	0xffff0001

0800564c <_fwalk_reent>:
 800564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005650:	4606      	mov	r6, r0
 8005652:	4688      	mov	r8, r1
 8005654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005658:	2700      	movs	r7, #0
 800565a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800565e:	f1b9 0901 	subs.w	r9, r9, #1
 8005662:	d505      	bpl.n	8005670 <_fwalk_reent+0x24>
 8005664:	6824      	ldr	r4, [r4, #0]
 8005666:	2c00      	cmp	r4, #0
 8005668:	d1f7      	bne.n	800565a <_fwalk_reent+0xe>
 800566a:	4638      	mov	r0, r7
 800566c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d907      	bls.n	8005686 <_fwalk_reent+0x3a>
 8005676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567a:	3301      	adds	r3, #1
 800567c:	d003      	beq.n	8005686 <_fwalk_reent+0x3a>
 800567e:	4629      	mov	r1, r5
 8005680:	4630      	mov	r0, r6
 8005682:	47c0      	blx	r8
 8005684:	4307      	orrs	r7, r0
 8005686:	3568      	adds	r5, #104	; 0x68
 8005688:	e7e9      	b.n	800565e <_fwalk_reent+0x12>

0800568a <__swhatbuf_r>:
 800568a:	b570      	push	{r4, r5, r6, lr}
 800568c:	460e      	mov	r6, r1
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	2900      	cmp	r1, #0
 8005694:	b096      	sub	sp, #88	; 0x58
 8005696:	4614      	mov	r4, r2
 8005698:	461d      	mov	r5, r3
 800569a:	da08      	bge.n	80056ae <__swhatbuf_r+0x24>
 800569c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	602a      	str	r2, [r5, #0]
 80056a4:	061a      	lsls	r2, r3, #24
 80056a6:	d410      	bmi.n	80056ca <__swhatbuf_r+0x40>
 80056a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ac:	e00e      	b.n	80056cc <__swhatbuf_r+0x42>
 80056ae:	466a      	mov	r2, sp
 80056b0:	f000 f8fa 	bl	80058a8 <_fstat_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	dbf1      	blt.n	800569c <__swhatbuf_r+0x12>
 80056b8:	9a01      	ldr	r2, [sp, #4]
 80056ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056c2:	425a      	negs	r2, r3
 80056c4:	415a      	adcs	r2, r3
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	e7ee      	b.n	80056a8 <__swhatbuf_r+0x1e>
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	2000      	movs	r0, #0
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	b016      	add	sp, #88	; 0x58
 80056d2:	bd70      	pop	{r4, r5, r6, pc}

080056d4 <__smakebuf_r>:
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056d8:	079d      	lsls	r5, r3, #30
 80056da:	4606      	mov	r6, r0
 80056dc:	460c      	mov	r4, r1
 80056de:	d507      	bpl.n	80056f0 <__smakebuf_r+0x1c>
 80056e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	2301      	movs	r3, #1
 80056ea:	6163      	str	r3, [r4, #20]
 80056ec:	b002      	add	sp, #8
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	ab01      	add	r3, sp, #4
 80056f2:	466a      	mov	r2, sp
 80056f4:	f7ff ffc9 	bl	800568a <__swhatbuf_r>
 80056f8:	9900      	ldr	r1, [sp, #0]
 80056fa:	4605      	mov	r5, r0
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7fd fe11 	bl	8003324 <_malloc_r>
 8005702:	b948      	cbnz	r0, 8005718 <__smakebuf_r+0x44>
 8005704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d4ef      	bmi.n	80056ec <__smakebuf_r+0x18>
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	e7e3      	b.n	80056e0 <__smakebuf_r+0xc>
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <__smakebuf_r+0x7c>)
 800571a:	62b3      	str	r3, [r6, #40]	; 0x28
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	6020      	str	r0, [r4, #0]
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	81a3      	strh	r3, [r4, #12]
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	6163      	str	r3, [r4, #20]
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	6120      	str	r0, [r4, #16]
 800572e:	b15b      	cbz	r3, 8005748 <__smakebuf_r+0x74>
 8005730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005734:	4630      	mov	r0, r6
 8005736:	f000 f8c9 	bl	80058cc <_isatty_r>
 800573a:	b128      	cbz	r0, 8005748 <__smakebuf_r+0x74>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	89a0      	ldrh	r0, [r4, #12]
 800574a:	4305      	orrs	r5, r0
 800574c:	81a5      	strh	r5, [r4, #12]
 800574e:	e7cd      	b.n	80056ec <__smakebuf_r+0x18>
 8005750:	080054e9 	.word	0x080054e9

08005754 <_raise_r>:
 8005754:	291f      	cmp	r1, #31
 8005756:	b538      	push	{r3, r4, r5, lr}
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	d904      	bls.n	8005768 <_raise_r+0x14>
 800575e:	2316      	movs	r3, #22
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800576a:	b112      	cbz	r2, 8005772 <_raise_r+0x1e>
 800576c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005770:	b94b      	cbnz	r3, 8005786 <_raise_r+0x32>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f830 	bl	80057d8 <_getpid_r>
 8005778:	462a      	mov	r2, r5
 800577a:	4601      	mov	r1, r0
 800577c:	4620      	mov	r0, r4
 800577e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005782:	f000 b817 	b.w	80057b4 <_kill_r>
 8005786:	2b01      	cmp	r3, #1
 8005788:	d00a      	beq.n	80057a0 <_raise_r+0x4c>
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	d103      	bne.n	8005796 <_raise_r+0x42>
 800578e:	2316      	movs	r3, #22
 8005790:	6003      	str	r3, [r0, #0]
 8005792:	2001      	movs	r0, #1
 8005794:	e7e7      	b.n	8005766 <_raise_r+0x12>
 8005796:	2400      	movs	r4, #0
 8005798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800579c:	4628      	mov	r0, r5
 800579e:	4798      	blx	r3
 80057a0:	2000      	movs	r0, #0
 80057a2:	e7e0      	b.n	8005766 <_raise_r+0x12>

080057a4 <raise>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <raise+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f7ff bfd3 	b.w	8005754 <_raise_r>
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c

080057b4 <_kill_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	; (80057d4 <_kill_r+0x20>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	f7fc fa17 	bl	8001bf4 <_kill>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d102      	bne.n	80057d0 <_kill_r+0x1c>
 80057ca:	682b      	ldr	r3, [r5, #0]
 80057cc:	b103      	cbz	r3, 80057d0 <_kill_r+0x1c>
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	200002f0 	.word	0x200002f0

080057d8 <_getpid_r>:
 80057d8:	f7fc ba0a 	b.w	8001bf0 <_getpid>

080057dc <__sread>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	460c      	mov	r4, r1
 80057e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e4:	f000 f894 	bl	8005910 <_read_r>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	bfab      	itete	ge
 80057ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057ee:	89a3      	ldrhlt	r3, [r4, #12]
 80057f0:	181b      	addge	r3, r3, r0
 80057f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057f6:	bfac      	ite	ge
 80057f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057fa:	81a3      	strhlt	r3, [r4, #12]
 80057fc:	bd10      	pop	{r4, pc}

080057fe <__swrite>:
 80057fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005802:	461f      	mov	r7, r3
 8005804:	898b      	ldrh	r3, [r1, #12]
 8005806:	05db      	lsls	r3, r3, #23
 8005808:	4605      	mov	r5, r0
 800580a:	460c      	mov	r4, r1
 800580c:	4616      	mov	r6, r2
 800580e:	d505      	bpl.n	800581c <__swrite+0x1e>
 8005810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005814:	2302      	movs	r3, #2
 8005816:	2200      	movs	r2, #0
 8005818:	f000 f868 	bl	80058ec <_lseek_r>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	4632      	mov	r2, r6
 800582a:	463b      	mov	r3, r7
 800582c:	4628      	mov	r0, r5
 800582e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005832:	f000 b817 	b.w	8005864 <_write_r>

08005836 <__sseek>:
 8005836:	b510      	push	{r4, lr}
 8005838:	460c      	mov	r4, r1
 800583a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583e:	f000 f855 	bl	80058ec <_lseek_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	bf15      	itete	ne
 8005848:	6560      	strne	r0, [r4, #84]	; 0x54
 800584a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800584e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005852:	81a3      	strheq	r3, [r4, #12]
 8005854:	bf18      	it	ne
 8005856:	81a3      	strhne	r3, [r4, #12]
 8005858:	bd10      	pop	{r4, pc}

0800585a <__sclose>:
 800585a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585e:	f000 b813 	b.w	8005888 <_close_r>
	...

08005864 <_write_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	; (8005884 <_write_r+0x20>)
 8005868:	4604      	mov	r4, r0
 800586a:	4608      	mov	r0, r1
 800586c:	4611      	mov	r1, r2
 800586e:	2200      	movs	r2, #0
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f7fc f9dc 	bl	8001c30 <_write>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_write_r+0x1e>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_write_r+0x1e>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	200002f0 	.word	0x200002f0

08005888 <_close_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d06      	ldr	r5, [pc, #24]	; (80058a4 <_close_r+0x1c>)
 800588c:	2300      	movs	r3, #0
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	f7fc f9da 	bl	8001c4c <_close>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_close_r+0x1a>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_close_r+0x1a>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200002f0 	.word	0x200002f0

080058a8 <_fstat_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	; (80058c8 <_fstat_r+0x20>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fc f9cc 	bl	8001c52 <_fstat>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_fstat_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_fstat_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	200002f0 	.word	0x200002f0

080058cc <_isatty_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_isatty_r+0x1c>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fc f9c0 	bl	8001c5c <_isatty>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_isatty_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_isatty_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	200002f0 	.word	0x200002f0

080058ec <_lseek_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d07      	ldr	r5, [pc, #28]	; (800590c <_lseek_r+0x20>)
 80058f0:	4604      	mov	r4, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	2200      	movs	r2, #0
 80058f8:	602a      	str	r2, [r5, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f7fc f9b0 	bl	8001c60 <_lseek>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_lseek_r+0x1e>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_lseek_r+0x1e>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	200002f0 	.word	0x200002f0

08005910 <_read_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_read_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fc f976 	bl	8001c10 <_read>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_read_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_read_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	200002f0 	.word	0x200002f0

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
